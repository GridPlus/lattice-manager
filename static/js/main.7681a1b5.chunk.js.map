{"version":3,"sources":["util/helpers.ts","components/main.tsx","components/validateSig.tsx","util/storageSession.ts","sdk/sdkSession.ts","util/localStorage.ts","store/AppContext.tsx","hooks/useRecords.tsx","App.tsx","index.tsx","components/formatting/pageContent.tsx","components/NameEditor.tsx","components/connect.tsx","components/pair.tsx","components/permissions.tsx","components/settings.tsx","util/sendErrorNotification.tsx","hooks/useAddresses.tsx","components/AddAddressesButton.tsx","components/AddAddressesModal.tsx","components/AddressTable.tsx","util/addresses.ts","util/csv.ts","components/ExportAddressesButton.tsx","components/ImportAddressesButton.tsx","components/ImportAddressesModal.tsx","components/SyncAddressesButton.tsx","components/AddressTagsPage.tsx","components/landing.tsx","hooks/useFeature.tsx","components/loading.tsx","components/error.tsx","components/btc-wallet/wallet.tsx","util/sendChecks.ts","components/btc-wallet/send.tsx","components/btc-wallet/receive.tsx"],"names":["bs58check","require","bech32","HARDENED_OFFSET","constants","DEFAULT_APP_NAME","ENV","process","REACT_APP_ENV","BASE_SIGNING_URL","REACT_APP_BASE_SIGNING_URL","BTC_PROD_DATA_API","BTC_BROADCAST_ENDPOINT","ASYNC_SDK_TIMEOUT","ADDRESSES_PER_PAGE","ADDRESS_RECORD_TYPE","CONTRACTS_PER_PAGE","SHORT_TIMEOUT","BTC_COIN","parseInt","REACT_APP_BTC_COIN","SATS_TO_BTC","Math","pow","BTC_MAIN_GAP_LIMIT","BTC_CHANGE_GAP_LIMIT","BTC_ADDR_BLOCK_LEN","BTC_CHANGE_ADDR_BLOCK_LEN","BTC_DEFAULT_FEE_RATE","REACT_APP_BTC_DEFAULT_FEE_RATE","BTC_TX_BASE_URL","REACT_APP_BTC_TX_BASE_URL","PAGE_SIZE","CONTRACT_PAGE_SIZE","LOST_PAIRING_ERR","LOST_PAIRING_MSG","BTC_TESTNET","REACT_APP_BTC_TESTNET","KEYRING_LOGOUT_MS","KEYRING_DATA_PATH","ABI_PACK_URL","LATTICE_CERT_SIGNER","REACT_APP_LATTICE_CERT_SIGNER","CONTRACTS_HELP_LINK","TAGS_HELP_LINK","PERMISSIONS_HELP_LINK","POAP_CLAIM_REMOTE_URL","BTC_WALLET_STORAGE_KEY","BTC_PURPOSE_NONE","BTC_PURPOSE_NONE_STR","BTC_PURPOSE_LEGACY","BTC_PURPOSE_LEGACY_STR","BTC_PURPOSE_WRAPPED_SEGWIT","BTC_PURPOSE_WRAPPED_SEGWIT_STR","BTC_PURPOSE_SEGWIT","BTC_PURPOSE_SEGWIT_STR","BTC_SEGWIT_NATIVE_V0_PREFIX","BTC_LEGACY_VERSION","BTC_WRAPPED_SEGWIT_VERSION","RATE_LIMIT","THROTTLE_RATE_LIMIT","GET_ABI_URL","DEFAULT_CONTRACT_NETWORK","CONTRACT_NETWORKS","ethereum","label","url","baseUrl","apiRoute","arbitrum","polygon","optimism","binance","avalanche","devConstants","BTC_DEV_DATA_API","fetchJSON","opts","cb","fetch","then","response","json","resp","catch","err","localStorage","getSettings","devLattice","Object","keys","forEach","key","resolveAfter","delay","Promise","ok","setTimeout","throttledFetchJSON","fn","wait","resolve","args","res","throttle","_fetchBtcUtxos","addresses","utxos","offset","length","ADDRS_PER_CALL","MAX_UTOXS_RET","addrsToCheck","slice","i","data","unspent_outputs","u","confirmations","push","id","tx_hash_big_endian","vout","tx_output_n","value","address","_blockchainDotComScriptToAddr","script","_fetchBtcUtxosTestnet","pop","status","confirmed","txid","fetchBtcUtxos","addrsCopy","JSON","parse","stringify","_fetchBtcTxs","txs","isFirstCall","fetchFn","isSingleAddr","MAX_TXS_RET","txsAdded","t","ftx","timestamp","time","block_index","hash","fee","inputs","outputs","input","addr","prev_out","out","output","every","_tx","_fetchBtcTxsTestnet","lastSeenId","formattedTxs","confirmedCount","block_time","vin","prevout","scriptpubkey_address","concat","fetchBtcTxs","fetchBtcPrice","last_trade_price","broadcastBtcTx","rawTx","method","body","text","harden","x","_calcBtcTxNumInputs","feeRate","inputIdx","currentValue","numInputs","numBytes","getBtcNumTxBytes","floor","_scriptStr","purpose","getBtcPurpose","bech32Prefix","pubkeyhash","Buffer","from","words","toWords","unshift","encode","version","localSettings","btcPurpose","inputSize","outputSize","inputWitnessSize","vFactor","buildBtcTxReq","recipient","btcValue","addrs","changeAddrs","isFullSpend","error","satValue","round","Number","bytesUsed","BASE_SIGNER_PATH","prevOuts","utxo","signerPath","indexOf","prevOut","txHash","index","req","changePath","currency","validateBtcAddr","decode","e","toHexStr","bn","s","toString","base","filterUniqueObjects","objs","filtered","reverse","obj","isDup","fobj","matchedKeys","Content","Layout","Footer","Sider","LOGIN_PARAM","DEFAULT_MENU_ITEM","Main","props","context","keyringName","URLSearchParams","window","location","search","get","state","name","menuItem","session","collapsed","msg","loading","pendingMsg","waiting","onCancel","deviceID","password","lastUpdated","Date","windowWidth","innerWidth","walletIsExternal","openedByKeyring","hwCheck","handleMenuChange","bind","handleLogout","handleKeyringOpener","syncActiveWalletState","cancelConnect","connectSession","handlePair","fetchBtcData","setError","refreshWallets","handlePageTurn","retry","updateWidth","addEventListener","this","isMobile","setState","params","forceLogin","onload","prevKeyringLogin","getKeyringItem","keyringTimeoutBoundary","getTime","lastLogin","connect","removeKeyringItem","getLogin","removeEventListener","updates","settings","setSession","SDKSession","client","pair","unwait","isConnected","setKeyringItem","endpoint","customEndpoint","opener","postMessage","close","enc","href","page","setPage","stateUpdate","disconnect","removeLogin","removeAddresses","handleLostPairing","showLoading","isPaired","setLogin","returnKeyringData","message","isRecursion","fetchBtcAddresses","newAddrCounts","console","regular","change","clearUtxos","fetchBtcStateData","bypassRefresh","activeWallet","getActiveWallet","isExternal","external","shouldRefresh","hideWallet","collapsedWidth","theme","mode","onSelect","items","icon","children","getMenuItems","renderMenu","onClick","type","size","style","backgroundColor","marginRight","className","target","rel","alt","src","height","extra","walletTag","ghost","title","renderHeaderText","retryCb","content","refreshData","pageTurnCb","hasActiveWallet","spin","renderMenuItem","submit","hide","submitCb","setKeyringName","errMsg","textAlign","getFullYear","color","margin","renderContent","minHeight","renderHeader","renderSidebar","renderErrorHeader","renderPage","renderFooter","React","Component","contextType","AppContext","ReactCrypto","default","EC","ec","ValidateSig","isLoading","poapToClaim","isValid","validateSig","getMessageForPoap","getPreimage","toLocaleLowerCase","replace","signer","sig","curve","crypto","msgHash","createHash","update","digest","keyFromPublic","verify","_certData","PREIMAGE_LEN","start","preimage","METADATA_LEN","pubkey","_sig","cert","getCert","_validate","validateCert","finally","result","subTitle","spanLength","spanOffset","span","bordered","renderResult","shouldShowClaimCard","marginTop","disabled","claimPoap","paddingTop","StorageSession","device_id","pass","store","getRootStore","o","Array","isArray","newData","oldData","isObject","newKey","updateBranch","wallet_uid","k","setRootStore","stateUpdateHandler","storageSession","btcTxs","btcUtxos","lastFetchedBtcData","btcPrice","getBtcWalletData","saveBtcWalletData","lastUsed","_getLastUsedBtcAddrIdx","BTC","newPage","driedAddrs","hasBTCAddrs","hasBTCChangeAddrs","BTC_CHANGE","BTC_PURPOSE","allAddrs","rehydratedAddrs","walletData","dryAddresses","uid","save","getWalletData","purposeSpecificData","rehydrateAddresses","pw","_triedLocal","tmpTimeout","_genPrivKey","Client","privKey","timeout","skipRetryOnWrongWallet","warn","_tryConnect","log","prevWallet","resetStateData","sign","tx","Error","balance","isChange","totalFetched","lastUsedIdx","currentAddrs","GAP_LIMIT","targetIdx","maxToFetch","nToFetch","min","changeIdx","startPath","n","skipCache","_getAddresses","_txs","_utxos","now","newTxs","_processBtcTxs","newUtxos","sort","a","b","getAddresses","coin","maxUsed","processedTxs","incoming","inputSum","internalOutputSum","externalOutputSum","sortedTxs","LOGIN_ID_STORAGE_KEY","LOGIN_PASSWORD_STORAGE_KEY","ADDRESSES_STORAGE_KEY","CONTRACTS_STORAGE_KEY","CONTRACT_PACKS_STORAGE_KEY","ROOT_STORE","REACT_APP_ROOT_STORE","getItem","setItem","removeItem","getRootStoreItem","setRootStoreItem","getKeyring","omit","getLoginId","setLoginId","removeLoginId","getLoginPassword","setLoginPassword","removeLoginPassword","getDeviceIndexedItem","deviceId","setDeviceIndexedItem","removeDeviceIndexedItem","exports","removeRootStore","removeRootStoreItem","setSettings","setKeyring","renameKeyringItem","oldKey","item","setAddresses","getContracts","setContracts","removeContracts","getContractPacks","setContractPacks","removeContractPacks","createContext","undefined","AppContextProvider","overrides","useState","setIsMobile","isLoadingAddresses","setIsLoadingAddresses","defaultValue","records","setRecords","recordsToAdd","recordsInState","unionBy","recordsToRemove","differenceBy","useRecords","addAddressesToState","removeAddressesFromState","resetAddressesInState","defaultContext","useEffect","windowIsMobileWidth","Provider","App","container","document","getElementById","createRoot","render","PageContent","justify","NameEditor","setName","isEditing","setIsEditing","isHovered","setIsHovered","Form","useForm","form","layout","onFinish","justifyContent","Item","initialValue","rules","required","resetFields","htmlType","EditOutlined","fontSize","onMouseEnter","onMouseLeave","Connect","modal","showSettings","handleCancel","handleSubmit","renderMsg","showModal","focus","getFieldDecorator","placeholder","ref","width","Password","onPressEnter","renderConnectButton","footer","visible","onOk","hideModal","inModal","renderSetupInfo","closable","spanWidth","tooLong","renderModal","LinkOutlined","DesktopOutlined","renderForm","Pair","code","toUpperCase","clientWidth","w","getBoxWidth","getBoxFontHeight","onChange","handleUpdate","BN","HOURS","assets","ETH","decimals","Settings","keyring","getBtcPurposeName","reload","evt","checked","updateCustomEndpoint","Group","handleChangeBitcoinVersionSetting","direction","resetState","WarningOutlined","updateUseDevLattice","cols","dataIndex","record","removeKeyring","toLowerCase","Panel","header","dataSource","columns","renderKeyringsSetting","renderCustomEndpointSetting","renderBitcoinVersionSetting","renderDevLatticeSetting","renderCard","sendErrorNotification","description","onClose","btn","danger","notification","open","placement","useAddresses","useContext","fetchAddresses","useCallback","fetched","getKvRecords","total","addAddresses","addressesToAdd","recordsList","_","chain","chunk","map","addrChunk","keyBy","mapValues","reject","addKvRecords","caseSensitive","selectedAddresses","ids","r","isEmpty","removeKvRecords","AddAddressesButton","PlusOutlined","AddAddressesModal","isModalVisible","setIsModalVisible","initialAddresses","maskClosable","destroyOnClose","validateFields","onFinishFailed","autoComplete","preserve","List","fields","add","remove","restField","display","flexDirection","marginBottom","flexGrow","validateTrigger","max","validator","rule","some","getFieldsValue","filter","addonBefore","val","MinusSquareFilled","marginLeft","block","AddressTable","setInput","filteredAddresses","setFilteredAddresses","setSelectedAddresses","fuzzysort","go","_addresses","intersectionBy","allowClear","tableLayout","spinning","tip","indicator","LoadingOutlined","pagination","position","pageSize","defaultCurrent","showSizeChanger","rowSelection","__","_selectedAddresses","onSelectAll","selectedRowKeys","Column","defaultSortOrder","sorter","localeCompare","getAddressKey","Name","Key","getAddressVal","Address","Val","ExportAddressesButton","ExportOutlined","csvURL","csv","addressList","Papa","unparse","addressesToCsvString","csvData","Blob","URL","createObjectURL","tempLink","createElement","setAttribute","click","ImportAddressesButton","ImportOutlined","ImportAddressesModal","setIsAddAddressesModalVisible","setInitialAddresses","file","setFile","fileReader","FileReader","handleOnSubmit","preventDefault","event","csvStringToAddresses","readAsText","accept","files","SyncAddressesButton","SyncOutlined","AddressTagsPage","isAddAddressesModalVisible","isImportAddressesModalVisible","setIsImportAddressesModalVisible","Landing","USES_AUTO_ABI","getFwVersion","fix","minor","major","fromEntries","entries","CAN_VIEW_CONTRACTS","_fix","_minor","_major","useFeature","TagsOutlined","maxWidth","padding","showIcon","maxHeight","Loading","keyPressListener","btnMsg","Wallet","offsetWidth","maxChars","getInnerWidth","align","getDateDiffStr","Meta","avatar","subtitle","ensureTrimmedText","itemMeta","ArrowDownOutlined","ArrowUpOutlined","elapsed","timeType","elapsedSec","getBtcTxs","pending","ClockCircleOutlined","itemLayout","renderItem","renderListItem","btcBalance","getBtcBalance","precision","getPage","CaretLeftOutlined","CaretRightOutlined","renderLastUpdatedTag","ReloadOutlined","renderList","renderPages","renderStartCard","ts","hour","day","week","month","year","diff","allChecks","full","fullCheck","checkEthRecipient","checkNumericValue","recipientCheck","isPrefixed","correctLength","num","isNaN","RECIPIENT_ID","VALUE_ID","Send","valueCheck","btcFeeRate","ensResolvedAddress","handleENSResolution","renderBanner","renderSubmitButton","renderValueLabel","buildBtcRequest","updateBtcFeeRate","ceil","check","numberVal","isZeroPrefixed","isLessThanOne","checkValue","calculateMaxValue","duration","updateValue","renderIcon","renderValueLabelTitle","updateRecipient","CheckCircleOutlined","CloseCircleOutlined","desc","getUrl","getBtcUtxos","txBytes","feeSat","toFixed","isValidReq","renderBalance","renderRecipientLabel","renderExtra","image","Empty","PRESENTED_IMAGE_SIMPLE","Search","Input","TextArea","SEARCH_ID","Receive","updateDisplayAddress","displayAddr","getBtcDisplayAddress","select","execCommand","autoSize","minRows","maxRows","copyAddress","CopyOutlined","enterButton","onSearch","cardW","renderAddrBox"],"mappings":"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","file":"static/js/main.7681a1b5.chunk.js","sourcesContent":["\nimport localStorage from \"./localStorage\";\n\nconst bs58check = require('bs58check');\nconst bech32 = require('bech32').bech32;\nconst HARDENED_OFFSET = 0x80000000;\nexport const constants = {\n    DEFAULT_APP_NAME: 'Lattice Manager',\n    ENV: process.env.REACT_APP_ENV || 'prod',\n    BASE_SIGNING_URL: process.env.REACT_APP_BASE_SIGNING_URL || 'https://signing.gridpl.us',\n    BTC_PROD_DATA_API: 'https://blockchain.info',\n    BTC_BROADCAST_ENDPOINT: 'https://blockstream.info/api/tx',\n    HARDENED_OFFSET,\n    ASYNC_SDK_TIMEOUT: 60000,\n    ADDRESSES_PER_PAGE: 10,\n    ADDRESS_RECORD_TYPE: 0,\n    CONTRACTS_PER_PAGE: 10,\n    SHORT_TIMEOUT: 30000,\n    BTC_COIN: parseInt(process.env.REACT_APP_BTC_COIN) || HARDENED_OFFSET,\n    SATS_TO_BTC: Math.pow(10, 8),\n    BTC_MAIN_GAP_LIMIT: 20,\n    BTC_CHANGE_GAP_LIMIT: 1,\n    BTC_ADDR_BLOCK_LEN: 10,\n    BTC_CHANGE_ADDR_BLOCK_LEN: 1,\n    BTC_DEFAULT_FEE_RATE: process.env.REACT_APP_BTC_DEFAULT_FEE_RATE || 10, // 10 sat/byte\n    BTC_TX_BASE_URL: process.env.REACT_APP_BTC_TX_BASE_URL || 'https://www.blockchain.com/btc/tx',\n    PAGE_SIZE: 20, // 20 transactions per requested page, per `gridplus-cloud-services`\n    CONTRACT_PAGE_SIZE: 6,\n    LOST_PAIRING_ERR: \"NOT_PAIRED\",\n    LOST_PAIRING_MSG: \"Cannot find Lattice connection. Please re-connect.\",\n    BTC_TESTNET: process.env.REACT_APP_BTC_TESTNET || null,\n    KEYRING_LOGOUT_MS: parseInt(process.env.KEYRING_LOGOUT_MS) || 2592000000, // default 30 days\n    KEYRING_DATA_PATH: 'gridplus_web_wallet_keyring_logins', // item in localStorage\n    ABI_PACK_URL: \"https://gridplus.github.io/abi-pack-framework\",\n    LATTICE_CERT_SIGNER: process.env.REACT_APP_LATTICE_CERT_SIGNER || '0477816e8e83bb17c4309cc2e5aa134c573a5943154940095a423149f7cc0384ad52d33f1b4cd89c967bf211c039202df3a7899cb7543de4738c96a81cfde4b117',\n    CONTRACTS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/use-ethereum-smart-contract-abi-function-definitions',\n    TAGS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/address-tags',\n    PERMISSIONS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/how-to-set-and-use-spending-limits',\n    POAP_CLAIM_REMOTE_URL: 'https://us-central1-lattice-poap.cloudfunctions.net/validate',\n    BTC_WALLET_STORAGE_KEY: 'btc_wallet',\n    BTC_PURPOSE_NONE: -1,\n    BTC_PURPOSE_NONE_STR: 'Hide BTC Wallet',\n    BTC_PURPOSE_LEGACY: HARDENED_OFFSET + 44,\n    BTC_PURPOSE_LEGACY_STR: 'Legacy (1)',\n    BTC_PURPOSE_WRAPPED_SEGWIT: HARDENED_OFFSET + 49,\n    BTC_PURPOSE_WRAPPED_SEGWIT_STR: 'Wrapped Segwit (3)',\n    BTC_PURPOSE_SEGWIT: HARDENED_OFFSET + 84,\n    BTC_PURPOSE_SEGWIT_STR: 'Segwit (bc1)',\n    BTC_SEGWIT_NATIVE_V0_PREFIX: 'bc',\n    BTC_LEGACY_VERSION: 0x00,\n    BTC_WRAPPED_SEGWIT_VERSION: 0x05,\n    RATE_LIMIT: 2000, // 2s between requests\n    THROTTLE_RATE_LIMIT: 5000, // 5s between requests\n    GET_ABI_URL: 'https://api.etherscan.io/api?module=contract&action=getabi&address=',\n    DEFAULT_CONTRACT_NETWORK: 'ethereum',\n    CONTRACT_NETWORKS: {\n        ethereum: {\n          label: \"Ethereum\",\n          url: \"https://etherscan.io\",\n          baseUrl: \"https://api.etherscan.io\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        arbitrum: {\n            label: \"Arbitrum\",\n            url: \"https://arbiscan.io\",\n            baseUrl: \"https://api.arbiscan.io\",\n            apiRoute: \"api?module=contract&action=getabi&address=\",\n          },\n        polygon: {\n          label: \"Polygon\",\n          url: \"https://polygonscan.com\",\n          baseUrl: \"https://api.polygonscan.com\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        optimism: {\n            label: \"Optimism\",\n            url: \"https://optimistic.etherscan.io\",\n            baseUrl: \"https://api-optimistic.etherscan.io\",\n            apiRoute: \"api?module=contract&action=getabi&address=\",\n          },\n        binance: {\n          label: \"Binance\",\n          url: \"https://bscscan.com/\",\n          baseUrl: \"https://api.bscscan.com\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        avalanche: {\n          label: \"Avalanche\",\n          url: \"https://snowtrace.io\",\n          baseUrl: \"https://api.snowtrace.io\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n      },\n};\n\nconst devConstants = {\n    BTC_DEV_DATA_API: 'https://blockstream.info/testnet/api',\n    BTC_BROADCAST_ENDPOINT : 'https://blockstream.info/testnet/api/tx',\n    BASE_SIGNING_URL: 'https://signing.staging-gridpl.us',\n    // Deprecating because using two different stores was very tricky and we don't\n    // need the second one anyway\n    // ROOT_STORE: 'gridplus-dev', \n    BTC_COIN: HARDENED_OFFSET + 1,\n    BTC_DEFAULT_FEE_RATE: 10,\n    BTC_TX_BASE_URL: 'https://www.blockchain.com/btc-testnet/tx',\n    BTC_TESTNET: 'Testnet3',\n    LATTICE_CERT_SIGNER: '045cfdf77a00b4b6b4a5b8bb26b5497dbc7a4d01cbefd7aaeaf5f6f8f8865976e7941ab0ec1651209c444009fd48d925a17de5040ba47eaf3f5b51720dd40b2f9d',\n    BTC_SEGWIT_NATIVE_V0_PREFIX: 'tb',\n    BTC_LEGACY_VERSION: 0x6F,\n    BTC_WRAPPED_SEGWIT_VERSION: 0xC4,\n}\n\n// NEW: If you have checked the \"Using Dev Lattice\" box in settings, the constants\n// are swapped out here\nconst localSettings = localStorage.getSettings();\nif (localSettings.devLattice) {\n    Object.keys(devConstants).forEach((key) => {\n        constants[key] = devConstants[key];\n    })\n}\n\n\n//--------------------------------------------\n// CHAIN DATA SYNCING HELPERS\n//--------------------------------------------\nfunction fetchJSON(url, opts, cb) {\n    fetch(url, opts)\n    .then((response) => response.json())\n    .then((resp) => cb(null, resp))\n    .catch((err) => cb(err))\n}\n\nconst resolveAfter = delay => new Promise(ok => setTimeout(ok, delay));\n\nfunction throttle(fn, delay) {\n    let wait: any = Promise.resolve();\n    return (...args) => {\n      const res = wait.then(() => fn(...args));\n      wait = wait.then(() => resolveAfter(delay));\n      return res;\n    };\n  }\n\nconst throttledFetchJSON = throttle(fetchJSON, constants.THROTTLE_RATE_LIMIT);\n\n//====== UTXOS ==================\n// For mainnet (production env) we can bulk request data from the blockchain.com API\nfunction _fetchBtcUtxos(addresses, cb, utxos=[], offset=0) {\n    if (addresses.length === 0) {\n        // No more addresses left to check. We are done.\n        return cb(null, utxos);\n    }\n    const ADDRS_PER_CALL = 20;\n    const MAX_UTOXS_RET = 50;\n    const addrsToCheck = addresses.slice(0, ADDRS_PER_CALL);\n    let url = `${constants.BTC_PROD_DATA_API}/unspent?active=`;\n    for (let i = 0; i < addrsToCheck.length; i++) {\n        if (i === 0) {\n            url = `${url}${addrsToCheck[i]}`\n        } else {\n            url = `${url}|${addrsToCheck[i]}`\n        }\n    }\n    url = `${url}&limit=${MAX_UTOXS_RET}&confirmations=1`;\n    if (offset > 0) {\n        // If this is a follow up, fetch txs after an offset\n        url = `${url}&offset=${offset}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err);\n        // Add confirmed UTXOs\n        data.unspent_outputs.forEach((u) => {\n            if (u.confirmations > 0) {\n                utxos.push({\n                    id: u.tx_hash_big_endian,\n                    vout: u.tx_output_n,\n                    value: u.value,\n                    address: _blockchainDotComScriptToAddr(u.script),\n                })\n            }\n        })\n        // Determine if we need to recurse on this set of addresses\n        if (data.unspent_outputs.length >= MAX_UTOXS_RET) {\n            return setTimeout(() => {\n                _fetchBtcUtxos(addresses, cb, utxos, offset+MAX_UTOXS_RET);\n            }, constants.RATE_LIMIT);\n        }\n        // Otherwise we are done with these addresses. Clip them and recurse.\n        addresses = addresses.slice(ADDRS_PER_CALL);\n        setTimeout(() => {\n            _fetchBtcUtxos(addresses, cb, utxos, 0);\n        }, constants.RATE_LIMIT);\n    })\n}\n\n// For testnet we cannot use blockchain.com - we have to request stuff from each\n// address individually.\nfunction _fetchBtcUtxosTestnet(addresses, cb, utxos=[]) {\n    const address = addresses.pop()\n    //@ts-expect-error\n    const url = `${constants.BTC_DEV_DATA_API}/address/${address}/utxo`;\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        data.forEach((u) => {\n            // Add confirmed UTXOs\n            if (u.status.confirmed) {\n                utxos.push({\n                    id: u.txid,\n                    vout: u.vout,\n                    value: u.value,\n                    address,\n                })\n            }\n        })\n        if (addresses.length === 0) {\n            return cb(null, utxos);\n        }\n        setTimeout(() => {\n            _fetchBtcUtxosTestnet(addresses, cb, utxos)\n        }, constants.RATE_LIMIT)\n    })\n}\n\nexport function fetchBtcUtxos(addresses, cb) {\n    if (!addresses)\n        return cb('Cannot fetch UTXOs - bad input');\n    else if (addresses.length < 1)\n        return cb(null, []);\n    const addrsCopy = JSON.parse(JSON.stringify(addresses));\n    //@ts-expect-error\n    const f = constants.BTC_DEV_DATA_API ? _fetchBtcUtxosTestnet : _fetchBtcUtxos;\n    f(addrsCopy, cb);\n}\n//====== END UTXOS ==================\n\n//====== TXS ==================\n// For mainnet (production env) we can bulk request data from the blockchain.com API\nfunction _fetchBtcTxs(addresses, txs, cb, offset=0, isFirstCall=true) {\n    if (addresses.length === 0) {\n        // No more addresses left to check. We are done.\n        return cb(null, txs);\n    }\n\n    let url = `${constants.BTC_PROD_DATA_API}/multiaddr?active=`;\n    let fetchFn = fetchJSON\n    const isSingleAddr = isFirstCall && addresses.length === 1;\n    if (isSingleAddr) {\n        // Edge case when getting transactions from the blockchain.com API with\n        // only one address -- it appears when you call multiaddr with only one\n        // address you get only the output(s) associated with that one address,\n        // but if you call with multiple addresses that is no longer a problem.\n        // See: https://www.blockchain.com/btc/tx/ffc83686c911bcf7aa31a3d3ca014bae3b1044b2ec280c877758aa6b384cde0b\n        // 1. https://blockchain.info/rawaddr/3BrvBeRy8qMijfZHzo8VJ77gdL1W9EvgHj\n        // 2. https://blockchain.info/multiaddr?active=3C8BhX4CGeyH3nXrYqRL89jvpakTPW1z8k|3BrvBeRy8qMijfZHzo8VJ77gdL1W9EvgHj\n        url = `${constants.BTC_PROD_DATA_API}/rawaddr/`\n    }\n    const ADDRS_PER_CALL = 20;\n    const MAX_TXS_RET = 50;\n    const addrsToCheck = addresses.slice(0, ADDRS_PER_CALL);\n    for (let i = 0; i < addrsToCheck.length; i++) {\n        if (i === 0) {\n            url = `${url}${addrsToCheck[i]}`\n        } else {\n            url = `${url}|${addrsToCheck[i]}`\n        }\n    }\n    if (isSingleAddr) {\n        url = `${url}?limit=${MAX_TXS_RET}`;\n        fetchFn = throttledFetchJSON\n    } else {\n        url = `${url}&n=${MAX_TXS_RET}`;\n    }\n    if (offset > 0) {\n        // If this is a follow up, fetch txs after an offset\n        url = `${url}&offset=${offset}`\n    }\n    fetchFn(url, null, (err, data) => {\n        if (err)\n            return cb(err);\n        // Add the new txs\n        let txsAdded = 0;\n        data.txs.forEach((t) => {\n            const ftx = {\n                timestamp: t.time * 1000,\n                confirmed: !!t.block_index,\n                id: t.hash,\n                fee: t.fee,\n                inputs: [],\n                outputs: [],\n            };\n            t.inputs.forEach((input) => {\n                ftx.inputs.push({\n                    addr: input.prev_out.addr,\n                    value: input.prev_out.value,\n                })\n            })\n            t.out.forEach((output) => {\n                ftx.outputs.push({\n                    addr: output.addr,\n                    value: output.value,\n                })\n            })\n            if (!ftx.confirmed) {\n                ftx.timestamp = -1;\n            }\n\n            // Only add the transaction if its hash is not already in the array.\n            // NOTE: There may be an edge case. I noticed in one case we got\n            // a result saying `vout_sz=2` but which only had one output in its array...\n            let shouldInclude = txs.every(_tx => _tx.id !== ftx.id);\n            if (shouldInclude) {\n                txs.push(ftx);\n                txsAdded += 1;\n            }\n        })\n        // Determine if we need to recurse on this set of addresses\n        if (txsAdded >= MAX_TXS_RET) {\n            return setTimeout(() => {\n                _fetchBtcTxs(addresses, txs, cb, offset+MAX_TXS_RET, false);\n            }, constants.RATE_LIMIT);\n        }\n        // Otherwise we are done with these addresses. Clip them and recurse.\n        addresses = addresses.slice(ADDRS_PER_CALL);\n        setTimeout(() => {\n            _fetchBtcTxs(addresses, txs, cb, 0, false);\n        }, constants.RATE_LIMIT);\n    })\n}\n\n// For testnet we cannot use blockchain.com - we have to request stuff from each\n// address individually.\nfunction _fetchBtcTxsTestnet(addresses, txs, cb, lastSeenId=null) {\n    const address = addresses.pop()\n    //@ts-expect-error\n    let url = `${constants.BTC_DEV_DATA_API}/address/${address}/txs`;\n    if (lastSeenId) {\n        url = `${url}/chain/${lastSeenId}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        const formattedTxs: any[] = [];\n        let confirmedCount = 0;\n        data.forEach((t) => {\n            const ftx = {\n                timestamp: t.status.block_time * 1000,\n                confirmed: t.status.confirmed,\n                id: t.txid,\n                fee: t.fee,\n                inputs: [],\n                outputs: [],                \n            }\n            t.vin.forEach((input) => {\n                ftx.inputs.push({\n                    addr: input.prevout.scriptpubkey_address,\n                    value: input.prevout.value\n                })\n            })\n            t.vout.forEach((output) => {\n                ftx.outputs.push({\n                    addr: output.scriptpubkey_address,\n                    value: output.value\n                })\n            })\n            if (!ftx.confirmed) {\n                ftx.timestamp = -1;\n            }\n            formattedTxs.push(ftx)\n            if (ftx.confirmed) {\n                confirmedCount += 1;\n            }\n\n        })\n        txs = txs.concat(formattedTxs)\n        if (confirmedCount >= 25) {\n            // Blockstream only returns up to 25 confirmed transactions per request\n            // https://github.com/Blockstream/esplora/blob/master/API.md#get-addressaddresstxs\n            // We need to re-request with the last tx\n            addresses.push(address)\n            return _fetchBtcTxsTestnet(addresses, txs, cb, txs[confirmedCount-1].id)\n        }\n        if (addresses.length === 0) {\n            return cb(null, txs);\n        }\n        setTimeout(() => {\n            _fetchBtcTxsTestnet(addresses, txs, cb)\n        }, constants.RATE_LIMIT)\n    })\n}\n\nexport function fetchBtcTxs(addresses, txs, cb) {\n    if (!addresses)\n        return cb('Cannot fetch transactions - bad input');\n    else if (addresses.length < 1)\n        return cb(null, []);\n    const addrsCopy = JSON.parse(JSON.stringify(addresses));\n    //@ts-expect-error\n    const f = constants.BTC_DEV_DATA_API ? _fetchBtcTxsTestnet : _fetchBtcTxs;\n    f(addrsCopy, txs, cb);\n}\n//====== END TXS ==================\n\nexport function fetchBtcPrice(cb) {\n    const url = 'https://api.blockchain.com/v3/exchange/tickers/BTC-USD'\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        else if (!data || !data.last_trade_price)\n            return cb('Invalid price data returned');\n        return cb(null, data.last_trade_price)\n    })\n}\n\nexport function broadcastBtcTx(rawTx, cb) {\n    const opts = {\n        method: 'POST',\n        body: rawTx\n    };\n    fetch(constants.BTC_BROADCAST_ENDPOINT, opts)\n    .then((response) => response.text())\n    .then((resp) => cb(null, resp))\n    .catch((err) => cb(err))\n}\n//--------------------------------------------\n// END CHAIN DATA SYNCING HELPERS\n//--------------------------------------------\n\n//--------------------------------------------\n// OTHER HELPERS\n//--------------------------------------------\nexport function harden(x) {\n  return x + HARDENED_OFFSET;\n}\n\n// Determine how many inputs (utxos) need to be included in a transaction\n// given the desired value and fee rate\n// Returns the number of inputs to include or -1 if there isn't enough\n// value in the inputs provided to cover value + fee\nfunction _calcBtcTxNumInputs(utxos, value, feeRate, inputIdx=0, currentValue=0) {\n    if (inputIdx >= utxos.length) {\n        return -1; // indicates error\n    }\n    currentValue += utxos[inputIdx].value;\n    const numInputs = inputIdx + 1;\n    const numBytes = getBtcNumTxBytes(numInputs);\n    const fee = Math.floor(feeRate * numBytes);\n    if (currentValue >= (value + fee)) {\n        return numInputs;\n    }\n    inputIdx = numInputs;\n    return _calcBtcTxNumInputs(utxos, value, feeRate, inputIdx, currentValue);\n}\n\n// Convert a script from blockchain.com's API into an address\n// For some reason, they only return the script in the UTXO object.\n// We need to convert the script to a an address.\n// Since we know the purpose, we know the format of the address,\n// so we can slice out the pubkeyhash from the script and convert.\nfunction _blockchainDotComScriptToAddr(_scriptStr) {\n    const purpose = getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n        const bech32Prefix = constants.BTC_SEGWIT_NATIVE_V0_PREFIX;\n        const bech32Version = 0; // Only v0 currently supported\n        // Script: |OP_0|0x20|pubkeyhash|\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(-20)\n        const words = bech32.toWords(pubkeyhash);\n        words.unshift(bech32Version);\n        return bech32.encode(bech32Prefix, words);\n    } else if (purpose === constants.BTC_PURPOSE_WRAPPED_SEGWIT) {\n        const version = constants.BTC_WRAPPED_SEGWIT_VERSION;\n        // Script: |OP_HASH160|0x20|pubkeyhash|OP_EQUAL|\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(2, 22);\n        return bs58check.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    } else if (purpose === constants.BTC_PURPOSE_LEGACY) {\n        // Script: |OP_DUP|OP_HASH160|0x20|pubkeyhash|OP_EQUALVERIFY|OP_CHECKSIG|\n        const version = constants.BTC_LEGACY_VERSION;\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(3, 23);\n        return bs58check.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    }\n}\n\nexport function getBtcPurpose() {\n    const localSettings = localStorage.getSettings();\n    return  localSettings.btcPurpose ? \n            localSettings.btcPurpose : \n            constants.BTC_PURPOSE_NONE;\n}\n\n// Calculate how many bytes will be in a transaction given purpose and input count\n// Calculations come from: https://github.com/jlopp/bitcoin-transaction-size-calculator/blob/master/index.html\n// Not a perfect calculation but pretty close\nexport function getBtcNumTxBytes(numInputs) {\n    let inputSize, outputSize, inputWitnessSize\n    const purpose = getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_LEGACY) {\n        inputSize = 148;\n        outputSize = 32;\n        inputWitnessSize = 0;\n    } else if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n        inputSize = 91;\n        outputSize = 32;\n        inputWitnessSize = 107; // size(signature) + signature + size(pubkey) + pubkey\n    } else {\n        inputSize = 67.75;\n        outputSize = 31;\n        inputWitnessSize = 107; // size(signature) + signature + size(pubkey) + pubkey\n    }\n    const vFactor = purpose === constants.BTC_PURPOSE_LEGACY ? 0 : 0.75;\n    // Hardcode 2 outputs to avoid complexity in app state\n    const txVBytes =  10 + vFactor + inputSize * numInputs + outputSize * 2;\n  return (3 * vFactor) + txVBytes + inputWitnessSize * numInputs;\n}\n\nexport function buildBtcTxReq (   recipient, \n                                    btcValue, \n                                    utxos, \n                                    addrs, \n                                    changeAddrs, \n                                    feeRate=constants.BTC_DEFAULT_FEE_RATE,\n                                    isFullSpend=false) {\n    if (!addrs || !changeAddrs || addrs.length < 1 || changeAddrs.length < 1) {\n        return { error: 'No addresses (or change addresses). Please wait to sync.' };\n    }\n    // Convert value to satoshis\n    const satValue = Math.round(Number(btcValue) * constants.SATS_TO_BTC);\n    const numInputs = isFullSpend ? utxos.length : _calcBtcTxNumInputs(utxos, satValue, feeRate);\n    if (numInputs < 0) {\n        return { error: 'Balance too low.' }\n    } else if (numInputs > utxos.length) {\n        return { error: 'Failed to build transaction.' }\n    }\n    const bytesUsed = getBtcNumTxBytes(numInputs);\n    //@ts-expect-error\n    const fee = Math.floor(bytesUsed * feeRate);\n    // Build the request inputs\n    const BASE_SIGNER_PATH = [getBtcPurpose(), constants.BTC_COIN, constants.HARDENED_OFFSET];\n    const prevOuts: any[] = [];\n    for (let i = 0; i < numInputs; i++) {\n        const utxo = utxos[i];\n        let signerPath = null;\n        if (addrs.indexOf(utxo.address) > -1) {\n            signerPath = BASE_SIGNER_PATH.concat([0, addrs.indexOf(utxo.address)]);\n        } else if (changeAddrs.indexOf(utxo.address) > -1) {\n            signerPath = BASE_SIGNER_PATH.concat([1, changeAddrs.indexOf(utxo.address)]);\n        } else {\n            return { error: 'Failed to find holder of UTXO. Syncing issue likely.' };\n        }\n        const prevOut = {\n            txHash: utxo.id,\n            value: utxo.value,\n            index: utxo.vout,\n            signerPath,\n        }\n        prevOuts.push(prevOut);\n    }\n    // Return the request (i.e. the whole object)\n    const req = {\n        prevOuts,\n        recipient,\n        value: satValue,\n        fee,\n        // Send change to the latest change address\n        changePath: BASE_SIGNER_PATH.concat([1, changeAddrs.length -1]),\n    };\n    return { currency: 'BTC', data: req }\n}\n\nexport function validateBtcAddr(addr) {\n    if (addr === '') return null;\n    try {\n        bs58check.decode(addr);\n        return true;\n    } catch (e) {\n        try {\n            bech32.decode(addr);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\nexport function toHexStr(bn) {\n    const s = bn.toString(16);\n    const base = s.length % 2 === 0 ? s : `0${s}`;\n    return `0x${base}`; \n}\n\n// Filter out any duplicate objects based on `keys`\nexport function filterUniqueObjects(objs, keys) {\n    const filtered: any[] = [];\n    // Copy the objects in reversed order so that newer instances\n    // are applied first\n    const objsCopy = JSON.parse(JSON.stringify(objs)).reverse()\n    objsCopy.forEach((obj) => {\n        let isDup = false;\n        filtered.forEach((fobj) => {\n            let matchedKeys = 0\n            keys.forEach((key) => {\n                if (fobj[key] === obj[key]) {\n                    matchedKeys += 1;\n                }\n            })\n            if (matchedKeys >= keys.length) {\n                isDup = true;\n            }\n        })\n        if (!isDup) {\n            filtered.push(obj);\n        }\n    })\n    // Return in the original order\n    return filtered.reverse();\n}\n//--------------------------------------------\n// END OTHER HELPERS\n//--------------------------------------------","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport './styles.css'\nimport { Button, Layout, Menu, PageHeader, Tag, Tooltip } from 'antd';\nimport { \n  HomeOutlined, MenuOutlined, TagsOutlined, \n  WalletOutlined, ArrowUpOutlined, ArrowDownOutlined, \n  ReloadOutlined, CreditCardOutlined, CheckOutlined, SettingOutlined \n} from '@ant-design/icons';\nimport { default as SDKSession } from '../sdk/sdkSession';\nimport { \n  Connect, Error, Landing, Loading, PageContent, Pair, Send, \n  Receive, Wallet, Settings, ValidateSig, AddressTagsPage \n} from './index'\nimport { constants, getBtcPurpose } from '../util/helpers'\nimport localStorage from '../util/localStorage';\nimport { AppContext } from '../store/AppContext';\nimport type { MenuProps } from 'antd/es/menu';\ntype MenuItem = Required<MenuProps>['items'][number];\n\nconst { Content, Footer, Sider } = Layout;\nconst LOGIN_PARAM = 'loginCache';\nconst DEFAULT_MENU_ITEM = 'menu-landing';\n\ntype MainState = {\n  name: string,\n  menuItem: string,\n  session: any,\n  collapsed: boolean,\n  error: { msg: string, cb: Function },\n  loading: boolean,\n  pendingMsg: string,\n  waiting: boolean, \n  onCancel: Function,\n  deviceID: string,\n  password: string,\n  lastUpdated: Date,\n  windowWidth: number,\n  walletIsExternal: boolean,\n  keyringName: string,\n  openedByKeyring: boolean,\n  hwCheck: string,\n}\n\n\nclass Main extends React.Component<any, MainState> {\n  static contextType = AppContext\n  context = this.context as any;\n\n  constructor(props) {\n    super(props)\n    const params = new URLSearchParams(window.location.search);\n    const keyringName = params.get('keyring')\n    this.state = {\n      name: constants.DEFAULT_APP_NAME,\n      menuItem: DEFAULT_MENU_ITEM,\n      // GridPlusSDK session object\n      session: null,\n      collapsed: false,\n      error: { msg: null, cb: null },\n      loading: false,\n      pendingMsg: null,\n      // Waiting on asynchronous data, usually from the Lattice\n      waiting: false, \n      onCancel: null,\n      // Login info stored in localstorage. Can be cleared out at any time by the `logout` func\n      deviceID: null,\n      password: null,\n      // Last time the state was updated (comes from webwork setup by SdkSession)\n      lastUpdated: new Date(),\n      // Width of the current window\n      windowWidth: window.innerWidth,\n      // Track changes in the active wallet so we can refresh addresses when we detect one\n      walletIsExternal: null,\n      // Window params\n      keyringName,\n      // Was the app opened with a keyring in the url parameters\n      openedByKeyring: !!keyringName,\n      // Validation check on Lattice hardware. Should draw a separate component\n      hwCheck: null,\n    };\n\n    // Bind local state updaters\n    this.handleMenuChange = this.handleMenuChange.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.handleKeyringOpener = this.handleKeyringOpener.bind(this);\n    this.syncActiveWalletState = this.syncActiveWalletState.bind(this);\n\n    // Bind callbacks whose calls may originate elsewhere\n    this.cancelConnect = this.cancelConnect.bind(this);\n    this.connectSession = this.connectSession.bind(this);\n    this.handlePair = this.handlePair.bind(this);\n    this.fetchBtcData = this.fetchBtcData.bind(this);\n    this.setError = this.setError.bind(this);\n    this.refreshWallets = this.refreshWallets.bind(this);\n    this.handlePageTurn = this.handlePageTurn.bind(this);\n\n    // Bind wrappers\n    this.retry = this.retry.bind(this);\n\n    // Bind listener callbacks\n    this.updateWidth = this.updateWidth.bind(this);\n  }\n\n  componentDidMount() {\n    // Listen for window resize\n    window.addEventListener('resize', this.updateWidth);\n\n    if (this.isMobile()) this.setState({collapsed: true})\n    // Metamask connects through a keyring and in these cases we need\n    // to utilize window.postMessage once we connect.\n    // We can extend this pattern to other apps in the future.\n    const params = new URLSearchParams(window.location.search);\n    const keyringName = this.state.keyringName\n    const hwCheck = params.get('hwCheck')\n    const forceLogin = params.get('forceLogin')\n    \n    // Workaround to support Firefox extensions. See `returnKeyringData` below.\n    const hasLoggedIn = params.get(LOGIN_PARAM)\n    if (hasLoggedIn) {\n      this.setState({ waiting: true, pendingMsg: 'Connecting...' })\n      return;\n    }\n    \n    if (keyringName) {\n      //@ts-expect-error\n      window.onload = this.handleKeyringOpener();\n      this.setState({ keyringName }, () => {\n        // Check if this keyring has already logged in. This login should expire after a period of time.\n        const prevKeyringLogin = localStorage.getKeyringItem(keyringName);\n        const keyringTimeoutBoundary = new Date().getTime() - constants.KEYRING_LOGOUT_MS;\n        if (!forceLogin && prevKeyringLogin && prevKeyringLogin.lastLogin > keyringTimeoutBoundary) {\n          this.connect( prevKeyringLogin.deviceID, \n                        prevKeyringLogin.password, \n                        () => this.connectSession(prevKeyringLogin));\n        } else {\n          // If the login has expired, clear it now.\n          localStorage.removeKeyringItem(keyringName)\n        }\n      })\n    } else if (hwCheck) {\n      // Lattice validation check builds this URL and includes a signature + preimage\n      this.setState({ hwCheck })\n    } else {\n      // Lookup deviceID and pw from storage\n      const { deviceID, password } = localStorage.getLogin()\n      if (deviceID && password)\n        this.connect(deviceID, password, () => this.connectSession())\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.context.session)\n      this.syncActiveWalletState();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  updateWidth() {\n    this.setState({ windowWidth:  window.innerWidth });\n    if (this.isMobile() && !this.state.collapsed) {\n      this.setState({ collapsed: true })\n    } else if (!this.isMobile() && this.state.collapsed) {\n      this.setState({ collapsed: false })\n    }\n  }\n\n  isMobile() {\n    return this.context.isMobile\n  }\n\n  connect(deviceID, password, cb) {\n    const updates = { deviceID, password };\n    const name = this.state.keyringName ? this.state.keyringName : this.state.name\n    if (!this.context.session) {\n      // Create a new session if we don't have one.\n      const settings = localStorage.getSettings()\n      this.context.setSession(\n        new SDKSession(deviceID, this.setError, name, settings)\n      );\n    }\n    this.setState(updates, cb);\n  }\n\n  cancelConnect() {\n    // Cancel the pairing process if it was started (i.e. if the connection was started with\n    // a device that could be discovered). Most of the time this will not be possible because\n    // the cancel button that triggers this function will not be displayed once the device\n    // responds back that it is ready to pair.\n    if (this.context.session && this.context.session.client) {\n      this.context.session.client.pair('', () => {});\n    }\n    // Reset all SDK-related state variables so the user can re-connect to something else.\n    this.setState({ deviceID: null, password: null, session: null })\n    this.unwait()\n  }\n\n  isConnected() {\n    if (!this.context.session) return false;\n    return this.context.session.isConnected();\n  }\n\n  //------------------------------------------\n  // KEYRING HANDLERS\n  //------------------------------------------\n\n  handleKeyringOpener() {\n    this.setState({ openedByKeyring: true })\n  }\n\n  returnKeyringData() {\n    if (!this.state.openedByKeyring)\n      return;\n    // Save the login for later\n    localStorage.setKeyringItem(this.state.keyringName, {\n      deviceID: this.state.deviceID,\n      password: this.state.password,\n      lastLogin: new Date().getTime()\n    })\n    // Send the data back to the opener\n    const data = {\n      deviceID: this.state.deviceID,\n      password: this.state.password,\n      endpoint: constants.BASE_SIGNING_URL,\n    };\n    // Check if there is a custom endpoint configured\n    const settings = localStorage.getSettings();\n    if (settings.customEndpoint && settings.customEndpoint !== '') {\n      data.endpoint = settings.customEndpoint;\n    }\n    this.handleLogout();\n    if (window.opener) {\n      // If there is a `window.opener` we can just post back\n      window.opener.postMessage(JSON.stringify(data), \"*\");\n      window.close();\n    } else {\n      // Otherwise we need a workaround to let the originator\n      // know we have logged in. We will put the login data\n      // into the URL and the requesting app will fetch that.\n      // Note that the requesting extension is now responsible for\n      // closing this web page.\n      const enc = Buffer.from(JSON.stringify(data)).toString('base64');\n      window.location.href = `${window.location.href}&${LOGIN_PARAM}=${enc}`;\n    }\n  }\n  //------------------------------------------\n  // END KEYRING HANDLERS\n  //------------------------------------------\n\n  //------------------------------------------\n  // LOCAL STATE UPDATES\n  //------------------------------------------\n  wait(msg=null, onCancel=null) {\n    this.setState({ pendingMsg: msg, waiting: true, onCancel });\n  }\n\n  unwait() {\n    this.setState({ pendingMsg: null, waiting: false, onCancel: null });\n  }\n\n  //------------------------------------------\n  // END LOCAL STATE UPDATES\n  //------------------------------------------\n\n  //------------------------------------------\n  // HEADER HANDLERS\n  //------------------------------------------\n  handlePageTurn(page) {\n    this.context.session.setPage(page);\n  }\n\n  handleMenuChange ({ key }) {\n    const stateUpdate = { menuItem: key }\n    //@ts-expect-error\n    if (this.isMobile()) stateUpdate.collapsed = true\n    this.setState(stateUpdate)\n  }\n\n  handleLogout(err=null) {\n    this.unwait();\n    this.context.session.disconnect();\n    this.setState({ session: null });\n    localStorage.removeLogin()\n    localStorage.removeAddresses()\n    if (err && err === constants.LOST_PAIRING_MSG)\n      //@ts-expect-error\n      this.setError({ err })\n  }\n\n  setError(data={msg:null, cb:null}) {\n    // Handle case where user deletes pairing on the Lattice\n    if (data.msg === constants.LOST_PAIRING_ERR)\n      return this.handleLostPairing();\n    this.setState({ error: data, loading: false })\n  }\n  \n  //------------------------------------------\n  // END HEADER HANDLERS\n  //------------------------------------------\n\n  //------------------------------------------\n  // SDK HOOKS\n  //------------------------------------------\n\n  // Call `connect` on the SDK session. If we get an error back, clear out the client,\n  // as we cannot connect.\n  connectSession(data=this.state, showLoading=true) {\n    const { deviceID, password } = data;\n    // Sanity check -- this should never get hit\n    if (!deviceID || !password) {\n      //@ts-expect-error\n      return this.setError({\n        msg: 'You must provide a deviceID and password. Please refresh and log in again. '\n      });\n    } else {\n      this.setError();\n    }\n    // Connect to the device\n    this.connect(deviceID, password, () => {\n      // Create a new session with the deviceID and password provided.\n      if (showLoading === true) {\n        this.wait(\"Looking for your Lattice\", this.cancelConnect);\n      }\n      this.context.session\n        .connect(deviceID, password)\n        .then((isPaired) => {\n          this.unwait();\n          // If the request was before we got our callback, exit here\n          if (!this.context.session || this.state.deviceID !== deviceID)\n            return;\n          // We connected!\n          // 1. Save these credentials to localStorage if this is NOT a keyring\n          if (!this.state.openedByKeyring) {\n            localStorage.setLogin({ deviceID, password })\n          }\n          // 2. Clear errors and alerts\n          this.setError();\n          // 3. Proceed based on state\n          if (isPaired && this.state.openedByKeyring) {\n            return this.returnKeyringData();\n          }\n        })\n        .catch((err) => {\n          this.setError({\n            msg: err.message,\n            cb: () => { this.connectSession(data) },\n          });\n        });\n    });\n  }\n\n  // Fetch up-to-date blockchain state data for the addresses stored in our\n  // SDKSession. Called after we load addresses for the first time\n  // Passing `isRecursion=true` means we will attempt to fetch new\n  // addresses based on known state data and if we do not yield any new ones\n  // we should exit. This is done to avoid naively requesting state data\n  // for all known addresses each time we add a new one based on a gap limit.\n  // For example, an initial sync will get 20 addrs and fetch state data. It \n  // may then request one address at a time and then state data for that one\n  // address until the gap limit is reached.\n  fetchBtcData(isRecursion=false) {\n    this.unwait();\n    this.setError();\n    this.wait('Fetching addresses');\n    this.context.session.fetchBtcAddresses((err, newAddrCounts) => {\n      if (err) {\n        console.error('Error fetching BTC addresses', err)\n        this.unwait();\n        this.setError({ \n          msg: 'Failed to fetch BTC addresses. Please try again.', \n          cb: this.fetchBtcData\n        });\n        return;\n      }\n      this.unwait()\n      const shouldExit =  isRecursion && \n                          newAddrCounts.regular === 0 && \n                          newAddrCounts.change === 0;\n      if (shouldExit) {\n        // Done syncing\n        return;\n      }\n      // If this is the first time we are calling this function,\n      // start by clearing UTXOs to avoid stale balances\n      if (!isRecursion) {\n        this.context.session.clearUtxos();\n      }\n      // Sync data now\n      this.wait('Syncing chain data')\n      const opts = isRecursion ? newAddrCounts : null;\n      this.context.session.fetchBtcStateData(opts, (err) => {\n        if (err) {\n          console.error('Error fetching BTC state data', err)\n          this.unwait();\n          this.setError({ \n            msg: 'Failed to fetch BTC state data. Please try again.', \n            cb: this.fetchBtcData \n          });\n          return;\n        }\n        // Recurse such that we exit if there are no new addresses\n        this.fetchBtcData(true);\n      })\n    })\n  }\n\n  handleLostPairing() {\n    // If we lost our pairing, we will have discovered that after trying to `connect`.\n    // The Lattice will draw a pairing screen, so to tear it down we need to send an\n    // invalid pairing code.\n    // TODO: This will still draw a pairing failure screen on the Lattice. There is\n    //       currently no way around this, but it is something we should address\n    //       in the future.\n    this.context.session.client.pair('x', () => {\n      this.handleLogout(constants.LOST_PAIRING_MSG);\n    });\n  }\n\n  refreshWallets() {\n    if (this.state.waiting === true)\n      return;\n    this.wait(\"Refreshing wallets\")\n    this.setState({ waiting: true })\n    this.context.session.refreshWallets((err) => {\n      if (err === constants.LOST_PAIRING_ERR)\n        return this.handleLostPairing();\n      \n      this.syncActiveWalletState(true);\n      this.unwait();\n      if (err)\n        return this.setError({ msg: err, cb: this.refreshWallets })\n      this.setError();\n      if (constants.BTC_PURPOSE_NONE !== getBtcPurpose())\n        this.fetchBtcData()\n    })\n  }\n\n  // If we detect a new active wallet interface, save it and refresh wallet addresses\n  syncActiveWalletState(bypassRefresh=false) {\n    const activeWallet = this.context.session.getActiveWallet();\n    if (!activeWallet)\n      return;\n    const isExternal = activeWallet.external;\n    if (this.state.walletIsExternal !== isExternal) {\n      // We only want to refresh if we know another interface was active before. If this\n      // is the first check, just set the flag without calling refresh (it will get called)\n      // automatically.\n      const shouldRefresh = this.state.walletIsExternal !== null;\n      // Set state regardless\n      this.setState({ walletIsExternal: isExternal })\n      // Refresh if needed\n      if (shouldRefresh === true && bypassRefresh !== true)\n        this.refreshWallets();\n    }\n  }\n\n  //------------------------------------------\n  // END SDK HOOKS\n  //------------------------------------------\n\n  //------------------------------------------\n  // SDK CALLBACKS\n  //------------------------------------------\n\n  // Handle a `finalizePairing` response. There are three states:\n  // 1. Wrong secret: draw a new screen (try again) automatically\n  // 2. Timed out: display error screen and wait for user to try again\n  // 3. Success: load addresses\n  handlePair(data) {\n    // Hack to circumvent a weird screen artifact we are seeing in firmware\n    // NOTHING TO SEE HERE\n    if (data[0] === '_' || data[0] === '[') data = data.slice(1)\n\n    // If we didn't timeout, submit the secret and hope for success!\n    this.wait(\"Establishing connection with your Lattice\");\n    this.context.session.client\n      .pair(data)\n      .then(() => {\n        this.unwait();\n        if (this.state.openedByKeyring) {\n          this.returnKeyringData();\n        }\n      })\n      .catch((err) => {\n        // If there was an error here, the user probably entered the wrong secret\n        const pairErr =\n          \"Failed to pair. You either entered the wrong code or have already connected to this app.\";\n        this.setError({ msg: pairErr, cb: this.connectSession });\n      });\n  }\n\n  //------------------------------------------\n  // END SDK CALLBACKS\n  //------------------------------------------\n\n  //------------------------------------------\n  // RENDERERS\n  //------------------------------------------\n  renderMenu() {\n    const hideWallet = constants.BTC_PURPOSE_NONE === getBtcPurpose();\n\n    const getMenuItems = () => { \n      const items: MenuItem[] = [{\n        key: 'menu-landing',\n        label: 'Home',\n        icon:  <HomeOutlined/>, \n      },\n      {\n        key: 'menu-kv-records',\n        label: 'Address Tags',\n        icon:  <TagsOutlined/>,\n      },\n      {\n        key: 'menu-settings',\n        label: 'Settings',\n        icon:  <SettingOutlined/>,\n      },\n      ]\n      if (!hideWallet) {\n        items.push({\n          key: 'submenu-wallet',\n          label: 'BTC Wallet',\n          children: [{\n            key: 'menu-wallet',\n            label: 'History',\n            icon:  <WalletOutlined/>,\n          },\n          {\n            key: 'menu-send',\n            label: 'Send',\n            icon:  <ArrowUpOutlined/>,\n          },\n          {\n            key: 'menu-receive',\n            label: 'Receive',\n            icon:  <ArrowDownOutlined/>,\n          }]\n        })\n      }\n      return items\n    }\n\n    return (\n      <Sider\n        collapsed={this.state.collapsed}\n        collapsedWidth={0}\n      >\n        <Menu theme=\"dark\" mode=\"inline\" onSelect={this.handleMenuChange} items={getMenuItems()} />\n      </Sider>\n    );\n  }\n\n  renderSidebar() {\n    if (this.state.name !== constants.DEFAULT_APP_NAME)\n      return\n    if (this.isConnected())\n      return this.renderMenu();\n  }\n\n  renderHeaderText() {\n    return (\n      <>\n        {this.isMobile() ? (\n          <Button\n            onClick={() => this.setState({ collapsed: !this.state.collapsed })}\n            type=\"text\"\n            size=\"large\"\n            icon={<MenuOutlined />}\n            style={{ backgroundColor: \"transparent\", marginRight: \"5px\" }}\n          />\n        ) : null}\n        <a\n          className=\"lattice-a\"\n          href=\"https://gridplus.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img  alt=\"GridPlus\" \n                src={'/gridplus-logo.png'}\n                style={{height: '1em'}}/>\n        </a>\n      </>\n    );\n  }\n\n  renderHeader() {\n    if (this.state.name !== constants.DEFAULT_APP_NAME)\n      return\n    let extra: any[] = [];\n    if (!this.isConnected())\n      return;\n\n    // Display a tag if there is a SafeCard inserted\n    let walletTag = null;\n    const size = this.isMobile() ? 'small' : 'middle';\n    const activeWallet = this.context.session.getActiveWallet();\n\n    if (!activeWallet) {\n      walletTag = ( \n        //@ts-expect-error - danger type is missing in antd\n        <Button type=\"danger\" ghost onClick={this.refreshWallets} size={size}>No Wallet <ReloadOutlined/></Button>\n      )\n    } else {\n      walletTag = activeWallet.external === true ?  (\n        <Button type=\"primary\" ghost onClick={this.refreshWallets} size={size}><CreditCardOutlined/> SafeCard <ReloadOutlined/></Button>\n      ) : (\n        <Button type=\"default\" ghost onClick={this.refreshWallets} size={size}><CheckOutlined/> Lattice <ReloadOutlined/></Button>\n      )\n    }\n    if (walletTag) extra.push((\n      <Tooltip title=\"Refresh\" key=\"WalletTagTooltip\">{walletTag}</Tooltip>));\n\n    extra.push(\n      ( <Button key=\"logout-button\" type=\"primary\" onClick={this.handleLogout} size={size}>\n        Logout\n      </Button>)\n    );\n    return (\n      <PageHeader\n        title={this.renderHeaderText()}\n        ghost={true}\n        extra={!this.state.waiting ? extra : null}\n      />\n    )\n  }\n\n  renderErrorHeader() {\n    if (this.state.error.msg) {\n      const err = (\n        <Error  msg={this.state.error.msg} \n                retryCb={this.state.error.cb}\n        />\n      )\n      return (\n        <PageContent content={err} />\n      )\n    } else {\n      return;\n    }\n  }\n\n  retry(cb) {\n    this.setError();\n    return cb();\n  }\n\n  renderMenuItem() {\n    switch (this.state.menuItem) {\n      case \"menu-wallet\":\n        return (\n          <Wallet\n            session={this.context.session}\n            refreshData={this.fetchBtcData}\n            lastUpdated={this.state.lastUpdated}\n            pageTurnCb={this.handlePageTurn}\n          />\n        );\n      case \"menu-receive\":\n        return <Receive session={this.context.session} />;\n      case \"menu-send\":\n        return <Send session={this.context.session} />;\n      // case 'menu-permissions':\n      //   return (\n      //     <Permissions\n      //       session={this.state.session}\n      //       isMobile={() => this.isMobile()}\n      //     />\n      //   )\n      case \"menu-settings\":\n        return <Settings />;\n      case \"menu-kv-records\":\n        return <AddressTagsPage />;\n      case DEFAULT_MENU_ITEM:\n        return <Landing />;\n      default:\n        return;\n    }\n  }\n\n  renderContent() {\n    const hasActiveWallet = this.context.session ? this.context.session.getActiveWallet() !== null : false;\n    if (this.state.waiting) {\n      return (\n        <Loading  msg={this.state.pendingMsg}\n                  onCancel={this.state.onCancel}/> \n      );\n    } else if (!this.isConnected()) {\n      // Connect to the Lattice via the SDK\n      return (\n        <Connect  submitCb={this.connectSession}\n                  cancelConnect={this.cancelConnect}\n                  name={this.state.name}\n                  keyringName={this.state.keyringName}\n                  setKeyringName={(keyringName) => this.setState({ keyringName })}\n                  errMsg={this.state.error.msg}/>\n      );\n    } else if (!this.context.session.isPaired()) {\n      // Automatically try to pair if we have a session but no pairing  \n      return (\n        <Pair submit={this.handlePair}\n              hide={!!this.state.error.msg} />\n      );\n    } else if (this.state.openedByKeyring) {\n      // The window should close automatically, but just in case something goes wrong...\n      return (\n        <Loading  msg={\"Successfully connected to your Lattice! You may close this window.\"}\n                  spin={false}/>\n      )\n    } else if (!hasActiveWallet) {\n      const retry = this.context.session ? this.refreshWallets : null;\n      return (\n        <Error msg={\"No active wallet present for device!\"}\n               retryCb={retry} \n        />\n      )\n    } else {\n      return this.renderMenuItem();\n    }\n  }\n\n  renderFooter() {\n    return (\n      <Footer style={{ textAlign: 'center' }}>\n        © {new Date().getFullYear()} GridPlus, Inc.\n        {constants.ENV === 'dev' ? <Tag color=\"blue\" style={{margin: \"0 0 0 10px\"}}>DEV</Tag> : null}\n      </Footer>\n    )\n  }\n\n  renderPage() {\n    if (this.state.hwCheck !== null) {\n      return <ValidateSig data={this.state.hwCheck} />\n    } else {\n      return this.renderContent();\n    }\n  }\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        {this.renderHeader()}\n        <Layout id=\"main-content-outer\">\n          {this.renderSidebar()}\n          <Layout id=\"main-content-inner\">\n            <Content style={{ margin: '0 0 0 0' }}>\n              {this.renderErrorHeader()}\n              <div style={{ margin: '30px 0 0 0'}}>\n                {this.renderPage()}        \n              </div>\n            </Content>\n            {this.renderFooter()}\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default Main","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Col, Result, Row } from 'antd'\nimport { decode } from 'bs58'\nimport { constants } from '../util/helpers';\nimport { AppContext } from '../store/AppContext';\nimport { ResultStatusType } from 'antd/lib/result';\n\nconst ReactCrypto = require('gridplus-react-crypto').default;\nconst EC = require('elliptic').ec;\n\nconst PREIMAGE_LEN = 32;\nconst SIG_TEMPLATE_LEN =  74; // Struct containing DER sig\nconst CERT_TEMPLATE_LEN = 147;  // Struct containing pubkey, permissions, and signature on it\n\nclass ValidateSig extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n  isLoading: boolean;\n  poapToClaim: string;\n  isValid: string;\n  message: string;\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: false,\n      poapToClaim: '',\n      isValid: '',\n      message: '',\n    }\n  } \n\n  componentDidMount(): void {\n    this.setState({ isValid: this.validateSig() })\n    this.setState({message: this.getMessageForPoap()})\n  }\n\n  /** Returns the message string reformatted for comparison*/\n  getMessageForPoap() {\n    return this.getPreimage()\n      // forces case insensitivity\n      .toLocaleLowerCase()\n      // Replaces non-alphanumeric characters with empty string\n      .replace(/[^|x00-\\x7F]/g, \"\");\n  }\n\n  shouldShowClaimCard() {\n    return (\n      this.state.isValid &&\n      (this.state.message === \"poap\" || \n      // Easter Egg\n      this.state.message === \"poop\")\n    );\n  }\n\n  // Validate a signature for a message from a known signer on a known curve\n  // * msg - Expected ASCII string\n  // * signer - Expected buffer containing 65-byte public key\n  // * sig - Expected DER signature (string is best)\n  // * curve - Consumable curve for elliptic\n  _validate(msg, signer, sig, curve='secp256k1') {\n    const crypto = new ReactCrypto();\n    const ec = new EC(curve);\n    const msgHash = crypto.createHash('sha256').update(msg).digest();\n    const key = ec.keyFromPublic(signer, 'hex')\n    return key.verify(msgHash, sig);\n  }\n\n  getPreimage() {\n    return decode(this.props.data).slice(0, PREIMAGE_LEN).toString()\n  }\n\n  getCert() {\n    const start = PREIMAGE_LEN + SIG_TEMPLATE_LEN;\n    const _certData = decode(this.props.data).slice(start, start + CERT_TEMPLATE_LEN);\n    const METADATA_LEN = 8;\n    const PUBKEY_LEN = 65;\n    const preimage = _certData.slice(2, METADATA_LEN + PUBKEY_LEN);\n    // When we issue the cert, we are signing metadata + the public key. However, this\n    // cert gets packed into a template along with this metadata and the length of the data in\n    // that template is variable, depending on the size of the DER sig (which we call a \"cert\").\n    // We sign metadata with 0 length at the outset because we won't know the eventual length.\n    // Therefore this byte needs to be reuturned to its initial 0 value in order to validate the \"cert\".\n    // preimage[1] = 0;\n    const pubkey = Buffer.from(_certData.slice((METADATA_LEN), (METADATA_LEN + PUBKEY_LEN))).toString('hex');\n    const _sig = Buffer.from(_certData.slice((METADATA_LEN + PUBKEY_LEN), (METADATA_LEN + PUBKEY_LEN + SIG_TEMPLATE_LEN)));\n    const sig = _sig.slice(0, (2 + _sig[1]));\n    return { pubkey, preimage, sig }\n  }\n\n  validateCert() {\n    const cert = this.getCert();\n    return this._validate(cert.preimage, constants.LATTICE_CERT_SIGNER, cert.sig)\n  }\n\n  validateSig() {\n    try {\n      if (!this.validateCert())\n        return false;\n      const preimage = this.getPreimage();\n      const cert = this.getCert();\n      const _sig = Buffer.from(decode(this.props.data).slice(PREIMAGE_LEN, PREIMAGE_LEN + SIG_TEMPLATE_LEN));\n      const sig = _sig.slice(0, (2 + _sig[1]))\n      return this._validate(preimage, cert.pubkey, sig);\n    } catch (err) {\n      console.error(`Encountered error validating signature: ${err.message}`)\n      return false;\n    }\n  }\n\n  claimPoap () {\n    const url = constants.POAP_CLAIM_REMOTE_URL;\n    this.setState({ isLoading: true })\n    const data = this.props.data\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({ data })\n    })\n      .then((res => res.json()))\n      .then(poapToClaim => {\n        this.setState({ poapToClaim })\n      })\n      .catch(console.error)\n      .finally(() => {\n        this.setState({ isLoading: false })\n      })\n  }\n\n  renderResult() {\n    let result = {\n      status: \"warning\" as ResultStatusType,\n      title: \"Could not Verify Authenticity\",\n      subTitle: \"We could not verify the authenticity of this signature or signer.\"\n    };\n    if (this.state.isValid) {\n      result.status = \"success\";\n      result.title = \"Verified\";\n      result.subTitle = \"The signer is authentic!\"\n    }\n    return (\n      <Result\n        status={result.status}\n        title={result.title}\n        subTitle={result.subTitle}\n      />\n    )\n  }\n\n\n  render() {\n    const spanLength = this.context.isMobile ? 18 : 10;\n    const spanOffset = this.context.isMobile ? 3 : 7; \n    return (\n      <Row>\n        <Col span={spanLength} offset={spanOffset}>\n          <center>\n            <Card title=\"Validate Hardware\" bordered={true}>\n              {this.renderResult()}\n              <p>\n                <b>Message:</b> {this.getPreimage()}\n              </p>\n            </Card>\n            {this.shouldShowClaimCard() && (\n              <Card\n                title=\"Claim POAP\"\n                bordered={true}\n                style={{ marginTop: \"20px\" }}\n              >\n                <p>GridPlus is offering POAPs to all valid Lattice1 owners.</p>\n                <Button\n                  disabled={this.state.isLoading}\n                  loading={this.state.isLoading}\n                  onClick={() => {\n                    this.claimPoap();\n                  }}\n                >\n                  Claim\n                </Button>\n                <div style={{ paddingTop: \"20px\" }}>\n                  <a href={this.state.poapToClaim}>{this.state.poapToClaim}</a>\n                </div>\n              </Card>\n            )}\n          </center>\n        </Col>\n      </Row>\n    )\n  }\n\n\n}\n\nexport default ValidateSig","import localStorage from './localStorage';\n\nclass StorageSession {\n  data: any;\n  store: any;\n  \n  constructor(device_id, pass) {\n    this.data = null;\n    this.store = localStorage.getRootStore();\n  }\n\n  isObject(o) {\n    try {\n      return o && typeof o === 'object' && !Array.isArray(o);\n    } catch(e) {\n      return false;\n    }\n  }\n\n  updateBranch(newData, oldData, key) {\n    // If we have reached the end of oldData\n    if (!this.isObject(oldData))\n      return;\n\n    // If `newData[key]` is a nested object, start that object\n    // clone in `oldData`\n    if (this.isObject(newData[key]) && !oldData[key])\n      oldData[key] = {};\n\n    // Loop through all keys in new data at this level. We will\n    // be adding each one as a branch\n    if (this.isObject(newData[key])) {\n      Object.keys(newData[key]).forEach((newKey) => {\n        // If there are more keys nested in this branch, update them first\n        if (this.isObject(newData[key][newKey]))\n          this.updateBranch(newData[key], oldData[key], newKey)\n        // No more keys in this branch? Finally copy this data to `oldData`\n        else\n          oldData[key][newKey] = newData[key][newKey];\n      });\n    } else {\n      // If this is a non-ojbect, copy it directly\n      oldData[key] = newData[key];\n    }\n  }\n\n  save(deviceID, wallet_uid, data) {\n    // Get the data for this deviceID\n    if (!this.store[deviceID]) this.store[deviceID] = {};\n    if (!this.store[deviceID][wallet_uid]) this.store[deviceID][wallet_uid] = {};\n    // Update relevant keys without overwriting anything else\n    Object.keys(data).forEach((k) => {\n      this.updateBranch(data, this.store[deviceID][wallet_uid], k);\n    })\n    // Update the store itself\n    localStorage.setRootStore(this.store);\n  }\n\n  getWalletData(deviceID, wallet_uid) {\n    if (!this.store[deviceID]) this.store[deviceID] = {};\n    if (!this.store[deviceID][wallet_uid]) this.store[deviceID][wallet_uid] = {};\n    return this.store[deviceID][wallet_uid];\n  }\n}\n\n\nexport default StorageSession;","import { Client } from 'gridplus-sdk';\nimport { SDKAddresses } from '../types/SDKAddresses';\nimport {\n  broadcastBtcTx, constants, fetchBtcPrice,\n  fetchBtcTxs, fetchBtcUtxos, filterUniqueObjects, getBtcPurpose, harden\n} from '../util/helpers';\nimport { default as StorageSession } from '../util/storageSession';\nconst Buffer = require('buffer/').Buffer;\nconst ReactCrypto = require('gridplus-react-crypto').default;\n\nclass SDKSession {\n  client: Client;\n  crypto: any;\n  name: any;\n  storageSession: any;\n  deviceID: any;\n  stateUpdateHandler: any;\n  page: number;\n  baseUrl: any;\n  addresses: SDKAddresses;\n  btcTxs: any[];\n  btcUtxos: any[];\n  lastFetchedBtcData: number;\n  btcPrice: number;\n\n  constructor(deviceID, stateUpdateHandler, name=null, opts: any = {}) {\n    this.client = null;\n    this.crypto = null;\n    this.name = name || constants.DEFAULT_APP_NAME; // app name\n    // Make use of localstorage to persist wallet data\n    this.storageSession = null;\n    // Save the device ID for the session\n    this.deviceID = deviceID;\n    // Handler to call when we get state updates\n    this.stateUpdateHandler = stateUpdateHandler;\n\n    // Current page of results (transactions) for the wallet\n    this.page = 1; // (1-indexed)\n\n    // Configurable settings\n    this.baseUrl = opts.customEndpoint ? opts.customEndpoint : constants.BASE_SIGNING_URL;\n\n    // BTC wallet data\n    this.addresses = {};          // Contains BTC and BTC_CHANGE addresses\n    this.btcTxs = [];             // Contains all txs for all addresses\n    this.btcUtxos = [];           // Contains all utxos for all addresses\n    this.lastFetchedBtcData = 0;  // Timestamp containing the last time we updated data\n    this.btcPrice = 0;            // Price in dollars of full unit BTC\n    \n    // Go time\n    this.getBtcWalletData();\n  }\n\n  disconnect() {\n    this.client = null;\n    this.saveBtcWalletData();\n    this.storageSession = null;\n    this.deviceID = null;\n  }\n\n  isConnected() {\n    return this.client !== null;\n  }\n\n  isPaired() {\n    return this.client.isPaired || false;\n  }\n\n  resetStateData() {\n    this.addresses = {};\n    this.btcTxs = [];\n    this.btcUtxos = [];\n  }\n  \n  getBtcDisplayAddress() {\n    // If we have set the next address to use, display that.\n    // Otherwise, fallback on the first address.\n    const lastUsed = this._getLastUsedBtcAddrIdx()\n    if (lastUsed > -1 && this.addresses.BTC[lastUsed + 1])\n      return this.addresses.BTC[lastUsed + 1];\n    else if (this.addresses.BTC && this.addresses.BTC.length > 0)\n      return this.addresses.BTC[0];\n    else\n      return null;\n  }\n\n  getActiveWallet() {\n    if (!this.client) return null;\n    return this.client.getActiveWallet();\n  }\n\n  setPage(newPage=1) {\n    this.page = newPage;\n  }\n\n  getPage() {\n    return this.page;\n  }\n\n  // Prepare addresses for caching in localStorage\n  dryAddresses() {\n    const driedAddrs: SDKAddresses = {};\n    const hasBTCAddrs = this.addresses.BTC && this.addresses.BTC.length > 0;\n    const hasBTCChangeAddrs = this.addresses.BTC_CHANGE && this.addresses.BTC_CHANGE.length > 0;\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return driedAddrs;\n    }\n    if (hasBTCAddrs) {\n      driedAddrs.BTC = {};\n      driedAddrs.BTC[BTC_PURPOSE] = this.addresses.BTC || [];\n    }\n    if (hasBTCChangeAddrs) {\n      driedAddrs.BTC_CHANGE = {};\n      driedAddrs.BTC_CHANGE[BTC_PURPOSE] = this.addresses.BTC_CHANGE || [];\n    }\n    return driedAddrs;\n  }\n\n  // Pull addresses out of cached localStorage data\n  rehydrateAddresses(allAddrs: SDKAddresses = {}) {\n    const rehydratedAddrs: SDKAddresses = {};\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return rehydratedAddrs;\n    }\n    if (allAddrs.BTC) {\n      rehydratedAddrs.BTC = allAddrs.BTC[BTC_PURPOSE];\n    }\n    if (allAddrs.BTC_CHANGE) {\n      rehydratedAddrs.BTC_CHANGE = allAddrs.BTC_CHANGE[BTC_PURPOSE];\n    }\n    this.addresses = rehydratedAddrs;\n  }\n\n  saveBtcWalletData() {\n    // This function should never be called without a deviceID \n    // or StorageSession\n    if (!this.deviceID || !this.storageSession) return;\n\n    // Package data and save it\n    // NOTE: We are only storing addresses at this point, as\n    // the blockchain state needs to be up-to-date and is therefore\n    // not very useful to store.\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      console.error('Cannot save BTC wallet data when wallet is hidden');\n      return;\n    }\n    const walletData = {\n      [constants.BTC_WALLET_STORAGE_KEY]: {\n        [BTC_PURPOSE]: {\n          addresses: this.dryAddresses(),\n          btcTxs: this.btcTxs,\n          btcUtxos: this.btcUtxos,\n          lastFetchedBtcData: this.lastFetchedBtcData,\n        },\n        btcPrice: this.btcPrice,\n      }\n    };\n    const activeWallet = this.client ? this.client.getActiveWallet() : null;\n    if (this.client && activeWallet !== null) {\n      const wallet_uid = activeWallet.uid.toString('hex');\n      this.storageSession.save(this.deviceID, wallet_uid, walletData);\n    }\n  }\n\n  getBtcWalletData() {\n    // Create a storage session only if we have a deviceID and don't\n    // have a current storage session\n    if (this.deviceID && !this.storageSession)\n      //@ts-expect-error\n      this.storageSession = new StorageSession(this.deviceID);\n    if (this.client) {\n      // Make sure the btc wallet is enabled\n      const BTC_PURPOSE = getBtcPurpose();\n      if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n        console.error('Cannot get wallet data when wallet is hidden.');\n        return;\n      }\n      // If we have a client and if it has a non-zero active wallet UID,\n      // lookup the addresses corresponding to that wallet UID in storage.\n      const activeWallet = this.getActiveWallet();\n      if (activeWallet === null) {\n        // No active wallet -- reset addresses\n        this.addresses = {};\n      } else {\n        const uid = activeWallet.uid.toString('hex')\n        // Rehydrate the data\n        const data = this.storageSession.getWalletData(this.deviceID, uid);\n        if (!data || !data[constants.BTC_WALLET_STORAGE_KEY])\n          return;\n        const walletData = data[constants.BTC_WALLET_STORAGE_KEY];\n        // Price is saved outside of the purpose sub-object\n        if (walletData.btcPrice) {\n          this.btcPrice = walletData.btcPrice;\n        }\n        // Unpack wallet data associated with the current btc purpose\n        const purposeSpecificData = walletData[BTC_PURPOSE];\n        if (!purposeSpecificData)\n          return;\n        if (purposeSpecificData.addresses) {\n          this.rehydrateAddresses(purposeSpecificData.addresses);\n        }\n        if (purposeSpecificData.btcTxs) {\n          this.btcTxs = purposeSpecificData.btcTxs;\n        }\n        if (purposeSpecificData.btcUtxos) {\n          this.btcUtxos = purposeSpecificData.btcUtxos;\n        }\n        if (purposeSpecificData.lastFetchedBtcData) {\n          this.lastFetchedBtcData = purposeSpecificData.lastFetchedBtcData;\n        }\n      }\n    }\n  }\n\n  _tryConnect(deviceID, pw, cb, _triedLocal=false) {\n    let baseUrl = this.baseUrl;\n    let tmpTimeout = constants.SHORT_TIMEOUT; // Artificially short timeout just for connecting\n    if (_triedLocal === false) {\n      baseUrl = `http://lattice-${deviceID}.local:8080`\n      tmpTimeout = 5000 // Shorten the timeout even more since we should discover quickly if device is on LAN\n    }\n    // Derive a keypair from the deviceID and password\n    // This key doesn't hold any coins and only allows this app to make\n    // requests to a particular device. Nevertheless, the user should\n    // enter a reasonably strong password to prevent unwanted requests\n    // from nefarious actors.\n    const key = this._genPrivKey(deviceID, pw, this.name);\n    // If no client exists in this session, create a new one and\n    // attach it.\n    let client;\n    try {\n      client = new Client({ \n        name: this.name,\n        privKey: key,\n        baseUrl,\n        timeout: tmpTimeout, // Artificially short timeout for simply locating the Lattice\n        skipRetryOnWrongWallet: false,\n      })\n    } catch (err) {\n      return cb ? cb(err.toString()) : err.toString();\n    }\n\n    return client\n      .connect(deviceID)\n      .then((isPaired) => {\n        // Update the timeout to a longer one for future async requests\n        client.timeout = constants.ASYNC_SDK_TIMEOUT;\n        this.client = client;\n        // Setup a new storage session if these are new credentials.\n        // (This call will be bypassed if the credentials are already saved\n        // in localStorage because getBtcWalletData is also called in the constructor)\n        this.deviceID = deviceID;\n        this.getBtcWalletData();\n        return cb ? cb(null, isPaired) : isPaired;\n      })\n      .catch((err) => {\n        if (err) {\n          if (_triedLocal === false) {\n            console.warn(\n              \"Failed to connect to Lattice over LAN. Falling back to cloud routing.\"\n            );\n            return this._tryConnect(deviceID, pw, cb, true);\n          } else {\n            console.error(\"Failed to connect via cloud routing.\");\n            return cb ? cb(err) : err;\n          }\n        } else if (_triedLocal === false) {\n          console.log(\"Successfully connected to Lattice over LAN.\");\n        }\n      });\n  }\n\n  connect(deviceID, pw, cb) {\n    return this._tryConnect(deviceID, pw, cb, true); // temporarily disable local connect\n  }\n\n  async refreshWallets(cb) {\n    if (this.client) {\n      const prevWallet = JSON.stringify(this.client.getActiveWallet());\n      const isPaired = await this.client.connect(this.deviceID).catch(cb)\n      // If we lost connection, the user most likely removed the pairing and will need to repair\n      if (false === this.client.isPaired)\n        return cb(constants.LOST_PAIRING_ERR);\n      // If we pulled a new active wallet, reset balances + transactions\n      // so we can reload a new set.\n      const newWallet = JSON.stringify(this.client.getActiveWallet());\n      if (newWallet !== prevWallet)\n        this.resetStateData();\n      // Update storage. This will remap to a new localStorage key if the wallet UID\n      // changed. If we didn't get an active wallet, it will just clear out the addresses\n      this.getBtcWalletData();\n      return cb(null, isPaired);\n    } else {\n      return cb('Lost connection to Lattice. Please refresh.');\n    }\n  }\n\n  async sign (req) {\n    // Get the tx payload to broadcast\n    return this.client\n      .sign(req)\n      .then(res => {\n        if (res && res.tx) {\n          broadcastBtcTx(res.tx, (err, txid) => {\n            if (err) throw new Error(`Error broadcasting transaction: ${err.message}`);\n            return txid\n          });\n        } else {\n          throw new Error('Signing transaction invalid.');\n        }\n      })\n  }\n\n  _genPrivKey(deviceID, pw, name) {\n    const key = Buffer.concat([\n      Buffer.from(pw), \n      Buffer.from(deviceID),\n      Buffer.from(name),\n    ])\n    // Create a new instance of ReactCrypto using the key as entropy\n    this.crypto = new ReactCrypto(key);\n    return this.crypto.createHash('sha256').update(key).digest();\n  }\n\n  //----------------------------------------------------\n  // NEW STUFF - REWRITING ADDRESS/DATA FETCHING FOR BTC WALLET\n  //----------------------------------------------------\n\n  // Get a set of either pending or confirmed transactions from the full\n  // set of known BTC txs\n  getBtcTxs(confirmed=true) {\n    const txs: any[] = [];\n    this.btcTxs.forEach((t) => {\n      if (confirmed && t.confirmed) {\n        txs.push(t)\n      } else if (!confirmed && !t.confirmed) {\n        txs.push(t)\n      }\n    })\n    return txs;\n  }\n\n  // Get the set of known UTXOs belonging to our known set of BTC addresses\n  getBtcUtxos() {\n    return this.btcUtxos;\n  }\n\n  // Get the BTC balance, which is simply a sum of UTXO values\n  // Returns the balance in satoshis\n  getBtcBalance() {\n    let balance = 0;\n    this.btcUtxos.forEach((u) => {\n      balance += u.value;\n    })\n    return balance;\n  }\n\n  // Fetch necessary addresses based on state data. We need to fetch addresses\n  // for both BTC and BTC_CHANGE such that we have fetched GAP_LIMIT past the last\n  // used address. An address is \"used\" if it has at least one transaction associated.\n  // This function will automatically fetch both BTC and BTC_CHANGE addresses up to\n  // the associated GAP_LIMITs and updates state internally.\n  // Returns a callback containing params (error, numFetched), where `numFetched` is\n  // the total number of *new* addresses we fetched. If this number is >0, it signifies\n  // we should re-fetch transaction data for our new set of addresses.\n  fetchBtcAddresses(cb, isChange=false, totalFetched={regular: 0, change: 0}) {\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return cb('Cannot request BTC addresses while wallet is hidden.');\n    }\n    const lastUsedIdx = this._getLastUsedBtcAddrIdx(isChange);\n    const currentAddrs = (isChange ? this.addresses.BTC_CHANGE : this.addresses.BTC) || [];\n    const GAP_LIMIT = isChange ?  constants.BTC_CHANGE_GAP_LIMIT : \n                                  constants.BTC_MAIN_GAP_LIMIT;\n    const targetIdx = lastUsedIdx + 1 + GAP_LIMIT;\n    const maxToFetch = targetIdx - currentAddrs.length;\n    const nToFetch = Math.min(constants.BTC_ADDR_BLOCK_LEN, maxToFetch)\n    if (nToFetch > 0) {\n      // If we have closed our gap limit we need to get more addresses\n      const changeIdx = isChange ? 1 : 0;\n      const opts = {\n        startPath: [ \n          BTC_PURPOSE, constants.BTC_COIN, harden(0), changeIdx, currentAddrs.length \n        ],\n        n: nToFetch,\n        skipCache: true,\n      }\n      this._getAddresses(opts, (err, addresses) => {\n        if (err)\n          return cb(err);\n        // Track the number of new addresses we fetched\n        if (isChange) {\n          totalFetched.change += nToFetch;\n        } else {\n          totalFetched.regular += nToFetch;\n        }\n        // Save the addresses to memory and also update them in localStorage\n        // Note that we do need to track index here\n        if (isChange) {\n          this.addresses.BTC_CHANGE = currentAddrs.concat(addresses);\n        } else {\n          this.addresses.BTC = currentAddrs.concat(addresses);\n        }\n        console.log('Fetched BTC', this.addresses.BTC)\n        console.log('Fetched BTC_CHANGE', this.addresses.BTC_CHANGE)\n        // If we need to fetch more, recurse\n        if (maxToFetch > nToFetch) {\n          this.fetchBtcAddresses(cb, isChange, totalFetched);\n        } else if (!isChange) {\n          // If we are done fetching main BTC addresses, switch to the change path\n          this.fetchBtcAddresses(cb, true, totalFetched);\n        } else {\n          this.saveBtcWalletData();\n          cb(null, totalFetched);\n        }\n      })\n    } else if (!isChange) {\n      // If we are done fetching main BTC addresses, switch to the change path\n      this.fetchBtcAddresses(cb, true, totalFetched);\n    } else {\n      // Nothing to fetch\n      this.saveBtcWalletData();\n      cb(null, totalFetched);\n    }\n  }\n\n  // We want to clear UTXOs when we re-sync because they could have been spent.\n  // Due to the nature of `fetchBtcStateData`, we need to append new UTXOs to\n  // the existing set as we sync data, so it is best to call this function once\n  // from the component that is starting the resync.\n  clearUtxos() {\n    this.btcUtxos = [];\n  }\n\n  // Fetch transactions and UTXOs for all known BTC addresses (including change)\n  // Calls to appropriate Bitcoin data provider and updates state internally.\n  // Returns a callback with params (error)\n  fetchBtcStateData(opts, cb, isChange=false, txs=[], utxos=[]) {\n    // Determine which addresses for which to fetch state.\n    // If we get non-zero `opts` values it means this is a follow up call\n    // and we only want to fetch data for new addresses we've collected\n    // rather than data for all known addresses.\n    let addrs = (isChange ? this.addresses.BTC_CHANGE : this.addresses.BTC) || [];\n    if (opts && opts.regular > 0) {\n      addrs = this.addresses.BTC.slice(-opts.regular);\n      opts.regular = 0;\n    } else if (opts && opts.change > 0) {\n      // If we have new change addrs but not new regular addrs,\n      // we can force a switch to change here so we don't re-scan\n      // the same regular addresses we have already scanned.\n      isChange = true;\n      addrs = this.addresses.BTC_CHANGE.slice(-opts.change);\n      opts.change = 0;\n    }\n    fetchBtcPrice((err, btcPrice) => {\n      if (err) {\n        // Don't fail out if we can't get the price - just display 0\n        console.error('Failed to fetch price:', err);\n        btcPrice = 0;\n      }\n      fetchBtcTxs(addrs, txs, (err, _txs) => {\n        if (err)\n          return cb(err);\n        else if (!_txs)\n          return cb('Failed to fetch transactions');\n        txs = txs.concat(_txs);\n        fetchBtcUtxos(addrs, (err, _utxos) => {\n          if (err)\n            return cb(err);\n          else if (!_utxos)\n            return cb('Failed to fetch UTXOs');\n          utxos = utxos.concat(_utxos);\n          if (!isChange) {\n            // Once we get data for our BTC addresses, switch to change\n            this.fetchBtcStateData(opts, cb, true, txs, utxos);\n          } else {\n            // All done! Filter/process data and save\n            this.btcPrice = btcPrice;\n            this.lastFetchedBtcData = Math.floor(Date.now());\n            const newTxs = this.btcTxs.concat(txs);\n            this.btcTxs = filterUniqueObjects(newTxs, ['id']);\n            this._processBtcTxs();\n            const newUtxos = this.btcUtxos.concat(utxos);\n            // UTXOs should already be filtered but it doesn't hurt to\n            // do a sanity check filter here.\n            this.btcUtxos =   filterUniqueObjects(newUtxos, ['id', 'vout'])\n                              .sort((a, b) => { return b.value - a.value });\n            this.saveBtcWalletData();\n            cb(null);\n          }\n        })\n      })\n    })\n  }\n\n  // Generic caller to SDK getAddress route with retry mechanism\n  async _getAddresses(opts, cb) {\n    const addresses = await this.client.getAddresses(opts).catch((err) => {\n      // Catch an error, but if the device is busy it probably means it is currently\n      // caching a batch of new addresses. Continue the loop through this request until\n      // it hits.\n      if (err) {\n        if (err === \"Device Busy\") {\n          return this._getAddresses(opts, cb);\n        } else {\n          // To avoid concurrency problems on an initial sync, we need to wait\n          // for the device to refresh addresses before completing the callback\n          setTimeout(() => {\n            return cb(err);\n          }, 2000);\n        }\n      }\n    });\n    return cb(null, addresses);\n  }\n\n  // Get the highest index address that has been used for either BTC or BTC_CHANGE\n  _getLastUsedBtcAddrIdx(change=false) {\n    const coin = change ? 'BTC_CHANGE' : 'BTC';\n    const addrs = this.addresses[coin] || [];\n    const txs = this.btcTxs || [];\n    let lastUsed = -1;\n    for (let i = 0; i < txs.length; i++) {\n      if (txs[i].confirmed) {\n        let maxUsed = lastUsed;\n        txs[i].inputs.forEach((input) => {\n          if (addrs.indexOf(input.addr) > maxUsed)\n            maxUsed = addrs.indexOf(input.addr);\n        })\n        txs[i].outputs.forEach((output) => {\n          if (addrs.indexOf(output.addr) > maxUsed)\n            maxUsed = addrs.indexOf(output.addr);\n        })\n        if (maxUsed > lastUsed)\n          lastUsed = maxUsed;\n      }\n    }\n    return lastUsed;\n  }\n\n  // Loop through known txs, determining value and recipient\n  // based on known addresses.\n  // Recipient should be the first address\n  // If the recipient is one of our addresses, the transaction is inbound\n  // If the transaction is inbound, value is SUM(outputs to our addresses)\n  // If the transaction is outbound, value is SUM(inputs) - SUM(outputs to our addresses)\n  _processBtcTxs() {\n    const allAddrs = this.addresses.BTC.concat(this.addresses.BTC_CHANGE);\n    const processedTxs: any[] = [];\n    const txs = JSON.parse(JSON.stringify(this.btcTxs));\n    txs.forEach((tx) => {\n      // Determine if this is an outgoing transaction or not based on inputs.\n      // We consider a transaction as \"incoming\" if *every* input was signed by\n      // an external address.\n      tx.incoming = tx.inputs.every(input => allAddrs.indexOf(input.addr) === -1);\n\n      // Fill in the recipient. If this is an outgoing transaction, it will\n      // always be the first output. Otherwise, we consider the recipient\n      // to be the first address belonging to us that we can find in outputs.\n      if (!tx.incoming) {\n        tx.recipient = tx.outputs[0].addr;\n      } else {\n        tx.outputs.forEach((output) => {\n          if (!tx.recipient && allAddrs.indexOf(output.addr) > -1) {\n            // Mark the recipient as the first of our addresses we find\n            tx.recipient = allAddrs[allAddrs.indexOf(output.addr)];\n          }\n        })\n        if (!tx.recipient) {\n          // Fallback to the first output. This should not be possible after\n          // the loop above.\n          tx.recipient = tx.outputs[0].addr;\n        }\n      }\n\n      // Calculate the value of the transaction to display in our history\n      tx.value = 0;\n      if (!tx.incoming) {\n        // Outgoing tx: sum(outputs to external addrs)\n        let inputSum = 0;\n        tx.inputs.forEach((input) => {\n          inputSum += input.value;\n        })\n        let internalOutputSum = 0;\n        let externalOutputSum = 0;\n        tx.outputs.forEach((output) => {\n          if (allAddrs.indexOf(output.addr) > -1) {\n            internalOutputSum += output.value;\n          } else {\n            externalOutputSum += output.value;\n          }\n        })\n        if (inputSum === internalOutputSum + tx.fee) {\n          // Edge case: sent to internal address, i.e. internal transaction\n          tx.value = 0;\n        } else {\n          tx.value = externalOutputSum;\n        }\n      } else {\n        // Incoming tx: sum(outputs to internal addrs)\n        tx.outputs.forEach((output) => {\n          if (allAddrs.indexOf(output.addr) > -1) {\n            tx.value += output.value;\n          }\n        })\n      }\n      processedTxs.push(tx);\n    })\n    const sortedTxs = processedTxs\n                      .sort((a, b) => { return b.timestamp - a.timestamp })\n    this.btcTxs = sortedTxs;\n  }\n}\n\nexport default SDKSession","import omit from \"lodash/omit\";\n\nconst LOGIN_ID_STORAGE_KEY = \"gridplus_web_wallet_id\";\nconst LOGIN_PASSWORD_STORAGE_KEY = \"gridplus_web_wallet_password\";\nconst ADDRESSES_STORAGE_KEY = \"gridplus_addresses\";\nconst CONTRACTS_STORAGE_KEY = \"gridplus_contracts\";\nconst CONTRACT_PACKS_STORAGE_KEY = \"gridplus_contracts_packs\";\nconst ROOT_STORE = process.env.REACT_APP_ROOT_STORE || \"gridplus\";\n\n// #region -- Generic Local Storage Functions\n\nconst getItem = (key) => {\n  const value = window.localStorage.getItem(key);\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return JSON.parse(JSON.stringify(value));\n  }\n};\nconst setItem = (key, value) =>\n  window.localStorage.setItem(key, JSON.stringify(value));\nconst removeItem = (key) => window.localStorage.removeItem(key);\n\nconst getRootStore = () => getItem(ROOT_STORE) ?? {};\nconst setRootStore = (value) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify({ ...getRootStore(), ...value })\n  );\nconst removeRootStore = () => removeItem(ROOT_STORE);\n\nconst getRootStoreItem = (key) => getItem(ROOT_STORE)?.[key] ?? {};\nconst setRootStoreItem = (key, value) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify({ ...getRootStore(), [`${key}`]: value })\n  );\nconst removeRootStoreItem = (key) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify(omit(getRootStore(), key))\n  );\n\n// #endregion\n\n// #region -- Settings Functions\n\nconst getSettings = () => getRootStoreItem(\"settings\");\nconst setSettings = (value) => setRootStoreItem(\"settings\", value);\n\n// #endregion\n\n// #region -- Keyring Functions\n\nconst getKeyring = () => getRootStoreItem(\"keyring\");\nconst setKeyring = (value) => setRootStoreItem(\"keyring\", value);\n\nconst getKeyringItem = (key) => getRootStoreItem(\"keyring\")?.[key] ?? {};\nconst setKeyringItem = (key, value) =>\n  setRootStoreItem(\"keyring\", { [`${key}`]: value });\nconst removeKeyringItem = (key) =>\n  setRootStoreItem(\"keyring\", omit(getKeyring(), key));\nconst renameKeyringItem = (oldKey, newKey) => {\n  if (oldKey !== newKey) {\n    const item = { ...getKeyringItem(oldKey) };\n    setKeyringItem(newKey, item);\n    removeKeyringItem(oldKey);\n  }\n};\n\n// #endregion\n\n// #region -- Login Functions\n\nconst getLoginId = () => getItem(LOGIN_ID_STORAGE_KEY);\nconst setLoginId = (value) => setItem(LOGIN_ID_STORAGE_KEY, value);\nconst removeLoginId = () => removeItem(LOGIN_ID_STORAGE_KEY);\n\nconst getLoginPassword = () => getItem(LOGIN_PASSWORD_STORAGE_KEY);\nconst setLoginPassword = (value) => setItem(LOGIN_PASSWORD_STORAGE_KEY, value);\nconst removeLoginPassword = () => removeItem(LOGIN_PASSWORD_STORAGE_KEY);\n\nconst getLogin = () => ({\n  deviceID: getLoginId(),\n  password: getLoginPassword(),\n});\nconst setLogin = ({ deviceID, password }) => {\n  setLoginId(deviceID);\n  setLoginPassword(password);\n};\nconst removeLogin = () => {\n  removeLoginId();\n  removeLoginPassword();\n};\n\n// #endregion\n\n// #region -- Device Indexed Functions\n\nconst getDeviceIndexedItem = (key) => {\n  const deviceId = getLoginId();\n  if (deviceId) {\n    return getRootStoreItem(deviceId)?.[key];\n  }\n};\n\nconst setDeviceIndexedItem = (key, value) => {\n  const deviceId = getLoginId();\n  if (deviceId && value) {\n    return setRootStoreItem(deviceId, {\n      ...getRootStoreItem(deviceId),\n      [`${key}`]: value,\n    });\n  }\n};\n\nconst removeDeviceIndexedItem = (key) => {\n  const deviceId = getLoginId();\n  if (deviceId) {\n    return setRootStoreItem(deviceId, omit(getRootStoreItem(deviceId), key));\n  }\n};\n\n// #endregion\n\n// #region -- Address & Contracts Functions\n\nconst getAddresses = () => getDeviceIndexedItem(ADDRESSES_STORAGE_KEY);\nconst setAddresses = (value) =>\n  setDeviceIndexedItem(ADDRESSES_STORAGE_KEY, value);\nconst removeAddresses = () => removeDeviceIndexedItem(ADDRESSES_STORAGE_KEY);\n\nconst getContracts = () => getDeviceIndexedItem(CONTRACTS_STORAGE_KEY);\nconst setContracts = (value) =>\n  setDeviceIndexedItem(CONTRACTS_STORAGE_KEY, value);\nconst removeContracts = () => removeDeviceIndexedItem(CONTRACTS_STORAGE_KEY);\n\nconst getContractPacks = () => getItem(CONTRACT_PACKS_STORAGE_KEY) ?? [];\nconst setContractPacks = (value) => setItem(CONTRACT_PACKS_STORAGE_KEY, value);\nconst removeContractPacks = () => removeItem(CONTRACT_PACKS_STORAGE_KEY);\n\n// #endregion\n\nconst exports = {\n  getItem,\n  setItem,\n  removeItem,\n  getRootStore,\n  setRootStore,\n  removeRootStore,\n  getRootStoreItem,\n  setRootStoreItem,\n  removeRootStoreItem,\n  getSettings,\n  setSettings,\n  getLoginId,\n  setLoginId,\n  removeLoginId,\n  getLoginPassword,\n  setLoginPassword,\n  removeLoginPassword,\n  getKeyring,\n  setKeyring,\n  getKeyringItem,\n  setKeyringItem,\n  removeKeyringItem,\n  renameKeyringItem,\n  getLogin,\n  setLogin,\n  removeLogin,\n  getDeviceIndexedItem,\n  setDeviceIndexedItem,\n  removeDeviceIndexedItem,\n  getAddresses,\n  setAddresses,\n  removeAddresses,\n  getContracts,\n  setContracts,\n  removeContracts,\n  getContractPacks,\n  setContractPacks,\n  removeContractPacks,\n};\n\nexport default exports\n","import React, { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { useRecords } from \"../hooks/useRecords\";\nimport SDKSession from \"../sdk/sdkSession\";\nimport localStorage from \"../util/localStorage\";\n\n/**\n * A React Hook that allows us to pass data down the component tree without having to pass\n * props.\n */\nexport const AppContext = createContext(undefined);\n\nexport const AppContextProvider = ({\n  children,\n  overrides,\n}: {\n  children: ReactNode;\n  overrides?: { [key: string]: any };\n}) => {\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 500);\n  const [session, setSession] = useState<SDKSession>(null);\n\n  const [isLoadingAddresses, setIsLoadingAddresses] = useState(false);\n  const [\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  ] = useRecords(localStorage.getAddresses() ?? [])\n\n  const defaultContext = {\n    isMobile,\n    session,\n    setSession,\n    isLoadingAddresses,\n    setIsLoadingAddresses,\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  };\n\n  /**\n   * Whenever `addresses` data changes, it is persisted to `localStorage`\n   */\n  useEffect(() => {\n    localStorage.setAddresses(addresses);\n  }, [addresses]);\n\n  /**\n   * Sets `isMobile` when the window resizes.\n   * */\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      const windowIsMobileWidth = window.innerWidth < 500;\n      if (windowIsMobileWidth && !isMobile) setIsMobile(true);\n      if (!windowIsMobileWidth && isMobile) setIsMobile(false);\n    });\n  }, [isMobile]);\n\n  return (\n    <AppContext.Provider value={{ ...defaultContext, ...overrides }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import differenceBy from \"lodash/differenceBy\";\nimport unionBy from \"lodash/unionBy\";\nimport { useState } from \"react\";\nimport { LatticeRecord } from \"../types/records\";\n\n/**\n * `useRecords` is a React hook that builds off of `useState` to add setter functions for\n * interacting with a list of objects:\n *  - `addRecords` - Combines passed in array of records and records in state by comparing ids\n *  - `removeRecords` - Removes passed in array of records from records in state by comparing ids\n * @param defaultValue - any array to set the default value\n */\nexport const useRecords = <T extends LatticeRecord>(\n  defaultValue: T[],\n  id = \"id\"\n): [T[], (toAdd: T[]) => void, (toRemove: T[]) => void, () => void] => {\n  const [records, setRecords] = useState<T[]>(defaultValue);\n\n  const addRecords = (recordsToAdd: T[]) =>\n    setRecords((recordsInState) => unionBy(recordsInState, recordsToAdd, id));\n\n  const removeRecords = (recordsToRemove: T[]) =>\n    setRecords((recordsInState) =>\n      differenceBy(recordsInState, recordsToRemove, id)\n    );\n\n  const resetRecords = () => setRecords([]);\n\n  return [records, addRecords, removeRecords, resetRecords];\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Main } from './components'\nimport { AppContextProvider } from \"./store/AppContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Main />\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\n\nimport { createRoot } from 'react-dom/client';\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Col, Row } from 'antd'\nimport { AppContext } from \"../../store/AppContext\";\nconst SPAN_WIDTH = 14; // Max 24 for 100% width\n\nclass PageContent extends React.Component<any, any> {\n  static contextType = AppContext\n  context = this.context as any;\n\n  render () {\n    if (!this.props.children && !this.props.content)\n      return; // Content must be passed in\n    // Mobile content should be displayed without any padding\n    if (this.context.isMobile)\n      return this.props.children ?this.props.children : this.props.content\n    // Desktop content has some padding\n    return(\n      <Row justify=\"center\">\n        <Col span={SPAN_WIDTH}>\n          {this.props.children || this.props.content}\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default PageContent;","import { EditOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input } from \"antd\";\nimport React, { useState } from \"react\";\n\n/**\n * Allows the user to edit text inline by rendering\n * the string as a button that converts the string \n * into a text field when clicked by the user.\n */\nexport const NameEditor = ({ name, setName }: {\n  name: string;\n  setName: (name: string) => void;\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [form] = Form.useForm();\n\n  const onCancel = () => {\n    form.resetFields();\n    setIsEditing(false);\n  };\n\n  const onFinish = (value) => {\n    setIsEditing(false);\n    setName(value.name);\n  };\n\n  return isEditing ? (\n    <Form\n      form={form}\n      name=\"formData\"\n      layout=\"inline\"\n      onFinish={onFinish}\n      style={{ justifyContent: \"center\" }}\n    >\n      <Form.Item\n        name=\"name\"\n        initialValue={name}\n        rules={[{ required: true, message: \"Name is required.\" }]}\n      >\n        <Input data-testid={`${name}-input`} />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"text\" onClick={onCancel} data-testid={`${name}-cancel`}>\n          Cancel\n        </Button>\n        <Button type=\"ghost\" htmlType=\"submit\" data-testid={`${name}-save`}>\n          Save\n        </Button>\n      </Form.Item>\n    </Form>\n  ) : (\n    <Button\n      type=\"text\"\n      size=\"large\"\n      icon={isHovered ? <EditOutlined /> : null}\n      style={{ fontSize: \"24px\" }}\n      data-testid={`${name}-edit`}\n      onClick={() => setIsEditing(true)}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {name}\n    </Button>\n  );\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Col, Input, Row, Modal } from 'antd'\nimport { DesktopOutlined, LinkOutlined } from '@ant-design/icons';\nimport { Settings } from './index'\nimport { constants } from '../util/helpers'\nimport { NameEditor } from './NameEditor';\nimport { LoginData } from '../types/authentication';\nimport { AppContext } from '../store/AppContext';\n\ntype ConnectProps = {\n  submitCb: (data: LoginData, showLoading: boolean) => void,\n  cancelConnect: () => void,\n  name: string,\n  keyringName: string,\n  setKeyringName: (name: string) => void,\n  errMsg: string\n}\n\ntype ConnectState = {\n  errMsg: string,\n  isLoading: boolean,\n  modal: boolean,\n  showSettings: boolean\n}\n\nclass Connect extends React.Component<ConnectProps, ConnectState> {\n  static contextType = AppContext;\n  context = this.context as any;\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      errMsg: null,\n      isLoading: false,\n      modal: false,\n      showSettings: false,\n    }\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderMsg = this.renderMsg.bind(this);\n    this.showModal = this.showModal.bind(this);\n  }\n\n  componentDidMount() {\n    //@ts-expect-error\n    if (this.input) {\n      //@ts-expect-error\n      this.input.focus();\n    }\n    this.setState({ isLoading: false  })\n  }\n\n  componentDidUpdate() {\n    if (this.props.name !== constants.DEFAULT_APP_NAME && document.title !== 'Lattice Connector') {\n      document.title = 'Lattice Connector'\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ isLoading: false })\n  }\n\n  handleSubmit() {\n    const deviceID = (document.getElementById(\"deviceIdInput\") as HTMLInputElement).value;\n    const password = (document.getElementById(\"passwordInput\") as HTMLInputElement).value;\n    if (password.length < 8) {\n      this.setState({ isLoading: true, errMsg: \"Your password must be at least 8 characters.\"})\n    } else {\n      this.setState({ isLoading: true, errMsg: null })\n      // Call the connect function. Skip the loading screen so we don't\n      // leave the landing page until we connect.\n      this.props.submitCb({deviceID, password}, false);\n    }\n  }\n\n  handleCancel() {\n    this.props.cancelConnect();\n    this.setState({ isLoading: false, errMsg: null });\n  }\n\n  renderConnectButton() {\n    if (this.state.isLoading && \n        this.state.errMsg === null &&\n        this.props.errMsg === null) {\n      return (\n        <div>\n          <Button type=\"primary\"\n                  style={{ margin: '20px 0 0 0' }}\n                  loading>\n            Connecting...\n          </Button>\n          <br/>\n          <Button type=\"link\" onClick={this.handleCancel}>\n            Cancel\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n        <Button type=\"primary\" onClick={this.handleSubmit} style={{ margin: '20px 0 0 0'}}>\n          Connect\n        </Button>\n      )\n    }\n  }\n\n  renderForm(getFieldDecorator) {\n    return (\n      <div>\n        <Row justify=\"center\">\n          <Input  placeholder=\"DeviceID\" \n                  id=\"deviceIdInput\" \n                  //@ts-expect-error\n                  ref={i => {this.input = i}}\n                  style={{ margin: '10px 0 0 0', width: \"70%\"}} />\n        </Row>\n        <Row justify=\"center\">\n          <Input.Password placeholder=\"Password (create for new logins)\" \n                          id=\"passwordInput\" \n                          onPressEnter={this.handleSubmit} \n                          style={{ margin: '20px 0 0 0', width: \"70%\"}} />\n        </Row>\n        <Row justify=\"center\">\n          {this.renderConnectButton()}\n        </Row>\n      </div>\n    )\n  }\n\n  showModal() {\n    this.setState({ modal: true });\n  }\n\n  hideModal() {\n    this.setState({ modal: false, showSettings: false });\n  }\n\n  renderSetupInfo() {\n    return (\n      <div>\n        <center>\n          <h3><b>New User Setup</b></h3>\n        </center>\n        <p>\n          You can use this page to establish a connection between <b>{this.props.name}</b>&nbsp; and your Lattice \n          hardware wallet device.&nbsp;\n          <i>For more general device setup information, please see the&nbsp;\n            <a className=\"lattice-a\" href=\"https://gridplus.io/setup\" target={\"_blank\"} rel={\"noopener noreferrer\"}>\n            Lattice setup page\n            </a>.</i>\n        </p>\n        <h3><b>Step 1:</b></h3>\n        <p>\n          Unlock your Lattice and find its <b>Device ID</b> on the main menu. This is a six-character code.\n        </p>\n        <h3><b>Step 2:</b></h3>\n        <p>\n          Once you have your Device ID, specify a <b>password</b>. This does <i>not</i> secure any value and \n          is <i>not</i> associated with your wallet seed - it is only used to send secure requests to your device. \n          If you lose your password, you can remove the permission on your device and re-connect with a new one.\n        </p>\n        <h3><b>Step 3:</b></h3>\n        <p>\n          Please ensure your Lattice is <b>online</b> and click \"Connect\". Your device is online if there is a single\n          wifi signal icon on the top-right of the screen.\n        </p>\n      </div>\n    )\n  }\n\n  renderModal() {\n    if (this.state.showSettings) {\n      return (\n        <Modal\n          title=\"Settings\"\n          footer={null}\n          visible={this.state.modal}\n          onOk={this.hideModal.bind(this)}\n          onCancel={this.hideModal.bind(this)}\n        >\n          <Settings inModal={true} />\n        </Modal>\n      )\n    }\n     return (\n      <div>\n        <Modal\n          title={this.props.name === constants.DEFAULT_APP_NAME ? this.props.name : 'Lattice Connector 🔗'}\n          footer={null}\n          visible={this.state.modal}\n          onOk={this.hideModal.bind(this)}\n          onCancel={this.hideModal.bind(this)}\n        >\n          {this.renderSetupInfo()}\n        </Modal>\n      </div>\n    );\n  }\n\n  renderMsg() {\n    let err;\n    if (this.state.errMsg)\n      err = this.state.errMsg;\n    else if (this.props.errMsg)\n      err = this.props.errMsg;\n    if (err)\n      return (\n        <Alert  message={<p><b>Error:</b><br/>{err}</p>} \n                type={\"error\"} \n                style={{margin: \"20px 0 0 0\"}}\n                closable/>\n      );\n    return;\n  }\n\n  render() {\n    const spanWidth = this.context.isMobile ? 24 : 10;\n    const spanOffset = this.context.isMobile ? 0 : 7;\n    const tooLong = this.props.keyringName !== null && this.props.keyringName.length < 5;\n    return (\n      <Row>\n        {this.renderModal()}\n        <Col span={spanWidth} offset={spanOffset}>\n          <center>\n            {this.renderMsg()}\n            <Card bordered={true}>\n              <a  className='lattice-a'\n                  href=\"https://gridplus.io/lattice\" \n                  target='_blank' \n                  rel='noopener noreferrer'\n              >\n                {this.props.keyringName ? (\n                  <h2 style={{margin: \"10px 0 0 0\"}}>Lattice Connector <LinkOutlined/></h2>\n                ) : (\n                  <h2 style={{margin: \"10px 0 0 0\"}}>Lattice Manager<br/><DesktopOutlined/></h2>\n                )}\n              </a>\n              {this.props.keyringName ? (\n                <div style={{margin: \"2em\"}}>\n                  <br />\n                  <i><h3>Connect to:</h3></i>\n                  <NameEditor\n                    name={this.props.keyringName}\n                    setName={this.props.setKeyringName}\n                  />\n                </div>) : null}\n              {/* @ts-expect-error */}\n              {tooLong ? (<p><b>Error: App name must be more than 4 characters.</b></p>) : this.renderForm()}\n            </Card>\n            <Button type=\"link\" onClick={this.showModal.bind(this)} style={{margin: \"20px 0 0 0\"}}>\n              New User Info\n            </Button>\n            <br/>\n            <Button type=\"link\" onClick={() => {\n              this.setState({ showSettings: true }, this.showModal)\n            }}>\n              Settings\n            </Button>\n            <br/>\n            <Button type=\"link\" href=\"https://gridplus.io/lattice\" target={\"_blank\"} rel={\"noopener noreferrer\"}>\n              About the Lattice\n            </Button>\n          </center>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default Connect\n","import React from 'react';\nimport { Card, Input } from 'antd'\nimport { PageContent } from './index'\nimport 'antd/dist/antd.dark.css'\nimport { AppContext } from '../store/AppContext';\nconst SUBMIT_LEN = 8; // 8 characters in a code\n\nclass Pair extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ code: '' })\n    //@ts-expect-error\n    if (this.input) {\n      //@ts-expect-error\n      this.input.focus();\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ code: '' })\n  }\n\n  handleUpdate(e) {\n    try {\n      this.setState({ code: e.target.value.toUpperCase() }, () => {\n        if (this.state.code.length >= SUBMIT_LEN) {\n          this.props.submit(this.state.code)\n        }\n      })\n    } catch (err) {\n      ;\n    }\n  }\n\n  getBoxWidth() {\n    const e = document.getElementById('secret-card')\n    if (!e)\n      return\n    return 0.8 * e.clientWidth\n  }\n\n  getBoxFontHeight() {\n    const w = this.getBoxWidth();\n    if (!w)\n      return;\n    return 0.6 * (w / SUBMIT_LEN);\n  }\n\n  render() {\n    if (this.props.hide) {\n      return null;\n    }\n    const size = this.context.isMobile ? 'small' : 'large';\n    const width = this.getBoxWidth();\n    const fontSize = this.getBoxFontHeight();\n    const content = (\n      <center>\n        <Card title=\"Enter Secret\" bordered={true} id='secret-card'>\n          <p></p>\n          <p>Please enter the pairing secret displayed on your Lattice screen:</p>\n          <Input\n            className='lattice-pairing-box'\n            size={size}\n            id=\"secret\"\n            //@ts-expect-error\n            ref={i => {this.input = i}}\n            onChange={this.handleUpdate.bind(this)}\n            style={{width, fontSize}}\n            value={this.state.code}\n          />\n        </Card>\n      </center>\n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Pair","// NOTE: This feature has been shelved for now. The problem is this:\n// 1. We deprecated the ETH wallet and are in the process of deprecating the BTC wallet too\n// 2. Only the paired requester can setup a permission and the web wallet (rebanded manager)\n//    is itself a paired requester.\n// Ideally we could have a true manager that can create a permission on behalf of a paired\n// requester, otherwise the requester needs to have an interface to setup the permission.\n// If we are to use this app as the \"manager\", we cannot manage permissions on it.\n// FOR NOW, I AM HIDING THIS FEATURE IN main.js\n\nimport React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Col, Dropdown, Input, Menu, Row, Select, Spin } from 'antd'\nimport { LoadingOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport { constants, } from '../util/helpers';\nimport { PageContent } from './index'\nimport './styles.css'\nconst BN = require('bignumber.js');\nconst HOURS = 3600;\nconst DAYS = 86400;\nconst assets = {\n  ETH: {\n    name: 'ETH',\n    decimals: 18,\n  },\n  BTC: {\n    name: 'BTC',\n    decimals: 8,\n  }\n}\n\nclass Permissions extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      success: false,\n      loading: false,\n      asset: assets.ETH,\n      timeMultiplier: HOURS, // conversion of window to seconds\n      value: 0,\n      window: 0,\n    }\n\n    this.submit = this.submit.bind(this);\n    this.updateAsset = this.updateAsset.bind(this);\n    this.updateTimeMultiplier = this.updateTimeMultiplier.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.updateWindow = this.updateWindow.bind(this);\n  }\n\n  updateAsset(x) {\n    this.setState({ asset: assets[x.key]})\n  }\n\n  updateTimeMultiplier(x) {\n    this.setState({ timeMultiplier: x })\n  }\n\n  updateWindow(evt) {\n    const x = evt.target.value\n    if (!isNaN(parseFloat(x))) {\n      let s = parseFloat(x);\n      if (x[x.length-1] === '.')\n      //@ts-expect-error\n        s += '.';\n      this.setState({ window: s })\n    }\n    else if (x === '')\n      this.setState({ window: '0' })\n  }\n\n  updateValue(evt) {\n    let x = evt.target.value\n    if (!isNaN(parseFloat(x))) {\n      if (x.length > 1 && x[0] === '0' && x[1] !== '.')\n        x = x.slice(1);\n      this.setState({ value: x })\n    }\n    else if (x === '')\n      this.setState({ value: '0' })\n  }\n\n  submit() {\n    this.setState({ loading: true, error: null, success: false })\n    const req = {\n      currency: this.state.asset.name,\n      decimals: this.state.asset.decimals,\n      timeWindow: Math.floor(parseFloat(this.state.window) * this.state.timeMultiplier),\n      limit: 0,\n      asset: null,\n    };\n    const value = new BN(this.state.value);\n    const decimals = new BN(this.state.asset.decimals);\n    const power = new BN('10').pow(decimals);\n    let limitStr = value.multipliedBy(power).toString(16)\n    if (limitStr.length % 2 > 0)\n      limitStr = `0${limitStr}`;\n    //@ts-expect-error\n    req.limit = `0x${limitStr}`;\n    this.props.session.client.addPermissionV0(req, (err) => {\n      if (err) {\n        this.setState({ error: err.toString(), success: false, loading: false })\n      } else {\n        this.setState({ error: null, success: true, loading: false })\n      }\n    })\n  }\n\n  renderBanner() {\n    if (this.state.error) {\n      return (\n        <Alert\n          message=\"Error\"\n          description={this.state.error}\n          type=\"error\"\n          closable\n          onClose={() => { this.setState({ error: null })}}\n        />\n      )\n    } else if (this.state.loading) {\n      return (\n        <div>\n          <Spin indicator={(<LoadingOutlined/>)}/>\n          <br/>\n        </div>\n      )\n    } else if (this.state.success) {\n      return (\n        <Alert \n          type=\"success\"\n          message=\"Success\"\n          description=\"Successfully added permission to Lattice.\"\n        />\n      )\n    }\n  }\n\n  renderCard() {\n    const timeMultiplierSelect = (\n      <Select defaultValue={HOURS} onChange={this.updateTimeMultiplier}>\n        <Select.Option value={HOURS}>hours</Select.Option>\n        <Select.Option value={DAYS}>days</Select.Option>\n      </Select>\n    )\n\n    const currencyMenu = (\n      <Menu onClick={this.updateAsset}>\n        {Object.keys(assets).map((key) => {\n          return (\n            <Menu.Item key={key}>{key}</Menu.Item>\n          )\n        })}\n      </Menu>\n    );\n\n    return (\n      <div>\n        <p>\n          You can set spending limits for ETH and BTC. If you make a request from this web wallet that is under your\n          spending limit, your Lattice will auto-sign the transaction. Note that this currently only works for simple \n          ETH and BTC transfers.&nbsp;\n           <a className='lattice-a'\n              href={constants.PERMISSIONS_HELP_LINK}\n              target='_blank'\n              rel='noopener noreferrer'\n          >\n            (More info)\n          </a>        \n        </p>\n        <br/>\n        <i>This is a feature prototype. In the future, GridPlus intends to expand this functionality\n        to other assets and more general contract interactions.</i>\n        <br/><br/>\n        <p><b>Currency:</b></p>\n        <Row>\n          <Col span={12} offset={6}>\n            <Dropdown overlay={currencyMenu}>\n              <Button>{this.state.asset.name}</Button>\n            </Dropdown>\n          </Col>\n        </Row>\n        <br/>\n        <p><b>Spending Limit:</b></p>\n        <Row>\n          <Col span={12} offset={6}>\n            <Input type=\"text\"\n                  id=\"permission-value\" \n                  value={this.state.value} \n                  onChange={this.updateValue.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <p><b>Reset Every:</b></p>\n         <Row>\n          <Col span={12} offset={6}>\n            <Input type=\"text\"\n                  id=\"permission-window\"\n                  addonAfter={timeMultiplierSelect}\n                  value={this.state.window} \n                  onChange={this.updateWindow.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <Button type=\"primary\" onClick={this.submit}>\n          Set Limit\n        </Button>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderBanner()}\n        <Card title={<div>\n          <h3>Spending Limits (Beta)&nbsp;\n            <a  className='lattice-a'\n                href={constants.PERMISSIONS_HELP_LINK}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n              <QuestionCircleOutlined/>\n            </a>\n          </h3>\n        </div>} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Permissions","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Checkbox, Col, Collapse, Input, Radio, Row, Space, Table } from 'antd'\nimport { WarningOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\nimport './styles.css'\nimport omit from \"lodash/omit\"\nimport { constants, getBtcPurpose } from '../util/helpers';\nimport localStorage from '../util/localStorage';\n\nclass Settings extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      settings: localStorage.getSettings(),\n      keyring: localStorage.getKeyring(),\n    }\n    this.getBtcPurposeName = this.getBtcPurposeName.bind(this)\n  }\n\n\n  submit() {\n    // Save the settings to localStorage\n    localStorage.setSettings(this.state.settings)\n    // Reload the page for the changes to take effect\n    window.location.reload();\n  }\n\n  updateUseCustomEndpoint(value) {\n    const settings = this.state.settings;\n    if (value !== true) {\n      // Reset the custom endpoint if this value is false\n      settings.customEndpoint = '';\n    }\n    this.setState({ settings });\n  }\n\n  updateCustomEndpoint(evt) {\n    const settings = this.state.settings;\n    settings.customEndpoint = evt.target.value;\n    this.setState({ settings });\n  }\n\n  updateUseDevLattice(evt) {\n    const settings = this.state.settings;\n    settings.devLattice = evt.target.checked\n    this.setState({ settings }, this.submit)\n  }\n\n  removeKeyring ({ name }) {\n    localStorage.removeKeyringItem(name)\n    this.setState({ keyring: omit(this.state.keyring, name) })\n  }\n\n  resetState() {\n    localStorage.removeRootStore()\n    window.location.reload();\n  }\n\n  renderCustomEndpointSetting() {\n    const { customEndpoint='' } = this.state.settings;\n    return (\n      <Card>\n        <Row justify='center'>\n          <Col span={20}>\n            <h3>Connection Endpoint:</h3>\n            <p>\n              If you wish to route messages and connections through your own endpoint, you may specify it here.&nbsp;\n              Otherwise leave blank.&nbsp; See&nbsp;\n              <a  href=\"https://github.com/GridPlus/lattice-connect\"\n                  className='lattice-a'\n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\">\n                this\n              </a> for more information.\n            </p>\n            <div>\n              <Input  placeholder=\"host:port\" \n                      defaultValue={customEndpoint} \n                      onChange={this.updateCustomEndpoint.bind(this)}/>\n            </div>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n\n  handleChangeBitcoinVersionSetting(evt) {\n    const settings = this.state.settings;\n    settings.btcPurpose = parseInt(evt.target.value);\n    this.setState({ settings }, this.submit)\n  }\n\n  getBtcPurposeName() {\n    const purpose = this.state.settings.btcPurpose ?\n                    this.state.settings.btcPurpose :\n                    getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_NONE) {\n      return constants.BTC_PURPOSE_NONE_STR;\n    } else if (purpose === constants.BTC_PURPOSE_LEGACY) {\n      return constants.BTC_PURPOSE_LEGACY_STR\n    } else if (purpose === constants.BTC_PURPOSE_WRAPPED_SEGWIT) {\n      return constants.BTC_PURPOSE_WRAPPED_SEGWIT_STR\n    } else if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n      return constants.BTC_PURPOSE_SEGWIT_STR;\n    } else {\n      return 'Error finding BTC version'\n    }\n  }\n\n  renderBitcoinVersionSetting() {\n    // NOTE: Firmware does not yet support segwit addresses\n    // TODO: Uncomment this when firmware is updated\n    const purpose = getBtcPurpose() || constants.BTC_PURPOSE_NONE;\n    return (\n      <Card>\n        <h4>Bitcoin Wallet Type</h4>\n        <Radio.Group  onChange={this.handleChangeBitcoinVersionSetting.bind(this)}\n                      defaultValue={purpose}>\n          <Space direction=\"vertical\">\n            <Radio value={constants.BTC_PURPOSE_NONE}>\n              Hide BTC Wallet\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_SEGWIT}>\n              {constants.BTC_PURPOSE_SEGWIT_STR}\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_WRAPPED_SEGWIT}>\n              {constants.BTC_PURPOSE_WRAPPED_SEGWIT_STR}\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_LEGACY}>\n              {constants.BTC_PURPOSE_LEGACY_STR}\n            </Radio>\n          </Space>\n        </Radio.Group>\n      </Card>\n    )\n  }\n\n  renderDevLatticeSetting() {\n    const { devLattice } = this.state.settings;\n    return (\n      <Card>\n        <h4>Debug Settings</h4>\n        <Row justify='center' style={{ margin: '10px 0 0 0'}}>\n          <Button type=\"link\" onClick={this.resetState} className='warning-a'>\n          <WarningOutlined/>&nbsp;Reset App State\n        </Button>\n        </Row>\n        <Row justify='center' style={{ margin: '20px 0 0 0'}}>\n          <Checkbox onChange={this.updateUseDevLattice.bind(this)} checked={devLattice}>\n            Using Dev Lattice\n          </Checkbox>\n        </Row>\n      </Card>\n    )\n  }\n\n  renderKeyringsSetting() {\n    const keyring = localStorage.getKeyring()\n    const cols = [\n      { \n        title: 'App Name', \n        dataIndex: 'name', \n        key: 'name'\n      }, \n      { \n        title: 'Action', \n        dataIndex: 'action', \n        key: 'action',\n        render: (text, record) => (\n          <Button type=\"link\" onClick={() => {this.removeKeyring(record)}}>Forget</Button>\n        ) \n      }\n    ]\n    const data: any[] = [];\n    Object.keys(keyring)\n      .sort((a, b) => { return a.toLowerCase() > b.toLowerCase() ? 1 : -1 })\n      .forEach((name) => { data.push({ name, key: name }) })\n    return (\n      <Card>\n        <Row justify='center'>\n          <Col span={20}>\n            <h3>Third Party Connections</h3>\n            <p>\n              Manage connections to your Lattice. Third party apps should be listed here if they are connected to your device.\n            </p>\n            <Collapse>\n              <Collapse.Panel header={`Connections List (${data.length})`} key='third-party'>\n                <Table dataSource={data} columns={cols}/>\n              </Collapse.Panel>\n            </Collapse>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n\n  renderCard() {\n    return (\n      <div>\n        {this.renderKeyringsSetting()}\n        {this.renderCustomEndpointSetting()}\n        {this.renderBitcoinVersionSetting()}\n        {this.renderDevLatticeSetting()}\n        <br/>\n        <Button type=\"primary\" onClick={this.submit.bind(this)}>\n          Update and Reload\n        </Button>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        <Card title={'Settings'} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    if (this.props.inModal)\n      return (<center>{this.renderCard()}</center>);\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Settings","import { Button, notification } from \"antd\";\n\nexport const sendErrorNotification = ({\n  message,\n  description,\n  onClick,\n  onClose,\n}: {\n  message: string;\n  description?: string;\n  onClick?: () => void;\n  onClose?: () => void;\n}) => {\n  const key = `error-${Date.now()}`;\n  const btn = onClick && (\n    <Button\n      danger\n      size=\"small\"\n      onClick={() => {\n        onClick();\n        notification.close(key);\n      }}\n    >\n      Retry\n    </Button>\n  );\n  notification.open({\n    message,\n    description,\n    placement: \"top\",\n    btn,\n    key,\n    type: \"error\",\n    onClose,\n  });\n};\n","import _ from \"lodash\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../store/AppContext\";\nimport { LatticeRecord } from \"../types/records\";\nimport { constants } from \"../util/helpers\";\nimport { sendErrorNotification } from \"../util/sendErrorNotification\";\nconst { ADDRESSES_PER_PAGE, ADDRESS_RECORD_TYPE } = constants;\n\n/**\n * The `useAddresses` hook is used to manage the external calls for fetching, adding, and removing\n * key-value address data on the user's Lattice and caching that data in `store`.\n */\nexport const useAddresses = () => {\n  const {\n    session,\n    isLoadingAddresses,\n    setIsLoadingAddresses,\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  } = useContext(AppContext);\n\n  /**\n   * Fetches the installed addresses from the user's Lattice.\n   */\n  const fetchAddresses = useCallback(\n    async (fetched = 0) => {\n      setIsLoadingAddresses(true);\n\n      return session.client\n        .getKvRecords({\n          start: fetched,\n          n: ADDRESSES_PER_PAGE,\n        })\n        .then(async (res) => {\n          addAddressesToState(res.records);\n          const totalFetched = res.fetched + fetched;\n          const remainingToFetch = res.total - totalFetched;\n          if (remainingToFetch > 0) {\n            await fetchAddresses(fetched + res.fetched);\n          }\n        })\n        .catch((err) => {\n          sendErrorNotification({\n            ...err,\n            onClick: fetchAddresses,\n          });\n        })\n        .finally(() => {\n          setIsLoadingAddresses(false);\n        });\n    },\n    [addAddressesToState, session, setIsLoadingAddresses]\n  );\n\n  /**\n   * Removes installed addresses from the user's Lattice.\n   */\n  const removeAddresses = (selectedAddresses: LatticeRecord[]) => {\n    const ids = selectedAddresses.map((r) => parseInt(r.id));\n    if (isEmpty(ids)) return;\n    setIsLoadingAddresses(true);\n\n    return session.client\n      .removeKvRecords({ ids })\n      .then(() => {\n        removeAddressesFromState(selectedAddresses);\n      })\n      .catch((err) => {\n        sendErrorNotification({\n          ...err,\n          onClick: () => removeAddresses(selectedAddresses),\n        });\n      })\n      .finally(() => {\n        setIsLoadingAddresses(false);\n      });\n  };\n\n  /**\n   * Adds new addresses to the user's Lattice.\n   */\n  const addAddresses = async (addressesToAdd: LatticeRecord[]) => {\n    setIsLoadingAddresses(true);\n\n    /**\n     * Transform `addressesToAdd` data into chunks of size `ADDRESSES_PER_PAGE` with shape `{ key:\n     * val }` for sending to Lattice because the Lattice can only handle a particular amount of\n     * addresses at a time.\n     */\n    const recordsList = _.chain(addressesToAdd)\n      .chunk(ADDRESSES_PER_PAGE)\n      .map((addrChunk) =>\n        _.chain(addrChunk).keyBy(\"key\").mapValues(\"val\").value()\n      )\n      .value();\n\n    return new Promise<void>(async (resolve, reject) => {\n      for await (const records of recordsList) {\n        await session.client\n          .addKvRecords({\n            caseSensitive: false,\n            type: ADDRESS_RECORD_TYPE,\n            records,\n          })\n          .catch((err) => {\n            sendErrorNotification(err);\n            reject(err);\n          });\n      }\n      resolve();\n    })\n      .then(async () => {\n        // TODO: Remove fetch and call addAddressesToState() with the address data when FW is\n        //  updated to return address data. See GitHub issue:\n        //  https://github.com/GridPlus/k8x_firmware_production/issues/2323\n        await fetchAddresses();\n      })\n      .catch(sendErrorNotification)\n      .finally(() => {\n        setIsLoadingAddresses(false);\n      });\n  };\n\n  return {\n    fetchAddresses,\n    addresses,\n    addAddresses,\n    addAddressesToState,\n    removeAddresses,\n    removeAddressesFromState,\n    resetAddressesInState,\n    isLoadingAddresses,\n  };\n};\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\n\nexport const AddAddressesButton = ({ showModal }) => {\n  const { isLoadingAddresses } = useAddresses();\n\n  return (\n    <Button\n      type=\"ghost\"\n      onClick={showModal}\n      disabled={isLoadingAddresses}\n      icon={<PlusOutlined />}\n    >\n      Add\n    </Button>\n  );\n};\n","import { MinusSquareFilled, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input, Modal, Space } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { sendErrorNotification } from \"../util/sendErrorNotification\";\n\nconst MAX_RECORD_LEN = 63; // 63 characters max for both key and value\nexport const keyIsDuplicatedErrorMessage =\n  \"You already have a tag with this address on your device.\";\nexport const addingKeyIsDuplicatedErrorMessage =\n  \"You are already trying to add a tag with this address.\";\nexport const valIsDuplicatedErrorMessage =\n  \"You already have a tag with this name on your device.\";\nexport const addingValIsDuplicatedErrorMessage =\n  \"You are already trying to add a tag with this name.\";\n\nexport const AddAddressesModal = ({\n  isModalVisible,\n  setIsModalVisible,\n  initialAddresses,\n}) => {\n  const { addresses, addAddresses, isLoadingAddresses } = useAddresses();\n  const [form] = Form.useForm();\n\n  const hideModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    hideModal();\n  };\n\n  const onFinish = () => {\n    form\n      .validateFields()\n      .then(({ addressesToAdd }) =>\n        addAddresses(addressesToAdd).then(hideModal)\n      );\n  };\n\n  const onFinishFailed = () => {\n    sendErrorNotification({\n      message: \"Unable to submit\",\n      description: \"Please fix errors in form and try again.\",\n    });\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"Add Address Tags\"\n        visible={isModalVisible}\n        maskClosable={false}\n        onOk={form.submit}\n        onCancel={handleCancel}\n        destroyOnClose={true}\n        footer={[\n          <Button type=\"link\" onClick={handleCancel} key=\"cancel\">\n            Cancel\n          </Button>,\n          <Button\n            type=\"primary\"\n            loading={isLoadingAddresses}\n            onClick={form.submit}\n            key=\"add\"\n          >\n            Add\n          </Button>,\n        ]}\n      >\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <Form\n            form={form}\n            name=\"formData\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            autoComplete=\"off\"\n            preserve={false}\n            layout=\"vertical\"\n          >\n            <Form.List name=\"addressesToAdd\" initialValue={initialAddresses}>\n              {(fields, { add, remove }) => (\n                <>\n                  {fields.map(({ key, name, ...restField }) => (\n                    <div\n                      key={`${name}-inputs`}\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        marginBottom: \"1em\",\n                        width: \"100%\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          flexGrow: 1,\n                        }}\n                      >\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"key\"]}\n                          validateTrigger={[\"onChange\", \"onBlur\"]}\n                          rules={[\n                            { required: true, message: \"Address is required.\" },\n                            {\n                              max: MAX_RECORD_LEN,\n                              type: \"string\",\n                              message: `Must be shorter than ${MAX_RECORD_LEN} characters.`,\n                            },\n                            {\n                              validator: (rule, key) => {\n                                return addresses?.some((r) => r.key === key)\n                                  ? Promise.reject(\n                                      new Error(keyIsDuplicatedErrorMessage)\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                            {\n                              validator: (rule, key) => {\n                                const matchingKeys = form\n                                  .getFieldsValue()\n                                  .addressesToAdd?.filter((r) => r.key === key);\n                                return matchingKeys.length > 1\n                                  ? Promise.reject(\n                                      new Error(\n                                        addingKeyIsDuplicatedErrorMessage\n                                      )\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                          ]}\n                        >\n                          <Input\n                            addonBefore={\"Address\"}\n                            data-testid={`${name}-address-input`}\n                            disabled={isLoadingAddresses}\n                          />\n                        </Form.Item>\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"val\"]}\n                          validateTrigger={[\"onChange\", \"onBlur\"]}\n                          rules={[\n                            { required: true, message: \"Name is required\" },\n                            {\n                              max: MAX_RECORD_LEN,\n                              type: \"string\",\n                              message: `Must be shorter than ${MAX_RECORD_LEN} characters.`,\n                            },\n                            {\n                              validator: (rule, val) => {\n                                return addresses?.some((r) => r.val === val)\n                                  ? Promise.reject(\n                                      new Error(valIsDuplicatedErrorMessage)\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                            {\n                              validator: (rule, val) => {\n                                const matchingVals = form\n                                  .getFieldsValue()\n                                  .addressesToAdd?.filter((r) => r.val === val);\n                                return matchingVals.length > 1\n                                  ? Promise.reject(\n                                      new Error(\n                                        addingValIsDuplicatedErrorMessage\n                                      )\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                          ]}\n                        >\n                          <Input\n                            addonBefore={\"Name\"}\n                            data-testid={`${name}-name-input`}\n                            disabled={isLoadingAddresses}\n                          />\n                        </Form.Item>\n                      </div>\n                      {name > 0 ? (\n                        <Button\n                          type=\"text\"\n                          icon={<MinusSquareFilled />}\n                          disabled={isLoadingAddresses}\n                          style={{\n                            height: \"auto\",\n                            marginLeft: \"1em\",\n                            marginBottom: \"1.2em\",\n                          }}\n                          onClick={() => {\n                            remove(name);\n                            form.validateFields();\n                          }}\n                        />\n                      ) : null}\n                    </div>\n                  ))}\n                  <Form.Item>\n                    <Button\n                      type=\"dashed\"\n                      block\n                      icon={<PlusOutlined />}\n                      disabled={isLoadingAddresses}\n                      onClick={add}\n                    >\n                      Add Another Address Tag\n                    </Button>\n                  </Form.Item>\n                </>\n              )}\n            </Form.List>\n          </Form>\n        </Space>\n      </Modal>\n    </>\n  );\n};\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Table } from \"antd\";\nimport fuzzysort from \"fuzzysort\";\nimport intersectionBy from \"lodash/intersectionBy\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { constants } from \"../util/helpers\";\nimport { abbreviateHash } from \"../util/addresses\";\nconst { ADDRESSES_PER_PAGE } = constants;\n\n/**\n * `AddressTable` is a table of key-value pairs of names and hashes with some management features to\n * make it easier to manage a large amount of addresses.\n */\nexport const AddressTable = () => {\n  const { isLoadingAddresses, addresses, removeAddresses } = useAddresses();\n  const [input, setInput] = useState(\"\");\n  const [filteredAddresses, setFilteredAddresses] = useState([]);\n  const [selectedAddresses, setSelectedAddresses] = useState([]);\n\n  useEffect(() => {\n    setInput(\"\");\n    setFilteredAddresses(addresses);\n  }, [addresses, isLoadingAddresses]);\n\n  const filter = useCallback(\n    (value) =>\n      fuzzysort\n        .go(value, addresses, { keys: [\"key\", \"val\"] })\n        .map((x) => x.obj),\n    [addresses]\n  );\n\n  const handleOnSelect = (_, __, _selectedAddresses) => {\n    setSelectedAddresses(_selectedAddresses);\n  };\n\n  const handleOnSelectAll = (_, _selectedAddresses) => {\n    setSelectedAddresses(_selectedAddresses);\n  };\n\n  const onChange = ({ target: { value } }) => {\n    setInput(value);\n    const _addresses = value ? filter(value) : addresses;\n    setFilteredAddresses(_addresses);\n    setSelectedAddresses(intersectionBy(selectedAddresses, _addresses, \"key\"));\n  };\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <Input\n          value={input}\n          placeholder=\"Filter\"\n          disabled={isLoadingAddresses}\n          onChange={onChange}\n          style={{ marginBottom: \"1em\" }}\n          allowClear\n        />\n        <Button\n          danger\n          type=\"text\"\n          disabled={selectedAddresses.length === 0}\n          onClick={() =>\n            removeAddresses(selectedAddresses).then(() => {\n              setSelectedAddresses([]);\n            })\n          }\n          style={{ marginLeft: \"1em\" }}\n        >\n          Remove Selected\n        </Button>\n      </div>\n      <Table\n        dataSource={filteredAddresses}\n        tableLayout=\"fixed\"\n        loading={{\n          spinning: isLoadingAddresses,\n          tip: \"Loading...\",\n          indicator: <LoadingOutlined />,\n        }}\n        pagination={{\n          position: [\"bottomCenter\"],\n          pageSize: ADDRESSES_PER_PAGE,\n          defaultCurrent: 1,\n          showSizeChanger: false,\n        }}\n        rowSelection={{\n          type: \"checkbox\",\n          onSelect: handleOnSelect,\n          onSelectAll: handleOnSelectAll,\n          selectedRowKeys: selectedAddresses.map((x) => x.key),\n        }}\n      >\n        <Table.Column\n          title=\"Name\"\n          dataIndex=\"val\"\n          key=\"val\"\n          defaultSortOrder=\"ascend\"\n          sorter={(a: any, b: any) => a.val.localeCompare(b.val)}\n        />\n        <Table.Column\n          title=\"Address\"\n          dataIndex=\"key\"\n          key=\"key\"\n          render={(key) => abbreviateHash(key)}\n          sorter={(a: any, b: any) => a.key.localeCompare(b.key)}\n        />\n      </Table>\n    </div>\n  );\n};\n","/**\n * `abbreviateHash` takes a string and returns the first 10 and last 8 characters with an ellipsis between.\n * @param {string} hash - the hash string to shorten.\n */\nexport const abbreviateHash = (hash: string) => hash && hash.length > 24 ? `${hash.slice(0, 10)}...${hash.slice(\n  hash.length - 8,\n  hash.length\n)}` : hash ?? \"\"\n","import Papa from \"papaparse\";\nimport { Address } from \"../types/records\";\n\nexport const getAddressKey = (address): string => {\n  if (address.Name) return address.Name;\n  if (address.name) return address.name;\n  if (address.Key) return address.Key;\n  if (address.key) return address.key;\n  return \"\";\n};\n\nexport const getAddressVal = (address): string => {\n  if (address.Address) return address.Address;\n  if (address.address) return address.address;\n  if (address.Val) return address.Val;\n  if (address.val) return address.val;\n  return \"\";\n};\n\nexport const addressesToCsvString = (addresses: any[]): string => {\n  const addressList = addresses.map((address) => {\n    return {\n      name: address.key,\n      address: address.val,\n    };\n  });\n  return Papa.unparse(addressList);\n};\n\nexport const csvStringToAddresses = (text: string): Address[] => {\n  const result = Papa.parse(text, {\n    header: true,\n  });\n  return result?.data.map((address) => {\n    return {\n      key: getAddressKey(address),\n      val: getAddressVal(address),\n    };\n  });\n};\n","import { ExportOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { addressesToCsvString } from \"../util/csv\";\n\nexport const ExportAddressesButton = () => {\n  const { isLoadingAddresses, addresses } = useAddresses();\n\n  const handleOnClick = () => {\n    const csv = addressesToCsvString(addresses);\n    const csvData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    let csvURL = null;\n    csvURL = window.URL.createObjectURL(csvData);\n    const tempLink = document.createElement(\"a\");\n    tempLink.href = csvURL;\n    tempLink.setAttribute(\"download\", \"SavedAddresses.csv\");\n    tempLink.click();\n  };\n\n  return (\n    <Button\n      type=\"default\"\n      icon={<ExportOutlined />}\n      disabled={isLoadingAddresses}\n      onClick={handleOnClick}\n    >\n      Export\n    </Button>\n  );\n};\n","import { ImportOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\n\nexport const ImportAddressesButton = ({ showModal }) => {\n  const { isLoadingAddresses } = useAddresses();\n\n  return (\n    <Button\n      type=\"default\"\n      icon={<ImportOutlined />}\n      disabled={isLoadingAddresses}\n      onClick={showModal}\n    >\n      Import\n    </Button>\n  );\n};\n","import { Button, Modal, Space } from \"antd\";\nimport { useState } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { csvStringToAddresses } from \"../util/csv\";\n\nexport const ImportAddressesModal = ({\n  isModalVisible,\n  setIsModalVisible,\n  setIsAddAddressesModalVisible,\n  setInitialAddresses,\n}) => {\n  const { isLoadingAddresses } = useAddresses();\n  const [file, setFile] = useState();\n  const fileReader = new FileReader();\n\n  const hideModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    hideModal();\n  };\n\n  const handleOnChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n\n    if (file) {\n      fileReader.onload = function (event) {\n        const text = event.target.result as string;\n        const addresses = csvStringToAddresses(text);\n        setInitialAddresses(addresses);\n        hideModal();\n        setIsAddAddressesModalVisible(true);\n      };\n\n      fileReader.readAsText(file);\n    }\n  };\n\n  return (\n    <Modal\n      title=\"Add Address Tags\"\n      visible={isModalVisible}\n      maskClosable={false}\n      onOk={handleOnSubmit}\n      onCancel={handleCancel}\n      destroyOnClose={true}\n      footer={[\n        <Button type=\"link\" onClick={handleCancel} key=\"cancel\">\n          Cancel\n        </Button>,\n        <Button\n          type=\"primary\"\n          loading={isLoadingAddresses}\n          onClick={handleOnSubmit}\n          key=\"add\"\n        >\n          Import\n        </Button>,\n      ]}\n    >\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <input\n          type={\"file\"}\n          id={\"csvFileInput\"}\n          accept={\".csv\"}\n          onChange={handleOnChange}\n        />\n      </Space>\n    </Modal>\n  );\n};\n","import { Button } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { SyncOutlined } from \"@ant-design/icons\";\n\nexport const SyncAddressesButton = () => {\n  const { fetchAddresses, isLoadingAddresses, resetAddressesInState } =\n    useAddresses();\n\n  return (\n    <Button\n      type=\"link\"\n      icon={<SyncOutlined />}\n      disabled={isLoadingAddresses}\n      onClick={() => {\n        resetAddressesInState();\n        fetchAddresses();\n      }}\n    >\n      Sync\n    </Button>\n  );\n};\n","import { Card } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { useEffect, useState } from \"react\";\nimport { AddAddressesButton } from \"../components/AddAddressesButton\";\nimport { AddAddressesModal } from \"../components/AddAddressesModal\";\nimport { AddressTable } from \"../components/AddressTable\";\nimport { ExportAddressesButton } from \"../components/ExportAddressesButton\";\nimport { ImportAddressesButton } from \"../components/ImportAddressesButton\";\nimport { ImportAddressesModal } from \"../components/ImportAddressesModal\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { PageContent } from \"./formatting\";\nimport { SyncAddressesButton } from \"./SyncAddressesButton\";\n\nconst AddressTagsPage = () => {\n  const { fetchAddresses, isLoadingAddresses, addresses } = useAddresses();\n  const [isAddAddressesModalVisible, setIsAddAddressesModalVisible] =\n    useState(false);\n  const [isImportAddressesModalVisible, setIsImportAddressesModalVisible] =\n    useState(false);\n\n  const [initialAddresses, setInitialAddresses] = useState([\n    { key: null, val: null },\n  ]);\n\n  useEffect(() => {\n    if (isEmpty(addresses) && !isLoadingAddresses) {\n      fetchAddresses();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const extra = [\n    <SyncAddressesButton key=\"sync-addresses-button\" />,\n    <AddAddressesButton\n      key=\"add-addresses-button\"\n      showModal={() => setIsAddAddressesModalVisible(true)}\n    />,\n    <ImportAddressesButton\n      showModal={() => setIsImportAddressesModalVisible(true)}\n      key=\"import-addresses-button\"\n    />,\n    <ExportAddressesButton key=\"export-addresses-button\" />,\n  ];\n\n  return (\n    <PageContent>\n      <Card title={\"Address Tags\"} extra={extra} bordered>\n        <AddressTable />\n      </Card>\n      <AddAddressesModal\n        isModalVisible={isAddAddressesModalVisible}\n        setIsModalVisible={setIsAddAddressesModalVisible}\n        initialAddresses={initialAddresses}\n      />\n      <ImportAddressesModal\n        isModalVisible={isImportAddressesModalVisible}\n        setIsAddAddressesModalVisible={setIsAddAddressesModalVisible}\n        setIsModalVisible={setIsImportAddressesModalVisible}\n        setInitialAddresses={setInitialAddresses}\n      />\n    </PageContent>\n  );\n};\n\nexport default AddressTagsPage;\n","import {\n  DesktopOutlined,\n  TagsOutlined\n} from \"@ant-design/icons\";\nimport { Alert, Card, Divider } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport React from \"react\";\nimport { useFeature } from \"../hooks/useFeature\";\nimport { constants } from \"../util/helpers\";\nimport { PageContent } from \"./index\";\n\nconst Landing = () => {\n  const { USES_AUTO_ABI } = useFeature();\n\n  return (\n    <PageContent>\n      <Card bordered={true} style={{ textAlign: \"center\" }}>\n        <div>\n          <h1 className=\"lattice-h1\">\n            <DesktopOutlined />\n            &nbsp;Lattice Manager\n          </h1>\n          <p className=\"lattice-h4\">\n            Manage secure data on your Lattice hardware wallet device for a\n            better web3 experience:\n          </p>\n        </div>\n        <div style={{ margin: \"25px\" }}>\n          <p>\n            <a\n              href={constants.TAGS_HELP_LINK}\n              className=\"lattice-a\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <TagsOutlined />\n              &nbsp;\n              <b>Address Tags</b>&nbsp;\n            </a>\n          </p>\n        </div>\n        <p>\n          <i>Give names to your favorite contracts or recipient addresses.</i>\n        </p>\n        {!USES_AUTO_ABI ? (\n          <Alert\n            style={{ maxWidth: \"500px\", margin: \"auto\" }}\n            message=\"Lattice firmware is out of date\"\n            description={\n              <div style={{ padding: \"0 25px 0 25px\" }}>\n                <p>\n                  Please update immediately to receive automatic contract\n                  decoding, which ensures you know what you're signing.\n                </p>\n                <div\n                  style={{ margin: \"auto\", width: \"66%\", textAlign: \"left\" }}\n                >\n                  <p>To update your firmware:</p>\n                  <ol>\n                    <li>Unlock your device</li>\n                    <li>\n                      Tap <strong>Settings</strong>\n                    </li>\n                    <li>\n                      Tap <strong>Software Update</strong>\n                    </li>\n                    <li>\n                      Tap <strong>Update</strong>\n                    </li>\n                  </ol>\n                </div>\n              </div>\n            }\n            type=\"warning\"\n            showIcon\n          />\n        ) : null}\n        <Divider />\n        <img\n          src=\"lattice-landing.jpg\"\n          style={{ maxHeight: \"500px\", maxWidth: \"100%\" }}\n          alt=\"lattice-one-device\"\n        />\n      </Card>\n    </PageContent>\n  );\n};\n\nexport default Landing;\n","import { useContext } from \"react\";\nimport { AppContext } from \"../store/AppContext\";\n\n/**\n * `useFeature` is a React hook for feature flags that makes it easy to know when a particular\n * feature is active for a version of the Lattice firmware (or other external data).\n * \n * To add a feature, add a SNAKE_CASE key to the `features` variable with an array that specifies\n * the required version of firmware as [fix, minor, major].\n */\nexport const useFeature = (): { [feature: string]: boolean } => {\n  const { session } = useContext(AppContext);\n  const { fix, minor, major } = session.client.getFwVersion();\n\n  const features = {\n    CAN_VIEW_CONTRACTS: [0, 14, 0],\n    USES_AUTO_ABI: [0, 15, 0],\n  };\n\n  return Object.fromEntries(\n    Object.entries(features).map(([key, [_fix, _minor, _major]]) => [\n      key,\n      fix >= _fix && minor >= _minor && major >= _major,\n    ])\n  );\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\n\nclass Loading extends React.Component<any, any> {\n  render() {\n    const content = (\n      <center>\n        <Card title=\"Loading\" bordered={true}>\n          {this.props.spin !== false ? (\n            <Spin indicator={<LoadingOutlined/>} />\n          ) : null}\n          <p>{this.props.msg ? this.props.msg : \"Waiting for data from your Lattice\"}</p>\n          {this.props.onCancel ? (\n            <Button type='link' onClick={this.props.onCancel}>\n              Cancel\n            </Button>\n          ) : null}\n        </Card>\n      </center>\n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Loading","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Card, Button } from 'antd'\n\nclass Error extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.keyPressListener = this.keyPressListener.bind(this);\n    this.submit = this.submit.bind(this)\n   }\n\n  componentDidMount() {\n    window.addEventListener('keypress', this.keyPressListener)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keypress', this.keyPressListener)\n  }\n\n  keyPressListener(e) {\n    if (e.key === 'Enter')\n      this.submit()\n  }\n\n  submit() {\n    this.props.retryCb()\n  }\n\n  render() {\n    return (\n      <center>\n        <Card title=\"Error\" bordered={true}>\n          <p>{this.props.msg}</p>\n          {this.props.retryCb ? (\n            <Button id=\"submitButton\"\n              //@ts-expect-error - danger type is missing in antd\n              onClick={this.submit} type=\"danger\">\n              {this.props.btnMsg || \"Retry\"}\n            </Button>\n          ): null}\n        </Card>\n      </center>\n    )\n  }\n}\n\nexport default Error","\nimport React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Avatar, Divider, Statistic, List, Row, Card, Tag} from 'antd';\nimport { \n  CaretLeftOutlined, CaretRightOutlined, ClockCircleOutlined, \n  ArrowDownOutlined, ArrowUpOutlined, ReloadOutlined\n} from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { constants } from '../../util/helpers'\nimport { AppContext } from '../../store/AppContext';\n\nclass Wallet extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n\n  componentDidMount() {\n    if (this.props.session) {\n      this.props.session.getBtcWalletData()\n    }\n  }\n\n  getInnerWidth() {\n    return document.getElementById('main-content-inner')?.offsetWidth;\n  }\n\n  // Make sure text doesn't overflow on smaller screens. We need to trim larger strings\n  ensureTrimmedText(text) {\n    if (!this.context.isMobile) return text;\n    const maxChars = this.getInnerWidth() / 22;\n    if (text.length > maxChars) return `${text.slice(0, maxChars)}...`\n    return text;\n  }\n\n  // Render a transaction in a list\n  renderListItem(item) {\n    // Label to view transaction on explorer\n    const label = (\n      //@ts-expect-error\n      <div align={this.context.isMobile ? \"left\" : \"right\"}>\n        {item.confirmed ? (\n          <p>\n            {item.incoming ? 'Received ' : 'Sent '}\n            {getDateDiffStr(item.timestamp)} ago\n          </p>) : null}\n        <Button size=\"small\" \n                href={`${constants.BTC_TX_BASE_URL}/${item.id}`} \n                target=\"_blank\"\n          >View</Button>\n      </div>\n    );\n    if (item.value === 0) {\n      // This is an internal transaction, meaning all spenders and recipients\n      // are addresses we control\n      return (\n        <List.Item key={item.hash}>\n          <List.Item.Meta avatar={<Avatar src={'/BTC.png'}/>}\n                          title='Internal Transaction'\n                          description='This transaction sender and recipient are your addresses.'\n          />\n          {label}\n        </List.Item>\n      )\n    }\n    // Information about the transaction\n    const title = `${item.value / Math.pow(10, 8)} BTC`\n    const subtitle = `\\t${this.ensureTrimmedText(item.recipient)}`;\n    const itemMeta = (\n      <List.Item.Meta avatar={<Avatar src={'/BTC.png'}/>}\n                      title={item.confirmed ? (\n                        <p>{`${title}`}</p>\n                      ) : (\n                        <p><i>{`${title}`}</i></p>\n                      )}\n                      description={item.confirmed ? (\n                        <p>\n                          {item.incoming ? (\n                            <ArrowDownOutlined/>\n                          ) : (\n                            <ArrowUpOutlined/>\n                          )}\n                          {`${subtitle}`}\n                        </p>\n                      ) : (\n                        <p>\n                          {item.incoming ? (\n                            <ArrowDownOutlined/>\n                          ) : (\n                            <ArrowUpOutlined/>\n                          )}\n                          <i>{`${subtitle}`}</i>\n                        </p>\n                      )}\n      />\n    )\n    if (this.context.isMobile) {\n      return (\n        <List.Item key={item.hash}>\n          <Row justify='center'>{itemMeta}</Row>\n          <Row justify='center'>{label}</Row>\n        </List.Item>\n      )    \n    } else {\n      return(\n        <List.Item key={item.hash}>\n          {itemMeta}\n          {label}\n        </List.Item>\n      )\n    }\n  }\n\n  renderLastUpdatedTag() {\n    if (!this.props.session)\n      return;\n    const lastUpdated = this.props.session.lastFetchedBtcData;\n    if (!lastUpdated) {\n      return (\n        <Tag color={'red'}>Never</Tag>\n      )\n    }\n    //@ts-expect-error\n    const elapsedSec = Math.floor((new Date() - lastUpdated) / 1000);\n    let elapsed, timeType, color;\n    if (elapsedSec < 60) {\n      // Just display that it was updated \"seconds\" ago if we're under a minute\n      elapsed = '';\n      timeType = 'seconds';\n      color = 'green';\n    } else if (elapsedSec < 3600) {\n      // A couple minutes is fine, but more than 10 and there's probably a connectivity\n      // problem -- display orange warning tag\n      elapsed = Math.floor(elapsedSec / 60);\n      timeType = elapsed === 1 ? 'min' : 'mins';\n      color = 'green'\n    } else if (elapsedSec < 172800) {\n      // Less than a 2 days we display hours \n      elapsed = Math.floor(elapsedSec / 3600);\n      timeType = elapsed === 1 ? 'hour' : 'hours';\n      color = 'orange';\n    } else { \n      // Otherwise display days\n      elapsed = Math.floor(elapsedSec / 86400);\n      timeType = 'days';\n      color = 'red';\n    }\n    return (\n      <Tag color={color}>{`${elapsed} ${timeType} ago`}</Tag>\n    )\n  }\n\n  renderList() {\n    const txs = {\n      confirmed: this.props.session.getBtcTxs(),\n      pending: this.props.session.getBtcTxs(false),\n    }\n    return (\n      <div>\n        {txs.pending.length > 0 ? (\n          <Card title={<p><ClockCircleOutlined/> Pending</p>} \n                bordered={true}\n                style={{ margin: '0 0 30px 0'}}>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={txs.pending}\n              renderItem={item => (\n                this.renderListItem(item)\n              )}\n            />\n          </Card>\n        ): null}\n        <Card title=\"Transactions\" bordered={true}>\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={txs.confirmed}\n            renderItem={item => (\n              this.renderListItem(item)\n            )}\n          />\n        </Card>\n      </div>\n    )\n  }\n\n  renderHeader() {\n    const btcBalance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    const btcPrice = this.props.session.btcPrice;\n    return (\n      <div>\n        <Row justify='center' style={{margin: \"20px 0 0 0\"}}>\n            <Statistic title=\"Balance\" value={`${btcBalance} BTC`} />\n        </Row>\n        <Row justify='center'>\n          <Statistic title=\"USD Value\" value={btcBalance * btcPrice} precision={2} />\n        </Row>\n      </div>\n    )\n  }\n\n  renderPages() {\n    const page = this.props.session.getPage();\n    const txs = this.props.session.getBtcTxs();\n    return (\n      <center style={{margin: \"20px 0 0 0\"}}>\n        {page > 1 ? (\n          <Button onClick={() => {this.props.pageTurnCb(page-1)}}>\n            <CaretLeftOutlined/>\n          </Button>\n        ) : null}\n        {txs.length >= constants.PAGE_SIZE ? (\n          <Button onClick={() => { this.props.pageTurnCb(page+1)}}>\n            <CaretRightOutlined/>\n          </Button>\n        ): null}\n      </center>\n    )\n  }\n\n  renderStartCard() {\n    return (\n      <Card title={`BTC Wallet`} bordered={true}>\n        <center>\n          <p>You have not loaded any addresses yet.</p>\n          <Button size=\"large\" \n                  type=\"primary\" \n                  ghost \n                  onClick={() => {this.props.refreshData()}}\n          >\n            Start\n          </Button>\n        </center>\n      </Card>\n    )\n  }\n\n  renderContent() {\n    const lastUpdated = this.props.session.lastFetchedBtcData;\n    if (!lastUpdated) {\n      return this.renderStartCard();\n    }\n    return (\n      <div>\n        <Card title={`BTC Wallet`} bordered={true}>\n          <Row justify='center'>\n            Last Update&nbsp;{this.renderLastUpdatedTag()}\n            <Button size=\"small\" \n                    type=\"primary\" \n                    ghost \n                    onClick={() => {this.props.refreshData()}}\n            >\n              Refresh <ReloadOutlined/>\n            </Button>\n          </Row>\n          <Row justify='center' style={{margin: \"20px 0 0 0\"}}>\n            {this.renderHeader()}\n          </Row>\n        </Card>\n        <Divider/>\n        <div>\n          {this.renderList()}\n          {this.renderPages()}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderContent()}\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Wallet\n\n// Get a human readable, string representation of the difference\n// between two dates\nfunction getDateDiffStr(ts) {\n  const then = new Date(ts);\n  const now = new Date();\n  const min = 1000 * 60;\n  const hour = min * 60;\n  const day = hour * 24;\n  const week = day * 7;\n  const month = week * 4;\n  const year = month * 12;\n\n  //@ts-expect-error\n  const diff = now - then;\n\n  if (diff / min < 1) {\n    return 'seconds';\n  } else if (diff / hour < 1) {\n    return `${Math.floor(diff/min)} minutes`;\n  } else if (diff / day < 1) {\n    return `${Math.floor(diff/hour)} hours`;\n  } else if (diff / week < 1) {\n    return `${Math.floor(diff/day)} days`;\n  } else if (diff / month < 1) {\n    return `${Math.floor(diff/week)} weeks`;\n  } else if (diff / year < 1) {\n    return `${Math.floor(diff/month)} months`;\n  } else {\n    return `${Math.floor(diff/year)} years`\n  }\n\n}","const Buffer = require('buffer/').Buffer\nconst { validateBtcAddr } = require('./helpers');\n\nexport const allChecks = {\n  'ETH': {\n    full: checkEth,\n    recipient: checkEthRecipient,\n    value: checkNumericValue,\n  },\n  'BTC': {\n    full: checkBtc,\n    recipient: validateBtcAddr,\n    value: checkNumericValue,\n  }\n}\n\n// Checks for Ethereum transfers (ETH or token)\nfunction checkEth(data) {\n  return fullCheck(data, checkEthRecipient);\n}\n\n// Checks for Bitcoin transfers\nfunction checkBtc(data) {\n  return fullCheck(data, validateBtcAddr);\n}\n\n// Perform a check on the recipient and value\n// @returns bool -- true if params are both valid\nfunction fullCheck(data, recipientCheck) {\n  return true === recipientCheck(data.recipient) && true === checkNumericValue(data.value);\n} \n\nfunction checkEthRecipient(recipient) {\n  if (recipient === '') return null;\n  try {\n    // Make sure there is a 0x prefix\n    const isPrefixed = recipient.slice(0, 2) === '0x';\n    // Check that the address contains exactly 20 hex bytes.\n    // If any of the data is non-hex, the length will be shorter\n    const correctLength = Buffer.from(recipient.slice(2), 'hex').length === 20;\n    return isPrefixed === true && correctLength === true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction checkNumericValue(value) {\n  if (value === '') return false;\n  try {\n    const num = Number(value);\n    return !isNaN(num) && num >= 0;\n  } catch (e) {\n    return false;\n  }\n}\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Row, Input, InputNumber, Empty, Statistic, notification } from 'antd'\nimport { CheckCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { allChecks } from '../../util/sendChecks';\nimport { constants, buildBtcTxReq, getBtcNumTxBytes } from '../../util/helpers'\nimport '../styles.css'\nimport { AppContext } from '../../store/AppContext';\nconst RECIPIENT_ID = \"recipient\";\nconst VALUE_ID = \"value\";\n\nclass Send extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recipient: '',\n      value: null,\n      recipientCheck: null,\n      valueCheck: null,\n      error: null,\n      isLoading: false,\n      txHash: null,\n      btcFeeRate: constants.BTC_DEFAULT_FEE_RATE,\n      ensResolvedAddress: null,\n    }\n\n    this.handleENSResolution = this.handleENSResolution.bind(this);\n    this.renderBanner = this.renderBanner.bind(this);\n    this.renderSubmitButton = this.renderSubmitButton.bind(this);\n    this.renderValueLabel = this.renderValueLabel.bind(this);\n    this.submit = this.submit.bind(this);\n    this.buildBtcRequest = this.buildBtcRequest.bind(this);\n    this.updateBtcFeeRate = this.updateBtcFeeRate.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://blockstream.info/api/fee-estimates')\n    .then((response) => response.json())\n    .then((resp) => {\n      if (resp['1']) { // Expected confirmation in 1 block\n        this.setState({ btcFeeRate: Math.ceil(Number(resp['1'])) })\n      }\n      if (this.props.session) {\n        this.props.session.getBtcWalletData()\n      }\n    })\n    .catch((err) => {\n      console.error(`Error from fetching fee rates: ${err.toString()}`)\n    })\n  }\n\n  //========================================================\n  // STATE MANAGERS\n  //========================================================\n\n  handleENSResolution(err, address) {\n    if (err || address === null)\n      return this.setState({ recipientCheck: false, ensResolvedAddress: null })\n    // If we got an address, stash that under \"ensResolvedAddress\" so as to not\n    // overwrite the text in the display component.\n    return this.setState({ recipientCheck: true, ensResolvedAddress: address })\n  }\n\n  updateRecipient(evt) {\n    const val = evt.target.value;\n    const check = allChecks.BTC.recipient(val);\n    this.setState({ \n      recipient: val,\n      ensResolvedAddress: null,\n      recipientCheck: check, \n    });\n  }\n\n  checkValue(val) {\n    // Verify that it is smaller than the balance\n    const balance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    if (val === '' || val === null || val === undefined)\n      return null;\n    return (Number(balance) >= Number(val));\n  }\n\n  updateValue(evt) {\n    let val = evt.target.value;\n    let numberVal = Number(val);\n    const isZeroPrefixed = val[0] === '0';\n    const isLessThanOne = isZeroPrefixed && val[1] === '.';\n    // Only update state if the value can be converted to a number!\n    if (val === '0') {\n      // Plain zero is fine\n      ;\n    } else if (!isNaN(numberVal)) {\n      // We want to save the string, as it may contain a period\n      // which is necessary for forming decimal numbers\n      // Because we will be saving the string and not the number,\n      // we should make sure we strip out leading zeros for numbers\n      // larger than zero (i.e. 0.4 is good, 01.4 is not)\n      if (isZeroPrefixed && !isLessThanOne) val = val.slice(1);\n    } else if (val === '.') {\n      // If the user is trying to make a decimal value <1, prefix\n      // with a 0\n      val = '0' + val;\n    } else {\n      return;\n    }\n    this.setState({ \n      value: val,\n      valueCheck: this.checkValue(val) \n    });\n  }\n\n  updateBtcFeeRate(value) {\n    this.setState({ btcFeeRate: value })\n  }\n\n  //========================================================\n  // TRANSACTION-RELATED BUILDERS AND HOOKS\n  //========================================================\n  buildBtcRequest() {\n    const req = buildBtcTxReq(this.state.recipient, \n                              this.state.value,\n                              this.props.session.btcUtxos, \n                              this.props.session.addresses['BTC'],  \n                              this.props.session.addresses['BTC_CHANGE'],\n                              this.state.btcFeeRate,\n                              this.state.value === this.calculateMaxValue());\n    if (req.error) {\n      this.setState({ error: req.error });\n      return null;\n    } else if (!req.data) {\n      this.setState({ error: 'Invalid response when building BTC transaction request. '});\n      return null;\n    }\n    return req;\n  }\n\n  submit() {\n    const req = this.buildBtcRequest();\n    if (req) {\n      notification.open({\n        message: \"Waiting for signature...\",\n        key: 'signNotification',\n        description: `We have sent the transaction to your Lattice for signing.\n                      After approval, the transaction will be broadcast.`,\n        duration: 0,\n      });\n      this.setState({ isLoading: true });\n      this.props.session\n        .sign(req)\n        .then((txHash) => {\n          // Start watching this new tx hash for confirmation\n          this.setState({\n            recipient: '',\n            recipientCheck: null,\n            value: null,\n            valueCheck: null,\n            txHash,\n            error: null,\n            isLoading: false\n          })\n        })\n        .catch((err) => {\n          // Display an error banner\n          this.setState({\n            error: err,\n            isLoading: false,\n            txHash: null,\n          });\n          console.error(err)\n        })\n        .finally(() => {\n          notification.close(\"signNotification\");\n        });\n    }\n  }\n\n  //========================================================\n  // HELPERS\n  //========================================================\n\n  getUrl() {\n    return `${constants.BTC_TX_BASE_URL}/${this.state.txHash}`;\n  }\n\n  //========================================================\n  // RENDERERS\n  //========================================================\n\n  renderValueLabelTitle() {\n    return (\n      <p style={{textAlign: 'left'}}>\n        <b>Value</b>\n        <Button type=\"link\"\n                onClick={() => { \n                  this.updateValue({ \n                    target: { \n                      value: this.calculateMaxValue(),\n                    } \n                  }) \n                }}>\n          Max\n        </Button>\n        {this.renderIcon(VALUE_ID)}\n      </p>\n    )\n  }\n\n  renderValueLabel() {\n    const input = (\n      <Input type=\"text\"\n              id={VALUE_ID} \n              value={this.state.value} \n              onChange={this.updateValue.bind(this)}\n      />\n    );\n    return (\n      <Row justify='center'>\n        {this.renderValueLabelTitle()}\n        {input}\n      </Row>\n    );\n  }\n\n  renderRecipientLabel() {\n    return (          \n      <Row justify='center'>  \n        <p style={{textAlign:'left'}}>\n          <b>Recipient</b>\n          &nbsp;&nbsp;&nbsp;{this.renderIcon(RECIPIENT_ID)}\n        </p>\n        <Input type=\"text\" \n                id={RECIPIENT_ID} \n                value={this.state.recipient} \n                onChange={this.updateRecipient.bind(this)}\n        />\n      </Row>\n    )\n  }\n\n  renderIcon(id) {\n    const name = `${id}Check`;\n    const isValid = this.state[name];\n    if (isValid === true) {\n      return (<CheckCircleOutlined style={{color: 'green'}}/>)\n    } else if (isValid === false) {\n      return (<CloseCircleOutlined style={{color: 'red'}}/>)\n    } else {\n      return;\n    }\n  }\n\n  renderBanner() {\n    if (this.state.error) {\n      const description = this.state.error?.message\n        ? this.state.error.message\n        : this.state.error;\n      return (\n        <Alert\n          message=\"Failed to Send Transaction\"\n          description={description}\n          type=\"error\"\n          closable\n          onClose={() => { this.setState({ error: null })}}\n        />\n      )\n    } else if (this.state.txHash) {\n      const desc = this.context.isMobile ? (\n        <p>Transaction signed and broadcast successfully.&nbsp;\n        <a className='lattice-a' target='_blank' rel='noopener noreferrer' href={this.getUrl()}>View</a></p>\n      ) : (\n        <p>\n          Your transaction was signed and broadcast successfully. \n          Please return to your History tab and refresh to see status.\n        </p>\n      )\n      return (\n        <Alert\n          type=\"success\"\n          message=\"Success\"\n          description={desc}\n        />\n      )\n    } else {\n      return;\n    }\n  }\n\n  renderExtra() {\n    return (\n      <div>\n        <Row justify='center'>\n          <b><p>Fee (sat/byte):</p></b>\n        </Row>\n        <Row justify='center'>        \n          <InputNumber\n            min={1}\n            max={100}\n            onChange={this.updateBtcFeeRate}\n            value={this.state.btcFeeRate}\n          />\n        </Row>\n      </div>\n    )\n  }\n\n  calculateMaxValue() {\n    const balance = this.props.session.getBtcBalance();\n    const utxos = this.props.session.getBtcUtxos();\n    // To spend all BTC, get the size of all UTXOs and calculate the fee required\n    const txBytes = getBtcNumTxBytes(utxos.length);\n    const feeSat = Math.floor(this.state.btcFeeRate * txBytes);\n    // @ts-expect-error\n    return Math.max(((balance - feeSat) / constants.SATS_TO_BTC).toFixed(8), 0);\n  }\n\n  renderSubmitButton() {\n    // If all checks have passed, display the button\n    const isValidReq = (\n      (true === this.state.valueCheck) &&\n      (allChecks.BTC.full(this.state) || this.state.ensResolvedAddress !== null)\n    );\n\n    if (this.state.isLoading) {\n      return (\n        <Button type=\"primary\"\n                style={{ margin: '30px 0 0 0'}}\n                loading>\n          Waiting...\n        </Button>\n      )\n    } else if (isValidReq) {\n      return (\n        <Button type=\"primary\" \n                onClick={this.submit} \n                style={{ margin: '30px 0 0 0'}}>\n          Send\n        </Button>\n      )\n    } else {\n      return (\n        <Button type=\"primary\"\n                style={{ margin: '30px 0 0 0'}}\n                disabled>\n          Send\n        </Button>\n      )\n    }\n  }\n\n  renderBalance() {\n    let balance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    return (\n      <Row justify='center' style={{margin: \"0 0 20px 0\"}}>\n        <Statistic title=\"Balance\" value={`${balance} BTC`} />\n      </Row>\n    )\n  }\n\n  renderCard() {\n    const hasAddressesSlot = this.props.session.addresses.BTC;\n    const hasAddresses =  hasAddressesSlot ? \n                          this.props.session.addresses.BTC.length > 0 : \n                          false;\n    if (hasAddresses) {\n      return (\n        <div>\n          {this.renderBalance()}\n          <div>\n            {this.renderRecipientLabel()}\n          </div>\n          <div style={{margin: \"20px 0 0 0\"}}>\n            {this.renderValueLabel()}\n          </div>\n          <div style={{margin: \"20px 0 0 0\"}}>\n            {this.renderExtra()}\n          </div>\n          {this.renderSubmitButton()}\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No addresses found from your Lattice. If you have your wallet setup, please try logging out and reconnecting.</p>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderBanner()}\n        <Card title={'Send BTC'} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />    )\n  }\n}\n\nexport default Send\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Row, Input, Empty } from 'antd'\nimport { CopyOutlined } from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { validateBtcAddr } from '../../util/helpers'\nimport { AppContext } from '../../store/AppContext';\nimport  { QRCodeSVG } from 'qrcode.react';\nconst { Search, TextArea } = Input;\nconst SEARCH_ID = \"address-data\";\n\nclass Receive extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: null,\n      windowWidth: document.getElementById('main-content-inner')?.offsetWidth,\n    }\n\n    this.updateWidth = this.updateWidth.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateDisplayAddress();\n    if (this.props.session) {\n      this.props.session.getBtcWalletData()\n    }\n    window.addEventListener('resize', this.updateWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  updateWidth() {\n    this.setState({ windowWidth:  document.getElementById('main-content-inner')?.offsetWidth });\n  }\n\n  updateDisplayAddress() {\n    const displayAddr = this.props.session.getBtcDisplayAddress();\n    if (displayAddr) this.setState({ address:  displayAddr });\n  }\n\n  copyAddress() {\n    const copy = document.getElementById(SEARCH_ID);\n    //@ts-expect-error\n    copy.select();\n    document.execCommand(\"copy\")\n  }\n\n\n  renderAddrBox() {\n    if (this.context.isMobile) {\n      return (\n        <div>\n          <TextArea id={SEARCH_ID}\n                    value={this.state.address}\n                    autoSize={{minRows: 1, maxRows: 3}}\n                    style={{margin: \"30px 0 0 0\", \"textAlign\": \"center\"}}/>\n          <Button type=\"primary\"\n                  style={{margin: \"20px 0 0 0\"}}\n                  onClick={this.copyAddress}>\n            Copy <CopyOutlined/>\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n         <Search type=\"text\" \n                  id={SEARCH_ID} \n                  value={this.state.address} \n                  enterButton={<CopyOutlined/>}\n                  onSearch={this.copyAddress}\n                  style={{margin: \"30px 0 0 0\", \"textAlign\": \"center\"}}\n          />\n      );\n    }\n  }\n\n  renderCard() {\n    if (this.state.address) {\n      // Sanity check on BTC address checksum\n      if (!validateBtcAddr(this.state.address))\n        return;\n      const cardW = document.getElementById(\"receive-card\")?.offsetWidth;\n      const w = Math.min(300, 0.8 * cardW);\n      return (\n        <div>\n          <Row justify='center'>\n            <QRCodeSVG value={this.state.address} \n                    size={w}\n                    style={{margin: \"30px 0 0 0\"}}\n            />\n          </Row>\n          <Row justify='center'>\n            {this.renderAddrBox()}\n          </Row>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No addresses found</p>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const content = (\n      <center>\n        <Card title={'Receive BTC'} bordered={true} id=\"receive-card\">\n          <center>\n            {this.renderCard()}\n          </center>\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Receive"],"sourceRoot":""}