{"version":3,"sources":["util/helpers.ts","components/main.tsx","components/validateSig.tsx","util/storageSession.ts","sdk/sdkSession.ts","util/localStorage.ts","store/AppContext.tsx","hooks/useRecords.tsx","App.tsx","index.tsx","components/formatting/pageContent.tsx","components/NameEditor.tsx","components/connect.tsx","components/pair.tsx","components/permissions.tsx","components/settings.tsx","util/sendErrorNotification.tsx","hooks/useAddresses.tsx","components/AddAddressesButton.tsx","components/AddAddressesModal.tsx","components/AddressTable.tsx","util/addresses.ts","util/csv.ts","components/ExportAddressesButton.tsx","components/ImportAddressesButton.tsx","components/ImportAddressesModal.tsx","components/SyncAddressesButton.tsx","components/AddressTagsPage.tsx","components/LandingCard.tsx","components/landing.tsx","hooks/useFeature.tsx","components/loading.tsx","components/error.tsx","components/btc-wallet/wallet.tsx","util/sendChecks.ts","components/btc-wallet/send.tsx","components/btc-wallet/receive.tsx"],"names":["bs58check","require","bech32","HARDENED_OFFSET","constants","DEFAULT_APP_NAME","ENV","process","REACT_APP_ENV","BASE_SIGNING_URL","REACT_APP_BASE_SIGNING_URL","BTC_PROD_DATA_API","BTC_BROADCAST_ENDPOINT","ASYNC_SDK_TIMEOUT","ADDRESSES_PER_PAGE","ADDRESS_RECORD_TYPE","CONTRACTS_PER_PAGE","SHORT_TIMEOUT","BTC_COIN","parseInt","REACT_APP_BTC_COIN","SATS_TO_BTC","Math","pow","BTC_MAIN_GAP_LIMIT","BTC_CHANGE_GAP_LIMIT","BTC_ADDR_BLOCK_LEN","BTC_CHANGE_ADDR_BLOCK_LEN","BTC_DEFAULT_FEE_RATE","REACT_APP_BTC_DEFAULT_FEE_RATE","BTC_TX_BASE_URL","REACT_APP_BTC_TX_BASE_URL","PAGE_SIZE","CONTRACT_PAGE_SIZE","LOST_PAIRING_ERR","LOST_PAIRING_MSG","BTC_TESTNET","REACT_APP_BTC_TESTNET","KEYRING_LOGOUT_MS","KEYRING_DATA_PATH","ABI_PACK_URL","LATTICE_CERT_SIGNER","REACT_APP_LATTICE_CERT_SIGNER","CONTRACTS_HELP_LINK","TAGS_HELP_LINK","PERMISSIONS_HELP_LINK","POAP_CLAIM_REMOTE_URL","BTC_WALLET_STORAGE_KEY","BTC_PURPOSE_NONE","BTC_PURPOSE_NONE_STR","BTC_PURPOSE_LEGACY","BTC_PURPOSE_LEGACY_STR","BTC_PURPOSE_WRAPPED_SEGWIT","BTC_PURPOSE_WRAPPED_SEGWIT_STR","BTC_PURPOSE_SEGWIT","BTC_PURPOSE_SEGWIT_STR","BTC_SEGWIT_NATIVE_V0_PREFIX","BTC_LEGACY_VERSION","BTC_WRAPPED_SEGWIT_VERSION","RATE_LIMIT","THROTTLE_RATE_LIMIT","GET_ABI_URL","DEFAULT_CONTRACT_NETWORK","CONTRACT_NETWORKS","ethereum","label","url","baseUrl","apiRoute","arbitrum","polygon","optimism","binance","avalanche","PAGE_KEYS","LANDING","ADDRESS_TAGS","SETTINGS","WALLET","SEND","RECEIVE","fetchJSON","opts","cb","fetch","then","response","json","resp","catch","err","resolveAfter","delay","Promise","ok","setTimeout","throttledFetchJSON","fn","wait","resolve","args","res","throttle","_fetchBtcUtxos","addresses","utxos","offset","length","ADDRS_PER_CALL","MAX_UTOXS_RET","addrsToCheck","slice","i","data","unspent_outputs","forEach","u","confirmations","push","id","tx_hash_big_endian","vout","tx_output_n","value","address","_blockchainDotComScriptToAddr","script","_fetchBtcUtxosTestnet","pop","BTC_DEV_DATA_API","status","confirmed","txid","fetchBtcUtxos","addrsCopy","JSON","parse","stringify","_fetchBtcTxs","txs","isFirstCall","fetchFn","isSingleAddr","MAX_TXS_RET","txsAdded","t","ftx","timestamp","time","block_index","hash","fee","inputs","outputs","input","addr","prev_out","out","output","every","_tx","_fetchBtcTxsTestnet","lastSeenId","formattedTxs","confirmedCount","block_time","vin","prevout","scriptpubkey_address","concat","fetchBtcTxs","fetchBtcPrice","last_trade_price","broadcastBtcTx","rawTx","method","body","text","harden","x","_calcBtcTxNumInputs","feeRate","inputIdx","currentValue","numInputs","numBytes","getBtcNumTxBytes","floor","_scriptStr","purpose","getBtcPurpose","bech32Prefix","pubkeyhash","Buffer","from","words","toWords","unshift","encode","version","localSettings","localStorage","getSettings","btcPurpose","inputSize","outputSize","inputWitnessSize","vFactor","buildBtcTxReq","recipient","btcValue","addrs","changeAddrs","isFullSpend","error","satValue","round","Number","bytesUsed","BASE_SIGNER_PATH","prevOuts","utxo","signerPath","indexOf","prevOut","txHash","index","req","changePath","currency","validateBtcAddr","decode","e","toHexStr","bn","s","toString","base","filterUniqueObjects","objs","keys","filtered","reverse","obj","isDup","fobj","matchedKeys","key","Content","Layout","Footer","Sider","LOGIN_PARAM","DEFAULT_PAGE","Main","props","context","keyringName","URLSearchParams","window","location","search","get","state","name","menuItem","session","collapsed","msg","loading","pendingMsg","waiting","onCancel","deviceID","password","lastUpdated","Date","windowWidth","innerWidth","walletIsExternal","openedByKeyring","hwCheck","handleMenuChange","bind","handleLogout","handleKeyringOpener","syncActiveWalletState","cancelConnect","connectSession","handlePair","fetchBtcData","setError","refreshWallets","handlePageTurn","retry","updateWidth","addEventListener","this","isMobile","setState","params","forceLogin","onload","prevKeyringLogin","getKeyringItem","keyringTimeoutBoundary","getTime","lastLogin","connect","removeKeyringItem","getLogin","removeEventListener","updates","settings","setSession","SDKSession","client","pair","unwait","isConnected","setKeyringItem","endpoint","customEndpoint","opener","postMessage","close","enc","href","page","setPage","stateUpdate","disconnect","removeLogin","removeAddresses","handleLostPairing","showLoading","isPaired","setLogin","returnKeyringData","message","isRecursion","fetchBtcAddresses","newAddrCounts","console","regular","change","clearUtxos","fetchBtcStateData","bypassRefresh","activeWallet","getActiveWallet","isExternal","external","shouldRefresh","hideWallet","collapsedWidth","theme","mode","onSelect","items","icon","children","getMenuItems","selectedKeys","renderMenu","onClick","type","size","style","backgroundColor","marginRight","className","target","rel","alt","src","height","extra","walletTag","ghost","title","renderHeaderText","retryCb","content","refreshData","pageTurnCb","goToPage","hasActiveWallet","spin","renderPage","submit","hide","submitCb","setKeyringName","errMsg","textAlign","color","getFullYear","margin","renderContent","minHeight","renderHeader","renderSidebar","renderErrorHeader","renderPageContainer","renderFooter","React","Component","contextType","AppContext","ReactCrypto","default","EC","ec","ValidateSig","isLoading","poapToClaim","isValid","validateSig","getMessageForPoap","getPreimage","toLocaleLowerCase","replace","signer","sig","curve","crypto","msgHash","createHash","update","digest","keyFromPublic","verify","_certData","PREIMAGE_LEN","start","preimage","METADATA_LEN","pubkey","_sig","cert","getCert","_validate","validateCert","finally","result","subTitle","spanLength","spanOffset","span","bordered","renderResult","shouldShowClaimCard","marginTop","disabled","claimPoap","paddingTop","StorageSession","device_id","pass","store","getRootStore","o","Array","isArray","newData","oldData","isObject","Object","newKey","updateBranch","wallet_uid","k","setRootStore","stateUpdateHandler","storageSession","btcTxs","btcUtxos","lastFetchedBtcData","btcPrice","getBtcWalletData","saveBtcWalletData","lastUsed","_getLastUsedBtcAddrIdx","BTC","newPage","driedAddrs","hasBTCAddrs","hasBTCChangeAddrs","BTC_CHANGE","BTC_PURPOSE","allAddrs","rehydratedAddrs","walletData","dryAddresses","uid","save","getWalletData","purposeSpecificData","rehydrateAddresses","pw","_triedLocal","tmpTimeout","_genPrivKey","Client","privKey","timeout","skipRetryOnWrongWallet","warn","_tryConnect","log","prevWallet","resetStateData","sign","tx","Error","balance","isChange","totalFetched","lastUsedIdx","currentAddrs","GAP_LIMIT","targetIdx","maxToFetch","nToFetch","min","changeIdx","startPath","n","skipCache","_getAddresses","_txs","_utxos","now","newTxs","_processBtcTxs","newUtxos","sort","a","b","getAddresses","coin","maxUsed","processedTxs","incoming","inputSum","internalOutputSum","externalOutputSum","sortedTxs","LOGIN_ID_STORAGE_KEY","LOGIN_PASSWORD_STORAGE_KEY","ADDRESSES_STORAGE_KEY","CONTRACTS_STORAGE_KEY","CONTRACT_PACKS_STORAGE_KEY","ROOT_STORE","REACT_APP_ROOT_STORE","getItem","setItem","removeItem","getRootStoreItem","setRootStoreItem","getKeyring","omit","getLoginId","setLoginId","removeLoginId","getLoginPassword","setLoginPassword","removeLoginPassword","getDeviceIndexedItem","deviceId","setDeviceIndexedItem","removeDeviceIndexedItem","exports","removeRootStore","removeRootStoreItem","setSettings","setKeyring","renameKeyringItem","oldKey","item","setAddresses","getContracts","setContracts","removeContracts","getContractPacks","setContractPacks","removeContractPacks","createContext","undefined","AppContextProvider","overrides","useState","setIsMobile","isLoadingAddresses","setIsLoadingAddresses","defaultValue","records","setRecords","recordsToAdd","recordsInState","unionBy","recordsToRemove","differenceBy","useRecords","addAddressesToState","removeAddressesFromState","resetAddressesInState","defaultContext","useEffect","windowIsMobileWidth","Provider","App","container","document","getElementById","createRoot","render","PageContent","justify","NameEditor","setName","isEditing","setIsEditing","isHovered","setIsHovered","Form","useForm","form","layout","onFinish","justifyContent","Item","initialValue","rules","required","resetFields","htmlType","EditOutlined","fontSize","onMouseEnter","onMouseLeave","Connect","modal","showSettings","handleCancel","handleSubmit","renderMsg","showModal","focus","getFieldDecorator","placeholder","ref","width","Password","onPressEnter","renderConnectButton","footer","visible","onOk","hideModal","inModal","renderSetupInfo","closable","spanWidth","tooLong","renderModal","LinkOutlined","DesktopOutlined","renderForm","Pair","code","toUpperCase","clientWidth","w","getBoxWidth","getBoxFontHeight","onChange","handleUpdate","BN","HOURS","assets","ETH","decimals","Settings","keyring","getBtcPurposeName","reload","evt","updateCustomEndpoint","Group","handleChangeBitcoinVersionSetting","direction","resetState","WarningOutlined","cols","dataIndex","record","removeKeyring","toLowerCase","Panel","header","dataSource","columns","renderKeyringsSetting","renderCustomEndpointSetting","renderBitcoinVersionSetting","renderDebugSettings","renderCard","sendErrorNotification","description","onClose","btn","danger","notification","open","placement","useAddresses","useContext","fetchAddresses","useCallback","fetched","getKvRecords","total","addAddresses","addressesToAdd","recordsList","_","chain","chunk","map","addrChunk","keyBy","mapValues","reject","addKvRecords","caseSensitive","selectedAddresses","ids","r","isEmpty","removeKvRecords","AddAddressesButton","PlusOutlined","AddAddressesModal","isModalVisible","setIsModalVisible","initialAddresses","maskClosable","destroyOnClose","validateFields","onFinishFailed","autoComplete","preserve","List","fields","add","remove","restField","display","flexDirection","marginBottom","flexGrow","validateTrigger","max","validator","rule","some","getFieldsValue","filter","addonBefore","val","MinusSquareFilled","marginLeft","block","AddressTable","setInput","filteredAddresses","setFilteredAddresses","setSelectedAddresses","fuzzysort","go","_addresses","intersectionBy","allowClear","tableLayout","spinning","tip","indicator","LoadingOutlined","pagination","position","pageSize","defaultCurrent","showSizeChanger","rowSelection","__","_selectedAddresses","onSelectAll","selectedRowKeys","Column","defaultSortOrder","sorter","localeCompare","getAddressKey","Name","Key","getAddressVal","Address","Val","ExportAddressesButton","ExportOutlined","csvURL","csv","addressList","Papa","unparse","addressesToCsvString","csvData","Blob","URL","createObjectURL","tempLink","createElement","setAttribute","click","ImportAddressesButton","ImportOutlined","ImportAddressesModal","setIsAddAddressesModalVisible","setInitialAddresses","file","setFile","fileReader","FileReader","handleOnSubmit","preventDefault","event","csvStringToAddresses","readAsText","accept","files","SyncAddressesButton","SyncOutlined","AddressTagsPage","isAddAddressesModalVisible","isImportAddressesModalVisible","setIsImportAddressesModalVisible","LandingCard","link","flexBasis","hoverable","Landing","getFwVersion","fix","minor","major","fromEntries","entries","CAN_VIEW_CONTRACTS","USES_AUTO_ABI","_fix","_minor","_major","useFeature","headStyle","gap","flexWrap","alignItems","maxWidth","TagsOutlined","faBtc","TwitterOutlined","YoutubeOutlined","InfoCircleOutlined","CreditCardOutlined","padding","showIcon","Loading","keyPressListener","btnMsg","Wallet","offsetWidth","maxChars","getInnerWidth","align","getDateDiffStr","Meta","avatar","subtitle","ensureTrimmedText","itemMeta","ArrowDownOutlined","ArrowUpOutlined","elapsed","timeType","elapsedSec","getBtcTxs","pending","ClockCircleOutlined","itemLayout","renderItem","renderListItem","btcBalance","getBtcBalance","precision","getPage","CaretLeftOutlined","CaretRightOutlined","renderLastUpdatedTag","ReloadOutlined","renderList","renderPages","renderStartCard","ts","hour","day","week","month","year","diff","allChecks","full","fullCheck","checkEthRecipient","checkNumericValue","recipientCheck","isPrefixed","correctLength","num","isNaN","RECIPIENT_ID","VALUE_ID","Send","valueCheck","btcFeeRate","ensResolvedAddress","handleENSResolution","renderBanner","renderSubmitButton","renderValueLabel","buildBtcRequest","updateBtcFeeRate","ceil","check","numberVal","isZeroPrefixed","isLessThanOne","checkValue","calculateMaxValue","duration","updateValue","renderIcon","renderValueLabelTitle","updateRecipient","CheckCircleOutlined","CloseCircleOutlined","desc","getUrl","getBtcUtxos","txBytes","feeSat","toFixed","isValidReq","renderBalance","renderRecipientLabel","renderExtra","image","Empty","PRESENTED_IMAGE_SIMPLE","Search","Input","TextArea","SEARCH_ID","Receive","updateDisplayAddress","displayAddr","getBtcDisplayAddress","select","execCommand","autoSize","minRows","maxRows","copyAddress","CopyOutlined","enterButton","onSearch","cardW","renderAddrBox"],"mappings":"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","file":"static/js/main.1e188fb7.chunk.js","sourcesContent":["\nimport localStorage from \"./localStorage\";\n\nconst bs58check = require('bs58check');\nconst bech32 = require('bech32').bech32;\nconst HARDENED_OFFSET = 0x80000000;\nexport const constants = {\n    DEFAULT_APP_NAME: 'Lattice Manager',\n    ENV: process.env.REACT_APP_ENV || 'prod',\n    BASE_SIGNING_URL: process.env.REACT_APP_BASE_SIGNING_URL || 'https://signing.gridpl.us',\n    BTC_PROD_DATA_API: 'https://blockchain.info',\n    BTC_BROADCAST_ENDPOINT: 'https://blockstream.info/api/tx',\n    HARDENED_OFFSET,\n    ASYNC_SDK_TIMEOUT: 60000,\n    ADDRESSES_PER_PAGE: 10,\n    ADDRESS_RECORD_TYPE: 0,\n    CONTRACTS_PER_PAGE: 10,\n    SHORT_TIMEOUT: 30000,\n    BTC_COIN: parseInt(process.env.REACT_APP_BTC_COIN) || HARDENED_OFFSET,\n    SATS_TO_BTC: Math.pow(10, 8),\n    BTC_MAIN_GAP_LIMIT: 20,\n    BTC_CHANGE_GAP_LIMIT: 1,\n    BTC_ADDR_BLOCK_LEN: 10,\n    BTC_CHANGE_ADDR_BLOCK_LEN: 1,\n    BTC_DEFAULT_FEE_RATE: process.env.REACT_APP_BTC_DEFAULT_FEE_RATE || 10, // 10 sat/byte\n    BTC_TX_BASE_URL: process.env.REACT_APP_BTC_TX_BASE_URL || 'https://www.blockchain.com/btc/tx',\n    PAGE_SIZE: 20, // 20 transactions per requested page, per `gridplus-cloud-services`\n    CONTRACT_PAGE_SIZE: 6,\n    LOST_PAIRING_ERR: \"NOT_PAIRED\",\n    LOST_PAIRING_MSG: \"Cannot find Lattice connection. Please re-connect.\",\n    BTC_TESTNET: process.env.REACT_APP_BTC_TESTNET || null,\n    KEYRING_LOGOUT_MS: parseInt(process.env.KEYRING_LOGOUT_MS) || 2592000000, // default 30 days\n    KEYRING_DATA_PATH: 'gridplus_web_wallet_keyring_logins', // item in localStorage\n    ABI_PACK_URL: \"https://gridplus.github.io/abi-pack-framework\",\n    LATTICE_CERT_SIGNER: process.env.REACT_APP_LATTICE_CERT_SIGNER || '0477816e8e83bb17c4309cc2e5aa134c573a5943154940095a423149f7cc0384ad52d33f1b4cd89c967bf211c039202df3a7899cb7543de4738c96a81cfde4b117',\n    CONTRACTS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/use-ethereum-smart-contract-abi-function-definitions',\n    TAGS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/address-tags',\n    PERMISSIONS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/how-to-set-and-use-spending-limits',\n    POAP_CLAIM_REMOTE_URL: 'https://us-central1-lattice-poap.cloudfunctions.net/validate',\n    BTC_WALLET_STORAGE_KEY: 'btc_wallet',\n    BTC_PURPOSE_NONE: -1,\n    BTC_PURPOSE_NONE_STR: 'Hide BTC Wallet',\n    BTC_PURPOSE_LEGACY: HARDENED_OFFSET + 44,\n    BTC_PURPOSE_LEGACY_STR: 'Legacy (1)',\n    BTC_PURPOSE_WRAPPED_SEGWIT: HARDENED_OFFSET + 49,\n    BTC_PURPOSE_WRAPPED_SEGWIT_STR: 'Wrapped Segwit (3)',\n    BTC_PURPOSE_SEGWIT: HARDENED_OFFSET + 84,\n    BTC_PURPOSE_SEGWIT_STR: 'Segwit (bc1)',\n    BTC_SEGWIT_NATIVE_V0_PREFIX: 'bc',\n    BTC_LEGACY_VERSION: 0x00,\n    BTC_WRAPPED_SEGWIT_VERSION: 0x05,\n    RATE_LIMIT: 2000, // 2s between requests\n    THROTTLE_RATE_LIMIT: 5000, // 5s between requests\n    GET_ABI_URL: 'https://api.etherscan.io/api?module=contract&action=getabi&address=',\n    DEFAULT_CONTRACT_NETWORK: 'ethereum',\n    CONTRACT_NETWORKS: {\n        ethereum: {\n          label: \"Ethereum\",\n          url: \"https://etherscan.io\",\n          baseUrl: \"https://api.etherscan.io\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        arbitrum: {\n            label: \"Arbitrum\",\n            url: \"https://arbiscan.io\",\n            baseUrl: \"https://api.arbiscan.io\",\n            apiRoute: \"api?module=contract&action=getabi&address=\",\n          },\n        polygon: {\n          label: \"Polygon\",\n          url: \"https://polygonscan.com\",\n          baseUrl: \"https://api.polygonscan.com\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        optimism: {\n            label: \"Optimism\",\n            url: \"https://optimistic.etherscan.io\",\n            baseUrl: \"https://api-optimistic.etherscan.io\",\n            apiRoute: \"api?module=contract&action=getabi&address=\",\n          },\n        binance: {\n          label: \"Binance\",\n          url: \"https://bscscan.com/\",\n          baseUrl: \"https://api.bscscan.com\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        avalanche: {\n          label: \"Avalanche\",\n          url: \"https://snowtrace.io\",\n          baseUrl: \"https://api.snowtrace.io\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n      },\n      PAGE_KEYS: {\n        LANDING: 'LANDING',\n        ADDRESS_TAGS: 'ADDRESS_TAGS:',\n        SETTINGS: 'SETTINGS',\n        WALLET: 'WALLET',\n        SEND: 'SEND',\n        RECEIVE: 'RECEIVE',\n      }\n};\n\n//--------------------------------------------\n// CHAIN DATA SYNCING HELPERS\n//--------------------------------------------\nfunction fetchJSON(url, opts, cb) {\n    fetch(url, opts)\n    .then((response) => response.json())\n    .then((resp) => cb(null, resp))\n    .catch((err) => cb(err))\n}\n\nconst resolveAfter = delay => new Promise(ok => setTimeout(ok, delay));\n\nfunction throttle(fn, delay) {\n    let wait: any = Promise.resolve();\n    return (...args) => {\n      const res = wait.then(() => fn(...args));\n      wait = wait.then(() => resolveAfter(delay));\n      return res;\n    };\n  }\n\nconst throttledFetchJSON = throttle(fetchJSON, constants.THROTTLE_RATE_LIMIT);\n\n//====== UTXOS ==================\n// For mainnet (production env) we can bulk request data from the blockchain.com API\nfunction _fetchBtcUtxos(addresses, cb, utxos=[], offset=0) {\n    if (addresses.length === 0) {\n        // No more addresses left to check. We are done.\n        return cb(null, utxos);\n    }\n    const ADDRS_PER_CALL = 20;\n    const MAX_UTOXS_RET = 50;\n    const addrsToCheck = addresses.slice(0, ADDRS_PER_CALL);\n    let url = `${constants.BTC_PROD_DATA_API}/unspent?active=`;\n    for (let i = 0; i < addrsToCheck.length; i++) {\n        if (i === 0) {\n            url = `${url}${addrsToCheck[i]}`\n        } else {\n            url = `${url}|${addrsToCheck[i]}`\n        }\n    }\n    url = `${url}&limit=${MAX_UTOXS_RET}&confirmations=1`;\n    if (offset > 0) {\n        // If this is a follow up, fetch txs after an offset\n        url = `${url}&offset=${offset}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err);\n        // Add confirmed UTXOs\n        data.unspent_outputs.forEach((u) => {\n            if (u.confirmations > 0) {\n                utxos.push({\n                    id: u.tx_hash_big_endian,\n                    vout: u.tx_output_n,\n                    value: u.value,\n                    address: _blockchainDotComScriptToAddr(u.script),\n                })\n            }\n        })\n        // Determine if we need to recurse on this set of addresses\n        if (data.unspent_outputs.length >= MAX_UTOXS_RET) {\n            return setTimeout(() => {\n                _fetchBtcUtxos(addresses, cb, utxos, offset+MAX_UTOXS_RET);\n            }, constants.RATE_LIMIT);\n        }\n        // Otherwise we are done with these addresses. Clip them and recurse.\n        addresses = addresses.slice(ADDRS_PER_CALL);\n        setTimeout(() => {\n            _fetchBtcUtxos(addresses, cb, utxos, 0);\n        }, constants.RATE_LIMIT);\n    })\n}\n\n// For testnet we cannot use blockchain.com - we have to request stuff from each\n// address individually.\nfunction _fetchBtcUtxosTestnet(addresses, cb, utxos=[]) {\n    const address = addresses.pop()\n    //@ts-expect-error\n    const url = `${constants.BTC_DEV_DATA_API}/address/${address}/utxo`;\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        data.forEach((u) => {\n            // Add confirmed UTXOs\n            if (u.status.confirmed) {\n                utxos.push({\n                    id: u.txid,\n                    vout: u.vout,\n                    value: u.value,\n                    address,\n                })\n            }\n        })\n        if (addresses.length === 0) {\n            return cb(null, utxos);\n        }\n        setTimeout(() => {\n            _fetchBtcUtxosTestnet(addresses, cb, utxos)\n        }, constants.RATE_LIMIT)\n    })\n}\n\nexport function fetchBtcUtxos(addresses, cb) {\n    if (!addresses)\n        return cb('Cannot fetch UTXOs - bad input');\n    else if (addresses.length < 1)\n        return cb(null, []);\n    const addrsCopy = JSON.parse(JSON.stringify(addresses));\n    //@ts-expect-error\n    const f = constants.BTC_DEV_DATA_API ? _fetchBtcUtxosTestnet : _fetchBtcUtxos;\n    f(addrsCopy, cb);\n}\n//====== END UTXOS ==================\n\n//====== TXS ==================\n// For mainnet (production env) we can bulk request data from the blockchain.com API\nfunction _fetchBtcTxs(addresses, txs, cb, offset=0, isFirstCall=true) {\n    if (addresses.length === 0) {\n        // No more addresses left to check. We are done.\n        return cb(null, txs);\n    }\n\n    let url = `${constants.BTC_PROD_DATA_API}/multiaddr?active=`;\n    let fetchFn = fetchJSON\n    const isSingleAddr = isFirstCall && addresses.length === 1;\n    if (isSingleAddr) {\n        // Edge case when getting transactions from the blockchain.com API with\n        // only one address -- it appears when you call multiaddr with only one\n        // address you get only the output(s) associated with that one address,\n        // but if you call with multiple addresses that is no longer a problem.\n        // See: https://www.blockchain.com/btc/tx/ffc83686c911bcf7aa31a3d3ca014bae3b1044b2ec280c877758aa6b384cde0b\n        // 1. https://blockchain.info/rawaddr/3BrvBeRy8qMijfZHzo8VJ77gdL1W9EvgHj\n        // 2. https://blockchain.info/multiaddr?active=3C8BhX4CGeyH3nXrYqRL89jvpakTPW1z8k|3BrvBeRy8qMijfZHzo8VJ77gdL1W9EvgHj\n        url = `${constants.BTC_PROD_DATA_API}/rawaddr/`\n    }\n    const ADDRS_PER_CALL = 20;\n    const MAX_TXS_RET = 50;\n    const addrsToCheck = addresses.slice(0, ADDRS_PER_CALL);\n    for (let i = 0; i < addrsToCheck.length; i++) {\n        if (i === 0) {\n            url = `${url}${addrsToCheck[i]}`\n        } else {\n            url = `${url}|${addrsToCheck[i]}`\n        }\n    }\n    if (isSingleAddr) {\n        url = `${url}?limit=${MAX_TXS_RET}`;\n        fetchFn = throttledFetchJSON\n    } else {\n        url = `${url}&n=${MAX_TXS_RET}`;\n    }\n    if (offset > 0) {\n        // If this is a follow up, fetch txs after an offset\n        url = `${url}&offset=${offset}`\n    }\n    fetchFn(url, null, (err, data) => {\n        if (err)\n            return cb(err);\n        // Add the new txs\n        let txsAdded = 0;\n        data.txs.forEach((t) => {\n            const ftx = {\n                timestamp: t.time * 1000,\n                confirmed: !!t.block_index,\n                id: t.hash,\n                fee: t.fee,\n                inputs: [],\n                outputs: [],\n            };\n            t.inputs.forEach((input) => {\n                ftx.inputs.push({\n                    addr: input.prev_out.addr,\n                    value: input.prev_out.value,\n                })\n            })\n            t.out.forEach((output) => {\n                ftx.outputs.push({\n                    addr: output.addr,\n                    value: output.value,\n                })\n            })\n            if (!ftx.confirmed) {\n                ftx.timestamp = -1;\n            }\n\n            // Only add the transaction if its hash is not already in the array.\n            // NOTE: There may be an edge case. I noticed in one case we got\n            // a result saying `vout_sz=2` but which only had one output in its array...\n            let shouldInclude = txs.every(_tx => _tx.id !== ftx.id);\n            if (shouldInclude) {\n                txs.push(ftx);\n                txsAdded += 1;\n            }\n        })\n        // Determine if we need to recurse on this set of addresses\n        if (txsAdded >= MAX_TXS_RET) {\n            return setTimeout(() => {\n                _fetchBtcTxs(addresses, txs, cb, offset+MAX_TXS_RET, false);\n            }, constants.RATE_LIMIT);\n        }\n        // Otherwise we are done with these addresses. Clip them and recurse.\n        addresses = addresses.slice(ADDRS_PER_CALL);\n        setTimeout(() => {\n            _fetchBtcTxs(addresses, txs, cb, 0, false);\n        }, constants.RATE_LIMIT);\n    })\n}\n\n// For testnet we cannot use blockchain.com - we have to request stuff from each\n// address individually.\nfunction _fetchBtcTxsTestnet(addresses, txs, cb, lastSeenId=null) {\n    const address = addresses.pop()\n    //@ts-expect-error\n    let url = `${constants.BTC_DEV_DATA_API}/address/${address}/txs`;\n    if (lastSeenId) {\n        url = `${url}/chain/${lastSeenId}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        const formattedTxs: any[] = [];\n        let confirmedCount = 0;\n        data.forEach((t) => {\n            const ftx = {\n                timestamp: t.status.block_time * 1000,\n                confirmed: t.status.confirmed,\n                id: t.txid,\n                fee: t.fee,\n                inputs: [],\n                outputs: [],                \n            }\n            t.vin.forEach((input) => {\n                ftx.inputs.push({\n                    addr: input.prevout.scriptpubkey_address,\n                    value: input.prevout.value\n                })\n            })\n            t.vout.forEach((output) => {\n                ftx.outputs.push({\n                    addr: output.scriptpubkey_address,\n                    value: output.value\n                })\n            })\n            if (!ftx.confirmed) {\n                ftx.timestamp = -1;\n            }\n            formattedTxs.push(ftx)\n            if (ftx.confirmed) {\n                confirmedCount += 1;\n            }\n\n        })\n        txs = txs.concat(formattedTxs)\n        if (confirmedCount >= 25) {\n            // Blockstream only returns up to 25 confirmed transactions per request\n            // https://github.com/Blockstream/esplora/blob/master/API.md#get-addressaddresstxs\n            // We need to re-request with the last tx\n            addresses.push(address)\n            return _fetchBtcTxsTestnet(addresses, txs, cb, txs[confirmedCount-1].id)\n        }\n        if (addresses.length === 0) {\n            return cb(null, txs);\n        }\n        setTimeout(() => {\n            _fetchBtcTxsTestnet(addresses, txs, cb)\n        }, constants.RATE_LIMIT)\n    })\n}\n\nexport function fetchBtcTxs(addresses, txs, cb) {\n    if (!addresses)\n        return cb('Cannot fetch transactions - bad input');\n    else if (addresses.length < 1)\n        return cb(null, []);\n    const addrsCopy = JSON.parse(JSON.stringify(addresses));\n    //@ts-expect-error\n    const f = constants.BTC_DEV_DATA_API ? _fetchBtcTxsTestnet : _fetchBtcTxs;\n    f(addrsCopy, txs, cb);\n}\n//====== END TXS ==================\n\nexport function fetchBtcPrice(cb) {\n    const url = 'https://api.blockchain.com/v3/exchange/tickers/BTC-USD'\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        else if (!data || !data.last_trade_price)\n            return cb('Invalid price data returned');\n        return cb(null, data.last_trade_price)\n    })\n}\n\nexport function broadcastBtcTx(rawTx, cb) {\n    const opts = {\n        method: 'POST',\n        body: rawTx\n    };\n    fetch(constants.BTC_BROADCAST_ENDPOINT, opts)\n    .then((response) => response.text())\n    .then((resp) => cb(null, resp))\n    .catch((err) => cb(err))\n}\n//--------------------------------------------\n// END CHAIN DATA SYNCING HELPERS\n//--------------------------------------------\n\n//--------------------------------------------\n// OTHER HELPERS\n//--------------------------------------------\nexport function harden(x) {\n  return x + HARDENED_OFFSET;\n}\n\n// Determine how many inputs (utxos) need to be included in a transaction\n// given the desired value and fee rate\n// Returns the number of inputs to include or -1 if there isn't enough\n// value in the inputs provided to cover value + fee\nfunction _calcBtcTxNumInputs(utxos, value, feeRate, inputIdx=0, currentValue=0) {\n    if (inputIdx >= utxos.length) {\n        return -1; // indicates error\n    }\n    currentValue += utxos[inputIdx].value;\n    const numInputs = inputIdx + 1;\n    const numBytes = getBtcNumTxBytes(numInputs);\n    const fee = Math.floor(feeRate * numBytes);\n    if (currentValue >= (value + fee)) {\n        return numInputs;\n    }\n    inputIdx = numInputs;\n    return _calcBtcTxNumInputs(utxos, value, feeRate, inputIdx, currentValue);\n}\n\n// Convert a script from blockchain.com's API into an address\n// For some reason, they only return the script in the UTXO object.\n// We need to convert the script to a an address.\n// Since we know the purpose, we know the format of the address,\n// so we can slice out the pubkeyhash from the script and convert.\nfunction _blockchainDotComScriptToAddr(_scriptStr) {\n    const purpose = getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n        const bech32Prefix = constants.BTC_SEGWIT_NATIVE_V0_PREFIX;\n        const bech32Version = 0; // Only v0 currently supported\n        // Script: |OP_0|0x20|pubkeyhash|\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(-20)\n        const words = bech32.toWords(pubkeyhash);\n        words.unshift(bech32Version);\n        return bech32.encode(bech32Prefix, words);\n    } else if (purpose === constants.BTC_PURPOSE_WRAPPED_SEGWIT) {\n        const version = constants.BTC_WRAPPED_SEGWIT_VERSION;\n        // Script: |OP_HASH160|0x20|pubkeyhash|OP_EQUAL|\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(2, 22);\n        return bs58check.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    } else if (purpose === constants.BTC_PURPOSE_LEGACY) {\n        // Script: |OP_DUP|OP_HASH160|0x20|pubkeyhash|OP_EQUALVERIFY|OP_CHECKSIG|\n        const version = constants.BTC_LEGACY_VERSION;\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(3, 23);\n        return bs58check.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    }\n}\n\nexport function getBtcPurpose() {\n    const localSettings = localStorage.getSettings();\n    return  localSettings.btcPurpose ? \n            localSettings.btcPurpose : \n            constants.BTC_PURPOSE_NONE;\n}\n\n// Calculate how many bytes will be in a transaction given purpose and input count\n// Calculations come from: https://github.com/jlopp/bitcoin-transaction-size-calculator/blob/master/index.html\n// Not a perfect calculation but pretty close\nexport function getBtcNumTxBytes(numInputs) {\n    let inputSize, outputSize, inputWitnessSize\n    const purpose = getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_LEGACY) {\n        inputSize = 148;\n        outputSize = 32;\n        inputWitnessSize = 0;\n    } else if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n        inputSize = 91;\n        outputSize = 32;\n        inputWitnessSize = 107; // size(signature) + signature + size(pubkey) + pubkey\n    } else {\n        inputSize = 67.75;\n        outputSize = 31;\n        inputWitnessSize = 107; // size(signature) + signature + size(pubkey) + pubkey\n    }\n    const vFactor = purpose === constants.BTC_PURPOSE_LEGACY ? 0 : 0.75;\n    // Hardcode 2 outputs to avoid complexity in app state\n    const txVBytes =  10 + vFactor + inputSize * numInputs + outputSize * 2;\n  return (3 * vFactor) + txVBytes + inputWitnessSize * numInputs;\n}\n\nexport function buildBtcTxReq (   recipient, \n                                    btcValue, \n                                    utxos, \n                                    addrs, \n                                    changeAddrs, \n                                    feeRate=constants.BTC_DEFAULT_FEE_RATE,\n                                    isFullSpend=false) {\n    if (!addrs || !changeAddrs || addrs.length < 1 || changeAddrs.length < 1) {\n        return { error: 'No addresses (or change addresses). Please wait to sync.' };\n    }\n    // Convert value to satoshis\n    const satValue = Math.round(Number(btcValue) * constants.SATS_TO_BTC);\n    const numInputs = isFullSpend ? utxos.length : _calcBtcTxNumInputs(utxos, satValue, feeRate);\n    if (numInputs < 0) {\n        return { error: 'Balance too low.' }\n    } else if (numInputs > utxos.length) {\n        return { error: 'Failed to build transaction.' }\n    }\n    const bytesUsed = getBtcNumTxBytes(numInputs);\n    //@ts-expect-error\n    const fee = Math.floor(bytesUsed * feeRate);\n    // Build the request inputs\n    const BASE_SIGNER_PATH = [getBtcPurpose(), constants.BTC_COIN, constants.HARDENED_OFFSET];\n    const prevOuts: any[] = [];\n    for (let i = 0; i < numInputs; i++) {\n        const utxo = utxos[i];\n        let signerPath = null;\n        if (addrs.indexOf(utxo.address) > -1) {\n            signerPath = BASE_SIGNER_PATH.concat([0, addrs.indexOf(utxo.address)]);\n        } else if (changeAddrs.indexOf(utxo.address) > -1) {\n            signerPath = BASE_SIGNER_PATH.concat([1, changeAddrs.indexOf(utxo.address)]);\n        } else {\n            return { error: 'Failed to find holder of UTXO. Syncing issue likely.' };\n        }\n        const prevOut = {\n            txHash: utxo.id,\n            value: utxo.value,\n            index: utxo.vout,\n            signerPath,\n        }\n        prevOuts.push(prevOut);\n    }\n    // Return the request (i.e. the whole object)\n    const req = {\n        prevOuts,\n        recipient,\n        value: satValue,\n        fee,\n        // Send change to the latest change address\n        changePath: BASE_SIGNER_PATH.concat([1, changeAddrs.length -1]),\n    };\n    return { currency: 'BTC', data: req }\n}\n\nexport function validateBtcAddr(addr) {\n    if (addr === '') return null;\n    try {\n        bs58check.decode(addr);\n        return true;\n    } catch (e) {\n        try {\n            bech32.decode(addr);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\nexport function toHexStr(bn) {\n    const s = bn.toString(16);\n    const base = s.length % 2 === 0 ? s : `0${s}`;\n    return `0x${base}`; \n}\n\n// Filter out any duplicate objects based on `keys`\nexport function filterUniqueObjects(objs, keys) {\n    const filtered: any[] = [];\n    // Copy the objects in reversed order so that newer instances\n    // are applied first\n    const objsCopy = JSON.parse(JSON.stringify(objs)).reverse()\n    objsCopy.forEach((obj) => {\n        let isDup = false;\n        filtered.forEach((fobj) => {\n            let matchedKeys = 0\n            keys.forEach((key) => {\n                if (fobj[key] === obj[key]) {\n                    matchedKeys += 1;\n                }\n            })\n            if (matchedKeys >= keys.length) {\n                isDup = true;\n            }\n        })\n        if (!isDup) {\n            filtered.push(obj);\n        }\n    })\n    // Return in the original order\n    return filtered.reverse();\n}\n//--------------------------------------------\n// END OTHER HELPERS\n//--------------------------------------------","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport './styles.css'\nimport { Button, Layout, Menu, PageHeader, Tag, Tooltip } from 'antd';\nimport { \n  HomeOutlined, MenuOutlined, TagsOutlined, \n  WalletOutlined, ArrowUpOutlined, ArrowDownOutlined, \n  ReloadOutlined, CreditCardOutlined, CheckOutlined, SettingOutlined \n} from '@ant-design/icons';\nimport { default as SDKSession } from '../sdk/sdkSession';\nimport { \n  Connect, Error, Landing, Loading, PageContent, Pair, Send, \n  Receive, Wallet, Settings, ValidateSig, AddressTagsPage \n} from './index'\nimport { constants, getBtcPurpose } from '../util/helpers'\nimport localStorage from '../util/localStorage';\nimport { AppContext } from '../store/AppContext';\nimport type { MenuProps } from 'antd/es/menu';\ntype MenuItem = Required<MenuProps>['items'][number];\n\nconst { Content, Footer, Sider } = Layout;\nconst LOGIN_PARAM = 'loginCache';\nconst PAGE_KEYS = constants.PAGE_KEYS;\nconst DEFAULT_PAGE = PAGE_KEYS.LANDING;\n\ntype MainState = {\n  name: string,\n  menuItem: string,\n  session: any,\n  collapsed: boolean,\n  error: { msg: string, cb: Function },\n  loading: boolean,\n  pendingMsg: string,\n  waiting: boolean, \n  onCancel: Function,\n  deviceID: string,\n  password: string,\n  lastUpdated: Date,\n  windowWidth: number,\n  walletIsExternal: boolean,\n  keyringName: string,\n  openedByKeyring: boolean,\n  hwCheck: string,\n}\n\n\nclass Main extends React.Component<any, MainState> {\n  static contextType = AppContext\n  context = this.context as any;\n\n  constructor(props) {\n    super(props)\n    const params = new URLSearchParams(window.location.search);\n    const keyringName = params.get('keyring')\n    this.state = {\n      name: constants.DEFAULT_APP_NAME,\n      menuItem: DEFAULT_PAGE,\n      // GridPlusSDK session object\n      session: null,\n      collapsed: false,\n      error: { msg: null, cb: null },\n      loading: false,\n      pendingMsg: null,\n      // Waiting on asynchronous data, usually from the Lattice\n      waiting: false, \n      onCancel: null,\n      // Login info stored in localstorage. Can be cleared out at any time by the `logout` func\n      deviceID: null,\n      password: null,\n      // Last time the state was updated (comes from webwork setup by SdkSession)\n      lastUpdated: new Date(),\n      // Width of the current window\n      windowWidth: window.innerWidth,\n      // Track changes in the active wallet so we can refresh addresses when we detect one\n      walletIsExternal: null,\n      // Window params\n      keyringName,\n      // Was the app opened with a keyring in the url parameters\n      openedByKeyring: !!keyringName,\n      // Validation check on Lattice hardware. Should draw a separate component\n      hwCheck: null,\n    };\n\n    // Bind local state updaters\n    this.handleMenuChange = this.handleMenuChange.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.handleKeyringOpener = this.handleKeyringOpener.bind(this);\n    this.syncActiveWalletState = this.syncActiveWalletState.bind(this);\n\n    // Bind callbacks whose calls may originate elsewhere\n    this.cancelConnect = this.cancelConnect.bind(this);\n    this.connectSession = this.connectSession.bind(this);\n    this.handlePair = this.handlePair.bind(this);\n    this.fetchBtcData = this.fetchBtcData.bind(this);\n    this.setError = this.setError.bind(this);\n    this.refreshWallets = this.refreshWallets.bind(this);\n    this.handlePageTurn = this.handlePageTurn.bind(this);\n\n    // Bind wrappers\n    this.retry = this.retry.bind(this);\n\n    // Bind listener callbacks\n    this.updateWidth = this.updateWidth.bind(this);\n  }\n\n  componentDidMount() {\n    // Listen for window resize\n    window.addEventListener('resize', this.updateWidth);\n\n    if (this.isMobile()) this.setState({collapsed: true})\n    // Metamask connects through a keyring and in these cases we need\n    // to utilize window.postMessage once we connect.\n    // We can extend this pattern to other apps in the future.\n    const params = new URLSearchParams(window.location.search);\n    const keyringName = this.state.keyringName\n    const hwCheck = params.get('hwCheck')\n    const forceLogin = params.get('forceLogin')\n    \n    // Workaround to support Firefox extensions. See `returnKeyringData` below.\n    const hasLoggedIn = params.get(LOGIN_PARAM)\n    if (hasLoggedIn) {\n      this.setState({ waiting: true, pendingMsg: 'Connecting...' })\n      return;\n    }\n    \n    if (keyringName) {\n      //@ts-expect-error\n      window.onload = this.handleKeyringOpener();\n      this.setState({ keyringName }, () => {\n        // Check if this keyring has already logged in. This login should expire after a period of time.\n        const prevKeyringLogin = localStorage.getKeyringItem(keyringName);\n        const keyringTimeoutBoundary = new Date().getTime() - constants.KEYRING_LOGOUT_MS;\n        if (!forceLogin && prevKeyringLogin && prevKeyringLogin.lastLogin > keyringTimeoutBoundary) {\n          this.connect( prevKeyringLogin.deviceID, \n                        prevKeyringLogin.password, \n                        () => this.connectSession(prevKeyringLogin));\n        } else {\n          // If the login has expired, clear it now.\n          localStorage.removeKeyringItem(keyringName)\n        }\n      })\n    } else if (hwCheck) {\n      // Lattice validation check builds this URL and includes a signature + preimage\n      this.setState({ hwCheck })\n    } else {\n      // Lookup deviceID and pw from storage\n      const { deviceID, password } = localStorage.getLogin()\n      if (deviceID && password)\n        this.connect(deviceID, password, () => this.connectSession())\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.context.session)\n      this.syncActiveWalletState();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  updateWidth() {\n    this.setState({ windowWidth:  window.innerWidth });\n    if (this.isMobile() && !this.state.collapsed) {\n      this.setState({ collapsed: true })\n    } else if (!this.isMobile() && this.state.collapsed) {\n      this.setState({ collapsed: false })\n    }\n  }\n\n  isMobile() {\n    return this.context.isMobile\n  }\n\n  connect(deviceID, password, cb) {\n    const updates = { deviceID, password };\n    const name = this.state.keyringName ? this.state.keyringName : this.state.name\n    if (!this.context.session) {\n      // Create a new session if we don't have one.\n      const settings = localStorage.getSettings()\n      this.context.setSession(\n        new SDKSession(deviceID, this.setError, name, settings)\n      );\n    }\n    this.setState(updates, cb);\n  }\n\n  cancelConnect() {\n    // Cancel the pairing process if it was started (i.e. if the connection was started with\n    // a device that could be discovered). Most of the time this will not be possible because\n    // the cancel button that triggers this function will not be displayed once the device\n    // responds back that it is ready to pair.\n    if (this.context.session && this.context.session.client) {\n      this.context.session.client.pair('', () => {});\n    }\n    // Reset all SDK-related state variables so the user can re-connect to something else.\n    this.setState({ deviceID: null, password: null, session: null })\n    this.unwait()\n  }\n\n  isConnected() {\n    if (!this.context.session) return false;\n    return this.context.session.isConnected();\n  }\n\n  //------------------------------------------\n  // KEYRING HANDLERS\n  //------------------------------------------\n\n  handleKeyringOpener() {\n    this.setState({ openedByKeyring: true })\n  }\n\n  returnKeyringData() {\n    if (!this.state.openedByKeyring)\n      return;\n    // Save the login for later\n    localStorage.setKeyringItem(this.state.keyringName, {\n      deviceID: this.state.deviceID,\n      password: this.state.password,\n      lastLogin: new Date().getTime()\n    })\n    // Send the data back to the opener\n    const data = {\n      deviceID: this.state.deviceID,\n      password: this.state.password,\n      endpoint: constants.BASE_SIGNING_URL,\n    };\n    // Check if there is a custom endpoint configured\n    const settings = localStorage.getSettings();\n    if (settings.customEndpoint && settings.customEndpoint !== '') {\n      data.endpoint = settings.customEndpoint;\n    }\n    this.handleLogout();\n    if (window.opener) {\n      // If there is a `window.opener` we can just post back\n      window.opener.postMessage(JSON.stringify(data), \"*\");\n      window.close();\n    } else {\n      // Otherwise we need a workaround to let the originator\n      // know we have logged in. We will put the login data\n      // into the URL and the requesting app will fetch that.\n      // Note that the requesting extension is now responsible for\n      // closing this web page.\n      const enc = Buffer.from(JSON.stringify(data)).toString('base64');\n      window.location.href = `${window.location.href}&${LOGIN_PARAM}=${enc}`;\n    }\n  }\n  //------------------------------------------\n  // END KEYRING HANDLERS\n  //------------------------------------------\n\n  //------------------------------------------\n  // LOCAL STATE UPDATES\n  //------------------------------------------\n  wait(msg=null, onCancel=null) {\n    this.setState({ pendingMsg: msg, waiting: true, onCancel });\n  }\n\n  unwait() {\n    this.setState({ pendingMsg: null, waiting: false, onCancel: null });\n  }\n\n  //------------------------------------------\n  // END LOCAL STATE UPDATES\n  //------------------------------------------\n\n  //------------------------------------------\n  // HEADER HANDLERS\n  //------------------------------------------\n  handlePageTurn(page) {\n    this.context.session.setPage(page);\n  }\n\n  handleMenuChange ({ key }) {\n    const stateUpdate = { menuItem: key }\n    //@ts-expect-error\n    if (this.isMobile()) stateUpdate.collapsed = true\n    this.setState(stateUpdate)\n  }\n\n  handleLogout(err=null) {\n    this.unwait();\n    this.context.session.disconnect();\n    this.setState({ session: null });\n    localStorage.removeLogin()\n    localStorage.removeAddresses()\n    if (err && err === constants.LOST_PAIRING_MSG)\n      //@ts-expect-error\n      this.setError({ err })\n  }\n\n  setError(data={msg:null, cb:null}) {\n    // Handle case where user deletes pairing on the Lattice\n    if (data.msg === constants.LOST_PAIRING_ERR)\n      return this.handleLostPairing();\n    this.setState({ error: data, loading: false })\n  }\n  \n  //------------------------------------------\n  // END HEADER HANDLERS\n  //------------------------------------------\n\n  //------------------------------------------\n  // SDK HOOKS\n  //------------------------------------------\n\n  // Call `connect` on the SDK session. If we get an error back, clear out the client,\n  // as we cannot connect.\n  connectSession(data=this.state, showLoading=true) {\n    const { deviceID, password } = data;\n    // Sanity check -- this should never get hit\n    if (!deviceID || !password) {\n      //@ts-expect-error\n      return this.setError({\n        msg: 'You must provide a deviceID and password. Please refresh and log in again. '\n      });\n    } else {\n      this.setError();\n    }\n    // Connect to the device\n    this.connect(deviceID, password, () => {\n      // Create a new session with the deviceID and password provided.\n      if (showLoading === true) {\n        this.wait(\"Looking for your Lattice\", this.cancelConnect);\n      }\n      this.context.session\n        .connect(deviceID, password)\n        .then((isPaired) => {\n          this.unwait();\n          // If the request was before we got our callback, exit here\n          if (!this.context.session || this.state.deviceID !== deviceID)\n            return;\n          // We connected!\n          // 1. Save these credentials to localStorage if this is NOT a keyring\n          if (!this.state.openedByKeyring) {\n            localStorage.setLogin({ deviceID, password })\n          }\n          // 2. Clear errors and alerts\n          this.setError();\n          // 3. Proceed based on state\n          if (isPaired && this.state.openedByKeyring) {\n            return this.returnKeyringData();\n          }\n        })\n        .catch((err) => {\n          this.setError({\n            msg: err.message,\n            cb: () => { this.connectSession(data) },\n          });\n        });\n    });\n  }\n\n  // Fetch up-to-date blockchain state data for the addresses stored in our\n  // SDKSession. Called after we load addresses for the first time\n  // Passing `isRecursion=true` means we will attempt to fetch new\n  // addresses based on known state data and if we do not yield any new ones\n  // we should exit. This is done to avoid naively requesting state data\n  // for all known addresses each time we add a new one based on a gap limit.\n  // For example, an initial sync will get 20 addrs and fetch state data. It \n  // may then request one address at a time and then state data for that one\n  // address until the gap limit is reached.\n  fetchBtcData(isRecursion=false) {\n    this.unwait();\n    this.setError();\n    this.wait('Fetching addresses');\n    this.context.session.fetchBtcAddresses((err, newAddrCounts) => {\n      if (err) {\n        console.error('Error fetching BTC addresses', err)\n        this.unwait();\n        this.setError({ \n          msg: 'Failed to fetch BTC addresses. Please try again.', \n          cb: this.fetchBtcData\n        });\n        return;\n      }\n      this.unwait()\n      const shouldExit =  isRecursion && \n                          newAddrCounts.regular === 0 && \n                          newAddrCounts.change === 0;\n      if (shouldExit) {\n        // Done syncing\n        return;\n      }\n      // If this is the first time we are calling this function,\n      // start by clearing UTXOs to avoid stale balances\n      if (!isRecursion) {\n        this.context.session.clearUtxos();\n      }\n      // Sync data now\n      this.wait('Syncing chain data')\n      const opts = isRecursion ? newAddrCounts : null;\n      this.context.session.fetchBtcStateData(opts, (err) => {\n        if (err) {\n          console.error('Error fetching BTC state data', err)\n          this.unwait();\n          this.setError({ \n            msg: 'Failed to fetch BTC state data. Please try again.', \n            cb: this.fetchBtcData \n          });\n          return;\n        }\n        // Recurse such that we exit if there are no new addresses\n        this.fetchBtcData(true);\n      })\n    })\n  }\n\n  handleLostPairing() {\n    // If we lost our pairing, we will have discovered that after trying to `connect`.\n    // The Lattice will draw a pairing screen, so to tear it down we need to send an\n    // invalid pairing code.\n    // TODO: This will still draw a pairing failure screen on the Lattice. There is\n    //       currently no way around this, but it is something we should address\n    //       in the future.\n    this.context.session.client.pair('x', () => {\n      this.handleLogout(constants.LOST_PAIRING_MSG);\n    });\n  }\n\n  refreshWallets() {\n    if (this.state.waiting === true)\n      return;\n    this.wait(\"Refreshing wallets\")\n    this.setState({ waiting: true })\n    this.context.session.refreshWallets((err) => {\n      if (err === constants.LOST_PAIRING_ERR)\n        return this.handleLostPairing();\n      \n      this.syncActiveWalletState(true);\n      this.unwait();\n      if (err)\n        return this.setError({ msg: err, cb: this.refreshWallets })\n      this.setError();\n      if (constants.BTC_PURPOSE_NONE !== getBtcPurpose())\n        this.fetchBtcData()\n    })\n  }\n\n  // If we detect a new active wallet interface, save it and refresh wallet addresses\n  syncActiveWalletState(bypassRefresh=false) {\n    const activeWallet = this.context.session.getActiveWallet();\n    if (!activeWallet)\n      return;\n    const isExternal = activeWallet.external;\n    if (this.state.walletIsExternal !== isExternal) {\n      // We only want to refresh if we know another interface was active before. If this\n      // is the first check, just set the flag without calling refresh (it will get called)\n      // automatically.\n      const shouldRefresh = this.state.walletIsExternal !== null;\n      // Set state regardless\n      this.setState({ walletIsExternal: isExternal })\n      // Refresh if needed\n      if (shouldRefresh === true && bypassRefresh !== true)\n        this.refreshWallets();\n    }\n  }\n\n  //------------------------------------------\n  // END SDK HOOKS\n  //------------------------------------------\n\n  //------------------------------------------\n  // SDK CALLBACKS\n  //------------------------------------------\n\n  // Handle a `finalizePairing` response. There are three states:\n  // 1. Wrong secret: draw a new screen (try again) automatically\n  // 2. Timed out: display error screen and wait for user to try again\n  // 3. Success: load addresses\n  handlePair(data) {\n    // Hack to circumvent a weird screen artifact we are seeing in firmware\n    // NOTHING TO SEE HERE\n    if (data[0] === '_' || data[0] === '[') data = data.slice(1)\n\n    // If we didn't timeout, submit the secret and hope for success!\n    this.wait(\"Establishing connection with your Lattice\");\n    this.context.session.client\n      .pair(data)\n      .then(() => {\n        this.unwait();\n        if (this.state.openedByKeyring) {\n          this.returnKeyringData();\n        }\n      })\n      .catch((err) => {\n        // If there was an error here, the user probably entered the wrong secret\n        const pairErr =\n          \"Failed to pair. You either entered the wrong code or have already connected to this app.\";\n        this.setError({ msg: pairErr, cb: this.connectSession });\n      });\n  }\n\n  //------------------------------------------\n  // END SDK CALLBACKS\n  //------------------------------------------\n\n  //------------------------------------------\n  // RENDERERS\n  //------------------------------------------\n  renderMenu() {\n    const hideWallet = constants.BTC_PURPOSE_NONE === getBtcPurpose();\n\n    const getMenuItems = () => { \n      const items: MenuItem[] = [{\n        key: PAGE_KEYS.LANDING,\n        label: 'Home',\n        icon:  <HomeOutlined/>, \n      },\n      {\n        key: PAGE_KEYS.ADDRESS_TAGS,\n        label: 'Address Tags',\n        icon:  <TagsOutlined/>,\n      },\n      {\n        key: PAGE_KEYS.SETTINGS,\n        label: 'Settings',\n        icon:  <SettingOutlined/>,\n      },\n      ]\n      if (!hideWallet) {\n        items.push({\n          key: 'submenu-wallet',\n          label: 'BTC Wallet',\n          children: [{\n            key: PAGE_KEYS.WALLET,\n            label: 'History',\n            icon:  <WalletOutlined/>,\n          },\n          {\n            key: PAGE_KEYS.SEND,\n            label: 'Send',\n            icon:  <ArrowUpOutlined/>,\n          },\n          {\n            key: PAGE_KEYS.RECEIVE,\n            label: 'Receive',\n            icon:  <ArrowDownOutlined/>,\n          }]\n        })\n      }\n      return items\n    }\n\n    return (\n      <Sider collapsed={this.state.collapsed} collapsedWidth={0}>\n        <Menu\n          theme=\"dark\"\n          mode=\"inline\"\n          onSelect={this.handleMenuChange}\n          items={getMenuItems()}\n          selectedKeys={[this.state.menuItem]}\n        />\n      </Sider>\n    );\n  }\n\n  renderSidebar() {\n    if (this.state.name !== constants.DEFAULT_APP_NAME)\n      return\n    if (this.isConnected())\n      return this.renderMenu();\n  }\n\n  renderHeaderText() {\n    return (\n      <>\n        {this.isMobile() ? (\n          <Button\n            onClick={() => this.setState({ collapsed: !this.state.collapsed })}\n            type=\"text\"\n            size=\"large\"\n            icon={<MenuOutlined />}\n            style={{ backgroundColor: \"transparent\", marginRight: \"5px\" }}\n          />\n        ) : null}\n        <a\n          className=\"lattice-a\"\n          href=\"https://gridplus.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img  alt=\"GridPlus\" \n                src={'/gridplus-logo.png'}\n                style={{height: '3em'}}/>\n        </a>\n      </>\n    );\n  }\n\n  renderHeader() {\n    if (this.state.name !== constants.DEFAULT_APP_NAME)\n      return\n    let extra: any[] = [];\n    if (!this.isConnected())\n      return;\n\n    // Display a tag if there is a SafeCard inserted\n    let walletTag = null;\n    const size = this.isMobile() ? 'small' : 'middle';\n    const activeWallet = this.context.session.getActiveWallet();\n\n    if (!activeWallet) {\n      walletTag = ( \n        //@ts-expect-error - danger type is missing in antd\n        <Button type=\"danger\" ghost onClick={this.refreshWallets} size={size}>No Wallet <ReloadOutlined/></Button>\n      )\n    } else {\n      walletTag = activeWallet.external === true ?  (\n        <Button type=\"primary\" ghost onClick={this.refreshWallets} size={size}><CreditCardOutlined/> SafeCard <ReloadOutlined/></Button>\n      ) : (\n        <Button type=\"default\" ghost onClick={this.refreshWallets} size={size}><CheckOutlined/> Lattice <ReloadOutlined/></Button>\n      )\n    }\n    if (walletTag) extra.push((\n      <Tooltip title=\"Refresh\" key=\"WalletTagTooltip\">{walletTag}</Tooltip>));\n\n    extra.push(\n      ( <Button key=\"logout-button\" type=\"primary\" onClick={this.handleLogout} size={size}>\n        Logout\n      </Button>)\n    );\n    return (\n      <PageHeader\n        title={this.renderHeaderText()}\n        ghost={true}\n        extra={!this.state.waiting ? extra : null}\n      />\n    )\n  }\n\n  renderErrorHeader() {\n    if (this.state.error.msg) {\n      const err = (\n        <Error  msg={this.state.error.msg} \n                retryCb={this.state.error.cb}\n        />\n      )\n      return (\n        <PageContent content={err} />\n      )\n    } else {\n      return;\n    }\n  }\n\n  retry(cb) {\n    this.setError();\n    return cb();\n  }\n\n  renderPage() {\n    switch (this.state.menuItem) {\n      case PAGE_KEYS.WALLET:\n        return (\n          <Wallet\n            session={this.context.session}\n            refreshData={this.fetchBtcData}\n            lastUpdated={this.state.lastUpdated}\n            pageTurnCb={this.handlePageTurn}\n          />\n        );\n      case PAGE_KEYS.RECEIVE:\n        return <Receive session={this.context.session} />;\n      case PAGE_KEYS.SEND:\n        return <Send session={this.context.session} />;\n      case PAGE_KEYS.SETTINGS:\n        return <Settings />;\n      case PAGE_KEYS.ADDRESS_TAGS:\n        return <AddressTagsPage />;\n      case DEFAULT_PAGE:\n        return <Landing goToPage={(key) => this.handleMenuChange({ key })} />;\n      default:\n        return;\n    }\n  }\n\n  renderContent() {\n    const hasActiveWallet = this.context.session ? this.context.session.getActiveWallet() !== null : false;\n    if (this.state.waiting) {\n      return (\n        <Loading  msg={this.state.pendingMsg}\n                  onCancel={this.state.onCancel}/> \n      );\n    } else if (!this.isConnected()) {\n      // Connect to the Lattice via the SDK\n      return (\n        <Connect  submitCb={this.connectSession}\n                  cancelConnect={this.cancelConnect}\n                  name={this.state.name}\n                  keyringName={this.state.keyringName}\n                  setKeyringName={(keyringName) => this.setState({ keyringName })}\n                  errMsg={this.state.error.msg}/>\n      );\n    } else if (!this.context.session.isPaired()) {\n      // Automatically try to pair if we have a session but no pairing  \n      return (\n        <Pair submit={this.handlePair}\n              hide={!!this.state.error.msg} />\n      );\n    } else if (this.state.openedByKeyring) {\n      // The window should close automatically, but just in case something goes wrong...\n      return (\n        <Loading  msg={\"Successfully connected to your Lattice! You may close this window.\"}\n                  spin={false}/>\n      )\n    } else if (!hasActiveWallet) {\n      const retry = this.context.session ? this.refreshWallets : null;\n      return (\n        <Error msg={\"No active wallet present for device!\"}\n               retryCb={retry} \n        />\n      )\n    } else {\n      return this.renderPage();\n    }\n  }\n\n  renderFooter() {\n    return (\n      <Footer style={{ textAlign: 'center', color: \"#969696\" }}>\n        © {new Date().getFullYear()} GridPlus, Inc. &nbsp;&nbsp; | &nbsp;&nbsp; v{process.env.REACT_APP_VERSION}\n        {constants.ENV === 'dev' ? <Tag color=\"blue\" style={{margin: \"0 0 0 10px\"}}>DEV</Tag> : null}\n      </Footer>\n    )\n  }\n\n  renderPageContainer() {\n    if (this.state.hwCheck !== null) {\n      return <ValidateSig data={this.state.hwCheck} />\n    } else {\n      return this.renderContent();\n    }\n  }\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        {this.renderHeader()}\n        <Layout id=\"main-content-outer\">\n          {this.renderSidebar()}\n          <Layout id=\"main-content-inner\">\n            <Content style={{ margin: '0 0 0 0' }}>\n              {this.renderErrorHeader()}\n              <div>\n                {this.renderPageContainer()}\n              </div>\n            </Content>\n            {this.renderFooter()}\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default Main","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Col, Result, Row } from 'antd'\nimport { decode } from 'bs58'\nimport { constants } from '../util/helpers';\nimport { AppContext } from '../store/AppContext';\nimport { ResultStatusType } from 'antd/lib/result';\n\nconst ReactCrypto = require('gridplus-react-crypto').default;\nconst EC = require('elliptic').ec;\n\nconst PREIMAGE_LEN = 32;\nconst SIG_TEMPLATE_LEN =  74; // Struct containing DER sig\nconst CERT_TEMPLATE_LEN = 147;  // Struct containing pubkey, permissions, and signature on it\n\nclass ValidateSig extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n  isLoading: boolean;\n  poapToClaim: string;\n  isValid: string;\n  message: string;\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: false,\n      poapToClaim: '',\n      isValid: '',\n      message: '',\n    }\n  } \n\n  componentDidMount(): void {\n    this.setState({ isValid: this.validateSig() })\n    this.setState({message: this.getMessageForPoap()})\n  }\n\n  /** Returns the message string reformatted for comparison*/\n  getMessageForPoap() {\n    return this.getPreimage()\n      // forces case insensitivity\n      .toLocaleLowerCase()\n      // Replaces non-alphanumeric characters with empty string\n      .replace(/[^|x00-\\x7F]/g, \"\");\n  }\n\n  shouldShowClaimCard() {\n    return (\n      this.state.isValid &&\n      (this.state.message === \"poap\" || \n      // Easter Egg\n      this.state.message === \"poop\")\n    );\n  }\n\n  // Validate a signature for a message from a known signer on a known curve\n  // * msg - Expected ASCII string\n  // * signer - Expected buffer containing 65-byte public key\n  // * sig - Expected DER signature (string is best)\n  // * curve - Consumable curve for elliptic\n  _validate(msg, signer, sig, curve='secp256k1') {\n    const crypto = new ReactCrypto();\n    const ec = new EC(curve);\n    const msgHash = crypto.createHash('sha256').update(msg).digest();\n    const key = ec.keyFromPublic(signer, 'hex')\n    return key.verify(msgHash, sig);\n  }\n\n  getPreimage() {\n    return decode(this.props.data).slice(0, PREIMAGE_LEN).toString()\n  }\n\n  getCert() {\n    const start = PREIMAGE_LEN + SIG_TEMPLATE_LEN;\n    const _certData = decode(this.props.data).slice(start, start + CERT_TEMPLATE_LEN);\n    const METADATA_LEN = 8;\n    const PUBKEY_LEN = 65;\n    const preimage = _certData.slice(2, METADATA_LEN + PUBKEY_LEN);\n    // When we issue the cert, we are signing metadata + the public key. However, this\n    // cert gets packed into a template along with this metadata and the length of the data in\n    // that template is variable, depending on the size of the DER sig (which we call a \"cert\").\n    // We sign metadata with 0 length at the outset because we won't know the eventual length.\n    // Therefore this byte needs to be reuturned to its initial 0 value in order to validate the \"cert\".\n    // preimage[1] = 0;\n    const pubkey = Buffer.from(_certData.slice((METADATA_LEN), (METADATA_LEN + PUBKEY_LEN))).toString('hex');\n    const _sig = Buffer.from(_certData.slice((METADATA_LEN + PUBKEY_LEN), (METADATA_LEN + PUBKEY_LEN + SIG_TEMPLATE_LEN)));\n    const sig = _sig.slice(0, (2 + _sig[1]));\n    return { pubkey, preimage, sig }\n  }\n\n  validateCert() {\n    const cert = this.getCert();\n    return this._validate(cert.preimage, constants.LATTICE_CERT_SIGNER, cert.sig)\n  }\n\n  validateSig() {\n    try {\n      if (!this.validateCert())\n        return false;\n      const preimage = this.getPreimage();\n      const cert = this.getCert();\n      const _sig = Buffer.from(decode(this.props.data).slice(PREIMAGE_LEN, PREIMAGE_LEN + SIG_TEMPLATE_LEN));\n      const sig = _sig.slice(0, (2 + _sig[1]))\n      return this._validate(preimage, cert.pubkey, sig);\n    } catch (err) {\n      console.error(`Encountered error validating signature: ${err.message}`)\n      return false;\n    }\n  }\n\n  claimPoap () {\n    const url = constants.POAP_CLAIM_REMOTE_URL;\n    this.setState({ isLoading: true })\n    const data = this.props.data\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({ data })\n    })\n      .then((res => res.json()))\n      .then(poapToClaim => {\n        this.setState({ poapToClaim })\n      })\n      .catch(console.error)\n      .finally(() => {\n        this.setState({ isLoading: false })\n      })\n  }\n\n  renderResult() {\n    let result = {\n      status: \"warning\" as ResultStatusType,\n      title: \"Could not Verify Authenticity\",\n      subTitle: \"We could not verify the authenticity of this signature or signer.\"\n    };\n    if (this.state.isValid) {\n      result.status = \"success\";\n      result.title = \"Verified\";\n      result.subTitle = \"The signer is authentic!\"\n    }\n    return (\n      <Result\n        status={result.status}\n        title={result.title}\n        subTitle={result.subTitle}\n      />\n    )\n  }\n\n\n  render() {\n    const spanLength = this.context.isMobile ? 18 : 10;\n    const spanOffset = this.context.isMobile ? 3 : 7; \n    return (\n      <Row>\n        <Col span={spanLength} offset={spanOffset}>\n          <center>\n            <Card title=\"Validate Hardware\" bordered={true}>\n              {this.renderResult()}\n              <p>\n                <b>Message:</b> {this.getPreimage()}\n              </p>\n            </Card>\n            {this.shouldShowClaimCard() && (\n              <Card\n                title=\"Claim POAP\"\n                bordered={true}\n                style={{ marginTop: \"20px\" }}\n              >\n                <p>GridPlus is offering POAPs to all valid Lattice1 owners.</p>\n                <Button\n                  disabled={this.state.isLoading}\n                  loading={this.state.isLoading}\n                  onClick={() => {\n                    this.claimPoap();\n                  }}\n                >\n                  Claim\n                </Button>\n                <div style={{ paddingTop: \"20px\" }}>\n                  <a href={this.state.poapToClaim}>{this.state.poapToClaim}</a>\n                </div>\n              </Card>\n            )}\n          </center>\n        </Col>\n      </Row>\n    )\n  }\n\n\n}\n\nexport default ValidateSig","import localStorage from './localStorage';\n\nclass StorageSession {\n  data: any;\n  store: any;\n  \n  constructor(device_id, pass) {\n    this.data = null;\n    this.store = localStorage.getRootStore();\n  }\n\n  isObject(o) {\n    try {\n      return o && typeof o === 'object' && !Array.isArray(o);\n    } catch(e) {\n      return false;\n    }\n  }\n\n  updateBranch(newData, oldData, key) {\n    // If we have reached the end of oldData\n    if (!this.isObject(oldData))\n      return;\n\n    // If `newData[key]` is a nested object, start that object\n    // clone in `oldData`\n    if (this.isObject(newData[key]) && !oldData[key])\n      oldData[key] = {};\n\n    // Loop through all keys in new data at this level. We will\n    // be adding each one as a branch\n    if (this.isObject(newData[key])) {\n      Object.keys(newData[key]).forEach((newKey) => {\n        // If there are more keys nested in this branch, update them first\n        if (this.isObject(newData[key][newKey]))\n          this.updateBranch(newData[key], oldData[key], newKey)\n        // No more keys in this branch? Finally copy this data to `oldData`\n        else\n          oldData[key][newKey] = newData[key][newKey];\n      });\n    } else {\n      // If this is a non-ojbect, copy it directly\n      oldData[key] = newData[key];\n    }\n  }\n\n  save(deviceID, wallet_uid, data) {\n    // Get the data for this deviceID\n    if (!this.store[deviceID]) this.store[deviceID] = {};\n    if (!this.store[deviceID][wallet_uid]) this.store[deviceID][wallet_uid] = {};\n    // Update relevant keys without overwriting anything else\n    Object.keys(data).forEach((k) => {\n      this.updateBranch(data, this.store[deviceID][wallet_uid], k);\n    })\n    // Update the store itself\n    localStorage.setRootStore(this.store);\n  }\n\n  getWalletData(deviceID, wallet_uid) {\n    if (!this.store[deviceID]) this.store[deviceID] = {};\n    if (!this.store[deviceID][wallet_uid]) this.store[deviceID][wallet_uid] = {};\n    return this.store[deviceID][wallet_uid];\n  }\n}\n\n\nexport default StorageSession;","import { Client } from 'gridplus-sdk';\nimport { SDKAddresses } from '../types/SDKAddresses';\nimport {\n  broadcastBtcTx, constants, fetchBtcPrice,\n  fetchBtcTxs, fetchBtcUtxos, filterUniqueObjects, getBtcPurpose, harden\n} from '../util/helpers';\nimport { default as StorageSession } from '../util/storageSession';\nconst Buffer = require('buffer/').Buffer;\nconst ReactCrypto = require('gridplus-react-crypto').default;\n\nclass SDKSession {\n  client: Client;\n  crypto: any;\n  name: any;\n  storageSession: any;\n  deviceID: any;\n  stateUpdateHandler: any;\n  page: number;\n  baseUrl: any;\n  addresses: SDKAddresses;\n  btcTxs: any[];\n  btcUtxos: any[];\n  lastFetchedBtcData: number;\n  btcPrice: number;\n\n  constructor(deviceID, stateUpdateHandler, name=null, opts: any = {}) {\n    this.client = null;\n    this.crypto = null;\n    this.name = name || constants.DEFAULT_APP_NAME; // app name\n    // Make use of localstorage to persist wallet data\n    this.storageSession = null;\n    // Save the device ID for the session\n    this.deviceID = deviceID;\n    // Handler to call when we get state updates\n    this.stateUpdateHandler = stateUpdateHandler;\n\n    // Current page of results (transactions) for the wallet\n    this.page = 1; // (1-indexed)\n\n    // Configurable settings\n    this.baseUrl = opts.customEndpoint ? opts.customEndpoint : constants.BASE_SIGNING_URL;\n\n    // BTC wallet data\n    this.addresses = {};          // Contains BTC and BTC_CHANGE addresses\n    this.btcTxs = [];             // Contains all txs for all addresses\n    this.btcUtxos = [];           // Contains all utxos for all addresses\n    this.lastFetchedBtcData = 0;  // Timestamp containing the last time we updated data\n    this.btcPrice = 0;            // Price in dollars of full unit BTC\n    \n    // Go time\n    this.getBtcWalletData();\n  }\n\n  disconnect() {\n    this.client = null;\n    this.saveBtcWalletData();\n    this.storageSession = null;\n    this.deviceID = null;\n  }\n\n  isConnected() {\n    return this.client !== null;\n  }\n\n  isPaired() {\n    return this.client.isPaired || false;\n  }\n\n  resetStateData() {\n    this.addresses = {};\n    this.btcTxs = [];\n    this.btcUtxos = [];\n  }\n  \n  getBtcDisplayAddress() {\n    // If we have set the next address to use, display that.\n    // Otherwise, fallback on the first address.\n    const lastUsed = this._getLastUsedBtcAddrIdx()\n    if (lastUsed > -1 && this.addresses.BTC[lastUsed + 1])\n      return this.addresses.BTC[lastUsed + 1];\n    else if (this.addresses.BTC && this.addresses.BTC.length > 0)\n      return this.addresses.BTC[0];\n    else\n      return null;\n  }\n\n  getActiveWallet() {\n    if (!this.client) return null;\n    return this.client.getActiveWallet();\n  }\n\n  setPage(newPage=1) {\n    this.page = newPage;\n  }\n\n  getPage() {\n    return this.page;\n  }\n\n  // Prepare addresses for caching in localStorage\n  dryAddresses() {\n    const driedAddrs: SDKAddresses = {};\n    const hasBTCAddrs = this.addresses.BTC && this.addresses.BTC.length > 0;\n    const hasBTCChangeAddrs = this.addresses.BTC_CHANGE && this.addresses.BTC_CHANGE.length > 0;\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return driedAddrs;\n    }\n    if (hasBTCAddrs) {\n      driedAddrs.BTC = {};\n      driedAddrs.BTC[BTC_PURPOSE] = this.addresses.BTC || [];\n    }\n    if (hasBTCChangeAddrs) {\n      driedAddrs.BTC_CHANGE = {};\n      driedAddrs.BTC_CHANGE[BTC_PURPOSE] = this.addresses.BTC_CHANGE || [];\n    }\n    return driedAddrs;\n  }\n\n  // Pull addresses out of cached localStorage data\n  rehydrateAddresses(allAddrs: SDKAddresses = {}) {\n    const rehydratedAddrs: SDKAddresses = {};\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return rehydratedAddrs;\n    }\n    if (allAddrs.BTC) {\n      rehydratedAddrs.BTC = allAddrs.BTC[BTC_PURPOSE];\n    }\n    if (allAddrs.BTC_CHANGE) {\n      rehydratedAddrs.BTC_CHANGE = allAddrs.BTC_CHANGE[BTC_PURPOSE];\n    }\n    this.addresses = rehydratedAddrs;\n  }\n\n  saveBtcWalletData() {\n    // This function should never be called without a deviceID \n    // or StorageSession\n    if (!this.deviceID || !this.storageSession) return;\n\n    // Package data and save it\n    // NOTE: We are only storing addresses at this point, as\n    // the blockchain state needs to be up-to-date and is therefore\n    // not very useful to store.\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      console.error('Cannot save BTC wallet data when wallet is hidden');\n      return;\n    }\n    const walletData = {\n      [constants.BTC_WALLET_STORAGE_KEY]: {\n        [BTC_PURPOSE]: {\n          addresses: this.dryAddresses(),\n          btcTxs: this.btcTxs,\n          btcUtxos: this.btcUtxos,\n          lastFetchedBtcData: this.lastFetchedBtcData,\n        },\n        btcPrice: this.btcPrice,\n      }\n    };\n    const activeWallet = this.client ? this.client.getActiveWallet() : null;\n    if (this.client && activeWallet !== null) {\n      const wallet_uid = activeWallet.uid.toString('hex');\n      this.storageSession.save(this.deviceID, wallet_uid, walletData);\n    }\n  }\n\n  getBtcWalletData() {\n    // Create a storage session only if we have a deviceID and don't\n    // have a current storage session\n    if (this.deviceID && !this.storageSession)\n      //@ts-expect-error\n      this.storageSession = new StorageSession(this.deviceID);\n    if (this.client) {\n      // Make sure the btc wallet is enabled\n      const BTC_PURPOSE = getBtcPurpose();\n      if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n        console.error('Cannot get wallet data when wallet is hidden.');\n        return;\n      }\n      // If we have a client and if it has a non-zero active wallet UID,\n      // lookup the addresses corresponding to that wallet UID in storage.\n      const activeWallet = this.getActiveWallet();\n      if (activeWallet === null) {\n        // No active wallet -- reset addresses\n        this.addresses = {};\n      } else {\n        const uid = activeWallet.uid.toString('hex')\n        // Rehydrate the data\n        const data = this.storageSession.getWalletData(this.deviceID, uid);\n        if (!data || !data[constants.BTC_WALLET_STORAGE_KEY])\n          return;\n        const walletData = data[constants.BTC_WALLET_STORAGE_KEY];\n        // Price is saved outside of the purpose sub-object\n        if (walletData.btcPrice) {\n          this.btcPrice = walletData.btcPrice;\n        }\n        // Unpack wallet data associated with the current btc purpose\n        const purposeSpecificData = walletData[BTC_PURPOSE];\n        if (!purposeSpecificData)\n          return;\n        if (purposeSpecificData.addresses) {\n          this.rehydrateAddresses(purposeSpecificData.addresses);\n        }\n        if (purposeSpecificData.btcTxs) {\n          this.btcTxs = purposeSpecificData.btcTxs;\n        }\n        if (purposeSpecificData.btcUtxos) {\n          this.btcUtxos = purposeSpecificData.btcUtxos;\n        }\n        if (purposeSpecificData.lastFetchedBtcData) {\n          this.lastFetchedBtcData = purposeSpecificData.lastFetchedBtcData;\n        }\n      }\n    }\n  }\n\n  _tryConnect(deviceID, pw, cb, _triedLocal=false) {\n    let baseUrl = this.baseUrl;\n    let tmpTimeout = constants.SHORT_TIMEOUT; // Artificially short timeout just for connecting\n    if (_triedLocal === false) {\n      baseUrl = `http://lattice-${deviceID}.local:8080`\n      tmpTimeout = 5000 // Shorten the timeout even more since we should discover quickly if device is on LAN\n    }\n    // Derive a keypair from the deviceID and password\n    // This key doesn't hold any coins and only allows this app to make\n    // requests to a particular device. Nevertheless, the user should\n    // enter a reasonably strong password to prevent unwanted requests\n    // from nefarious actors.\n    const key = this._genPrivKey(deviceID, pw, this.name);\n    // If no client exists in this session, create a new one and\n    // attach it.\n    let client;\n    try {\n      client = new Client({ \n        name: this.name,\n        privKey: key,\n        baseUrl,\n        timeout: tmpTimeout, // Artificially short timeout for simply locating the Lattice\n        skipRetryOnWrongWallet: false,\n      })\n    } catch (err) {\n      return cb ? cb(err.toString()) : err.toString();\n    }\n\n    return client\n      .connect(deviceID)\n      .then((isPaired) => {\n        // Update the timeout to a longer one for future async requests\n        client.timeout = constants.ASYNC_SDK_TIMEOUT;\n        this.client = client;\n        // Setup a new storage session if these are new credentials.\n        // (This call will be bypassed if the credentials are already saved\n        // in localStorage because getBtcWalletData is also called in the constructor)\n        this.deviceID = deviceID;\n        this.getBtcWalletData();\n        return cb ? cb(null, isPaired) : isPaired;\n      })\n      .catch((err) => {\n        if (err) {\n          if (_triedLocal === false) {\n            console.warn(\n              \"Failed to connect to Lattice over LAN. Falling back to cloud routing.\"\n            );\n            return this._tryConnect(deviceID, pw, cb, true);\n          } else {\n            console.error(\"Failed to connect via cloud routing.\");\n            return cb ? cb(err) : err;\n          }\n        } else if (_triedLocal === false) {\n          console.log(\"Successfully connected to Lattice over LAN.\");\n        }\n      });\n  }\n\n  connect(deviceID, pw, cb) {\n    return this._tryConnect(deviceID, pw, cb, true); // temporarily disable local connect\n  }\n\n  async refreshWallets(cb) {\n    if (this.client) {\n      const prevWallet = JSON.stringify(this.client.getActiveWallet());\n      const isPaired = await this.client.connect(this.deviceID).catch(cb)\n      // If we lost connection, the user most likely removed the pairing and will need to repair\n      if (false === this.client.isPaired)\n        return cb(constants.LOST_PAIRING_ERR);\n      // If we pulled a new active wallet, reset balances + transactions\n      // so we can reload a new set.\n      const newWallet = JSON.stringify(this.client.getActiveWallet());\n      if (newWallet !== prevWallet)\n        this.resetStateData();\n      // Update storage. This will remap to a new localStorage key if the wallet UID\n      // changed. If we didn't get an active wallet, it will just clear out the addresses\n      this.getBtcWalletData();\n      return cb(null, isPaired);\n    } else {\n      return cb('Lost connection to Lattice. Please refresh.');\n    }\n  }\n\n  async sign (req) {\n    // Get the tx payload to broadcast\n    return this.client\n      .sign(req)\n      .then(res => {\n        if (res && res.tx) {\n          broadcastBtcTx(res.tx, (err, txid) => {\n            if (err) throw new Error(`Error broadcasting transaction: ${err.message}`);\n            return txid\n          });\n        } else {\n          throw new Error('Signing transaction invalid.');\n        }\n      })\n  }\n\n  _genPrivKey(deviceID, pw, name) {\n    const key = Buffer.concat([\n      Buffer.from(pw), \n      Buffer.from(deviceID),\n      Buffer.from(name),\n    ])\n    // Create a new instance of ReactCrypto using the key as entropy\n    this.crypto = new ReactCrypto(key);\n    return this.crypto.createHash('sha256').update(key).digest();\n  }\n\n  //----------------------------------------------------\n  // NEW STUFF - REWRITING ADDRESS/DATA FETCHING FOR BTC WALLET\n  //----------------------------------------------------\n\n  // Get a set of either pending or confirmed transactions from the full\n  // set of known BTC txs\n  getBtcTxs(confirmed=true) {\n    const txs: any[] = [];\n    this.btcTxs.forEach((t) => {\n      if (confirmed && t.confirmed) {\n        txs.push(t)\n      } else if (!confirmed && !t.confirmed) {\n        txs.push(t)\n      }\n    })\n    return txs;\n  }\n\n  // Get the set of known UTXOs belonging to our known set of BTC addresses\n  getBtcUtxos() {\n    return this.btcUtxos;\n  }\n\n  // Get the BTC balance, which is simply a sum of UTXO values\n  // Returns the balance in satoshis\n  getBtcBalance() {\n    let balance = 0;\n    this.btcUtxos.forEach((u) => {\n      balance += u.value;\n    })\n    return balance;\n  }\n\n  // Fetch necessary addresses based on state data. We need to fetch addresses\n  // for both BTC and BTC_CHANGE such that we have fetched GAP_LIMIT past the last\n  // used address. An address is \"used\" if it has at least one transaction associated.\n  // This function will automatically fetch both BTC and BTC_CHANGE addresses up to\n  // the associated GAP_LIMITs and updates state internally.\n  // Returns a callback containing params (error, numFetched), where `numFetched` is\n  // the total number of *new* addresses we fetched. If this number is >0, it signifies\n  // we should re-fetch transaction data for our new set of addresses.\n  fetchBtcAddresses(cb, isChange=false, totalFetched={regular: 0, change: 0}) {\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return cb('Cannot request BTC addresses while wallet is hidden.');\n    }\n    const lastUsedIdx = this._getLastUsedBtcAddrIdx(isChange);\n    const currentAddrs = (isChange ? this.addresses.BTC_CHANGE : this.addresses.BTC) || [];\n    const GAP_LIMIT = isChange ?  constants.BTC_CHANGE_GAP_LIMIT : \n                                  constants.BTC_MAIN_GAP_LIMIT;\n    const targetIdx = lastUsedIdx + 1 + GAP_LIMIT;\n    const maxToFetch = targetIdx - currentAddrs.length;\n    const nToFetch = Math.min(constants.BTC_ADDR_BLOCK_LEN, maxToFetch)\n    if (nToFetch > 0) {\n      // If we have closed our gap limit we need to get more addresses\n      const changeIdx = isChange ? 1 : 0;\n      const opts = {\n        startPath: [ \n          BTC_PURPOSE, constants.BTC_COIN, harden(0), changeIdx, currentAddrs.length \n        ],\n        n: nToFetch,\n        skipCache: true,\n      }\n      this._getAddresses(opts, (err, addresses) => {\n        if (err)\n          return cb(err);\n        // Track the number of new addresses we fetched\n        if (isChange) {\n          totalFetched.change += nToFetch;\n        } else {\n          totalFetched.regular += nToFetch;\n        }\n        // Save the addresses to memory and also update them in localStorage\n        // Note that we do need to track index here\n        if (isChange) {\n          this.addresses.BTC_CHANGE = currentAddrs.concat(addresses);\n        } else {\n          this.addresses.BTC = currentAddrs.concat(addresses);\n        }\n        console.log('Fetched BTC', this.addresses.BTC)\n        console.log('Fetched BTC_CHANGE', this.addresses.BTC_CHANGE)\n        // If we need to fetch more, recurse\n        if (maxToFetch > nToFetch) {\n          this.fetchBtcAddresses(cb, isChange, totalFetched);\n        } else if (!isChange) {\n          // If we are done fetching main BTC addresses, switch to the change path\n          this.fetchBtcAddresses(cb, true, totalFetched);\n        } else {\n          this.saveBtcWalletData();\n          cb(null, totalFetched);\n        }\n      })\n    } else if (!isChange) {\n      // If we are done fetching main BTC addresses, switch to the change path\n      this.fetchBtcAddresses(cb, true, totalFetched);\n    } else {\n      // Nothing to fetch\n      this.saveBtcWalletData();\n      cb(null, totalFetched);\n    }\n  }\n\n  // We want to clear UTXOs when we re-sync because they could have been spent.\n  // Due to the nature of `fetchBtcStateData`, we need to append new UTXOs to\n  // the existing set as we sync data, so it is best to call this function once\n  // from the component that is starting the resync.\n  clearUtxos() {\n    this.btcUtxos = [];\n  }\n\n  // Fetch transactions and UTXOs for all known BTC addresses (including change)\n  // Calls to appropriate Bitcoin data provider and updates state internally.\n  // Returns a callback with params (error)\n  fetchBtcStateData(opts, cb, isChange=false, txs=[], utxos=[]) {\n    // Determine which addresses for which to fetch state.\n    // If we get non-zero `opts` values it means this is a follow up call\n    // and we only want to fetch data for new addresses we've collected\n    // rather than data for all known addresses.\n    let addrs = (isChange ? this.addresses.BTC_CHANGE : this.addresses.BTC) || [];\n    if (opts && opts.regular > 0) {\n      addrs = this.addresses.BTC.slice(-opts.regular);\n      opts.regular = 0;\n    } else if (opts && opts.change > 0) {\n      // If we have new change addrs but not new regular addrs,\n      // we can force a switch to change here so we don't re-scan\n      // the same regular addresses we have already scanned.\n      isChange = true;\n      addrs = this.addresses.BTC_CHANGE.slice(-opts.change);\n      opts.change = 0;\n    }\n    fetchBtcPrice((err, btcPrice) => {\n      if (err) {\n        // Don't fail out if we can't get the price - just display 0\n        console.error('Failed to fetch price:', err);\n        btcPrice = 0;\n      }\n      fetchBtcTxs(addrs, txs, (err, _txs) => {\n        if (err)\n          return cb(err);\n        else if (!_txs)\n          return cb('Failed to fetch transactions');\n        txs = txs.concat(_txs);\n        fetchBtcUtxos(addrs, (err, _utxos) => {\n          if (err)\n            return cb(err);\n          else if (!_utxos)\n            return cb('Failed to fetch UTXOs');\n          utxos = utxos.concat(_utxos);\n          if (!isChange) {\n            // Once we get data for our BTC addresses, switch to change\n            this.fetchBtcStateData(opts, cb, true, txs, utxos);\n          } else {\n            // All done! Filter/process data and save\n            this.btcPrice = btcPrice;\n            this.lastFetchedBtcData = Math.floor(Date.now());\n            const newTxs = this.btcTxs.concat(txs);\n            this.btcTxs = filterUniqueObjects(newTxs, ['id']);\n            this._processBtcTxs();\n            const newUtxos = this.btcUtxos.concat(utxos);\n            // UTXOs should already be filtered but it doesn't hurt to\n            // do a sanity check filter here.\n            this.btcUtxos =   filterUniqueObjects(newUtxos, ['id', 'vout'])\n                              .sort((a, b) => { return b.value - a.value });\n            this.saveBtcWalletData();\n            cb(null);\n          }\n        })\n      })\n    })\n  }\n\n  // Generic caller to SDK getAddress route with retry mechanism\n  async _getAddresses(opts, cb) {\n    const addresses = await this.client.getAddresses(opts).catch((err) => {\n      // Catch an error, but if the device is busy it probably means it is currently\n      // caching a batch of new addresses. Continue the loop through this request until\n      // it hits.\n      if (err) {\n        if (err === \"Device Busy\") {\n          return this._getAddresses(opts, cb);\n        } else {\n          // To avoid concurrency problems on an initial sync, we need to wait\n          // for the device to refresh addresses before completing the callback\n          setTimeout(() => {\n            return cb(err);\n          }, 2000);\n        }\n      }\n    });\n    return cb(null, addresses);\n  }\n\n  // Get the highest index address that has been used for either BTC or BTC_CHANGE\n  _getLastUsedBtcAddrIdx(change=false) {\n    const coin = change ? 'BTC_CHANGE' : 'BTC';\n    const addrs = this.addresses[coin] || [];\n    const txs = this.btcTxs || [];\n    let lastUsed = -1;\n    for (let i = 0; i < txs.length; i++) {\n      if (txs[i].confirmed) {\n        let maxUsed = lastUsed;\n        txs[i].inputs.forEach((input) => {\n          if (addrs.indexOf(input.addr) > maxUsed)\n            maxUsed = addrs.indexOf(input.addr);\n        })\n        txs[i].outputs.forEach((output) => {\n          if (addrs.indexOf(output.addr) > maxUsed)\n            maxUsed = addrs.indexOf(output.addr);\n        })\n        if (maxUsed > lastUsed)\n          lastUsed = maxUsed;\n      }\n    }\n    return lastUsed;\n  }\n\n  // Loop through known txs, determining value and recipient\n  // based on known addresses.\n  // Recipient should be the first address\n  // If the recipient is one of our addresses, the transaction is inbound\n  // If the transaction is inbound, value is SUM(outputs to our addresses)\n  // If the transaction is outbound, value is SUM(inputs) - SUM(outputs to our addresses)\n  _processBtcTxs() {\n    const allAddrs = this.addresses.BTC.concat(this.addresses.BTC_CHANGE);\n    const processedTxs: any[] = [];\n    const txs = JSON.parse(JSON.stringify(this.btcTxs));\n    txs.forEach((tx) => {\n      // Determine if this is an outgoing transaction or not based on inputs.\n      // We consider a transaction as \"incoming\" if *every* input was signed by\n      // an external address.\n      tx.incoming = tx.inputs.every(input => allAddrs.indexOf(input.addr) === -1);\n\n      // Fill in the recipient. If this is an outgoing transaction, it will\n      // always be the first output. Otherwise, we consider the recipient\n      // to be the first address belonging to us that we can find in outputs.\n      if (!tx.incoming) {\n        tx.recipient = tx.outputs[0].addr;\n      } else {\n        tx.outputs.forEach((output) => {\n          if (!tx.recipient && allAddrs.indexOf(output.addr) > -1) {\n            // Mark the recipient as the first of our addresses we find\n            tx.recipient = allAddrs[allAddrs.indexOf(output.addr)];\n          }\n        })\n        if (!tx.recipient) {\n          // Fallback to the first output. This should not be possible after\n          // the loop above.\n          tx.recipient = tx.outputs[0].addr;\n        }\n      }\n\n      // Calculate the value of the transaction to display in our history\n      tx.value = 0;\n      if (!tx.incoming) {\n        // Outgoing tx: sum(outputs to external addrs)\n        let inputSum = 0;\n        tx.inputs.forEach((input) => {\n          inputSum += input.value;\n        })\n        let internalOutputSum = 0;\n        let externalOutputSum = 0;\n        tx.outputs.forEach((output) => {\n          if (allAddrs.indexOf(output.addr) > -1) {\n            internalOutputSum += output.value;\n          } else {\n            externalOutputSum += output.value;\n          }\n        })\n        if (inputSum === internalOutputSum + tx.fee) {\n          // Edge case: sent to internal address, i.e. internal transaction\n          tx.value = 0;\n        } else {\n          tx.value = externalOutputSum;\n        }\n      } else {\n        // Incoming tx: sum(outputs to internal addrs)\n        tx.outputs.forEach((output) => {\n          if (allAddrs.indexOf(output.addr) > -1) {\n            tx.value += output.value;\n          }\n        })\n      }\n      processedTxs.push(tx);\n    })\n    const sortedTxs = processedTxs\n                      .sort((a, b) => { return b.timestamp - a.timestamp })\n    this.btcTxs = sortedTxs;\n  }\n}\n\nexport default SDKSession","import omit from \"lodash/omit\";\n\nconst LOGIN_ID_STORAGE_KEY = \"gridplus_web_wallet_id\";\nconst LOGIN_PASSWORD_STORAGE_KEY = \"gridplus_web_wallet_password\";\nconst ADDRESSES_STORAGE_KEY = \"gridplus_addresses\";\nconst CONTRACTS_STORAGE_KEY = \"gridplus_contracts\";\nconst CONTRACT_PACKS_STORAGE_KEY = \"gridplus_contracts_packs\";\nconst ROOT_STORE = process.env.REACT_APP_ROOT_STORE || \"gridplus\";\n\n// #region -- Generic Local Storage Functions\n\nconst getItem = (key) => {\n  const value = window.localStorage.getItem(key);\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return JSON.parse(JSON.stringify(value));\n  }\n};\nconst setItem = (key, value) =>\n  window.localStorage.setItem(key, JSON.stringify(value));\nconst removeItem = (key) => window.localStorage.removeItem(key);\n\nconst getRootStore = () => getItem(ROOT_STORE) ?? {};\nconst setRootStore = (value) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify({ ...getRootStore(), ...value })\n  );\nconst removeRootStore = () => removeItem(ROOT_STORE);\n\nconst getRootStoreItem = (key) => getItem(ROOT_STORE)?.[key] ?? {};\nconst setRootStoreItem = (key, value) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify({ ...getRootStore(), [`${key}`]: value })\n  );\nconst removeRootStoreItem = (key) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify(omit(getRootStore(), key))\n  );\n\n// #endregion\n\n// #region -- Settings Functions\n\nconst getSettings = () => getRootStoreItem(\"settings\");\nconst setSettings = (value) => setRootStoreItem(\"settings\", value);\n\n// #endregion\n\n// #region -- Keyring Functions\n\nconst getKeyring = () => getRootStoreItem(\"keyring\");\nconst setKeyring = (value) => setRootStoreItem(\"keyring\", value);\n\nconst getKeyringItem = (key) => getRootStoreItem(\"keyring\")?.[key] ?? {};\nconst setKeyringItem = (key, value) =>\n  setRootStoreItem(\"keyring\", { [`${key}`]: value });\nconst removeKeyringItem = (key) =>\n  setRootStoreItem(\"keyring\", omit(getKeyring(), key));\nconst renameKeyringItem = (oldKey, newKey) => {\n  if (oldKey !== newKey) {\n    const item = { ...getKeyringItem(oldKey) };\n    setKeyringItem(newKey, item);\n    removeKeyringItem(oldKey);\n  }\n};\n\n// #endregion\n\n// #region -- Login Functions\n\nconst getLoginId = () => getItem(LOGIN_ID_STORAGE_KEY);\nconst setLoginId = (value) => setItem(LOGIN_ID_STORAGE_KEY, value);\nconst removeLoginId = () => removeItem(LOGIN_ID_STORAGE_KEY);\n\nconst getLoginPassword = () => getItem(LOGIN_PASSWORD_STORAGE_KEY);\nconst setLoginPassword = (value) => setItem(LOGIN_PASSWORD_STORAGE_KEY, value);\nconst removeLoginPassword = () => removeItem(LOGIN_PASSWORD_STORAGE_KEY);\n\nconst getLogin = () => ({\n  deviceID: getLoginId(),\n  password: getLoginPassword(),\n});\nconst setLogin = ({ deviceID, password }) => {\n  setLoginId(deviceID);\n  setLoginPassword(password);\n};\nconst removeLogin = () => {\n  removeLoginId();\n  removeLoginPassword();\n};\n\n// #endregion\n\n// #region -- Device Indexed Functions\n\nconst getDeviceIndexedItem = (key) => {\n  const deviceId = getLoginId();\n  if (deviceId) {\n    return getRootStoreItem(deviceId)?.[key];\n  }\n};\n\nconst setDeviceIndexedItem = (key, value) => {\n  const deviceId = getLoginId();\n  if (deviceId && value) {\n    return setRootStoreItem(deviceId, {\n      ...getRootStoreItem(deviceId),\n      [`${key}`]: value,\n    });\n  }\n};\n\nconst removeDeviceIndexedItem = (key) => {\n  const deviceId = getLoginId();\n  if (deviceId) {\n    return setRootStoreItem(deviceId, omit(getRootStoreItem(deviceId), key));\n  }\n};\n\n// #endregion\n\n// #region -- Address & Contracts Functions\n\nconst getAddresses = () => getDeviceIndexedItem(ADDRESSES_STORAGE_KEY);\nconst setAddresses = (value) =>\n  setDeviceIndexedItem(ADDRESSES_STORAGE_KEY, value);\nconst removeAddresses = () => removeDeviceIndexedItem(ADDRESSES_STORAGE_KEY);\n\nconst getContracts = () => getDeviceIndexedItem(CONTRACTS_STORAGE_KEY);\nconst setContracts = (value) =>\n  setDeviceIndexedItem(CONTRACTS_STORAGE_KEY, value);\nconst removeContracts = () => removeDeviceIndexedItem(CONTRACTS_STORAGE_KEY);\n\nconst getContractPacks = () => getItem(CONTRACT_PACKS_STORAGE_KEY) ?? [];\nconst setContractPacks = (value) => setItem(CONTRACT_PACKS_STORAGE_KEY, value);\nconst removeContractPacks = () => removeItem(CONTRACT_PACKS_STORAGE_KEY);\n\n// #endregion\n\nconst exports = {\n  getItem,\n  setItem,\n  removeItem,\n  getRootStore,\n  setRootStore,\n  removeRootStore,\n  getRootStoreItem,\n  setRootStoreItem,\n  removeRootStoreItem,\n  getSettings,\n  setSettings,\n  getLoginId,\n  setLoginId,\n  removeLoginId,\n  getLoginPassword,\n  setLoginPassword,\n  removeLoginPassword,\n  getKeyring,\n  setKeyring,\n  getKeyringItem,\n  setKeyringItem,\n  removeKeyringItem,\n  renameKeyringItem,\n  getLogin,\n  setLogin,\n  removeLogin,\n  getDeviceIndexedItem,\n  setDeviceIndexedItem,\n  removeDeviceIndexedItem,\n  getAddresses,\n  setAddresses,\n  removeAddresses,\n  getContracts,\n  setContracts,\n  removeContracts,\n  getContractPacks,\n  setContractPacks,\n  removeContractPacks,\n};\n\nexport default exports\n","import React, { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { useRecords } from \"../hooks/useRecords\";\nimport SDKSession from \"../sdk/sdkSession\";\nimport localStorage from \"../util/localStorage\";\n\n/**\n * A React Hook that allows us to pass data down the component tree without having to pass\n * props.\n */\nexport const AppContext = createContext(undefined);\n\nexport const AppContextProvider = ({\n  children,\n  overrides,\n}: {\n  children: ReactNode;\n  overrides?: { [key: string]: any };\n}) => {\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 500);\n  const [session, setSession] = useState<SDKSession>(null);\n\n  const [isLoadingAddresses, setIsLoadingAddresses] = useState(false);\n  const [\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  ] = useRecords(localStorage.getAddresses() ?? [])\n\n  const defaultContext = {\n    isMobile,\n    session,\n    setSession,\n    isLoadingAddresses,\n    setIsLoadingAddresses,\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  };\n\n  /**\n   * Whenever `addresses` data changes, it is persisted to `localStorage`\n   */\n  useEffect(() => {\n    localStorage.setAddresses(addresses);\n  }, [addresses]);\n\n  /**\n   * Sets `isMobile` when the window resizes.\n   * */\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      const windowIsMobileWidth = window.innerWidth < 500;\n      if (windowIsMobileWidth && !isMobile) setIsMobile(true);\n      if (!windowIsMobileWidth && isMobile) setIsMobile(false);\n    });\n  }, [isMobile]);\n\n  return (\n    <AppContext.Provider value={{ ...defaultContext, ...overrides }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import differenceBy from \"lodash/differenceBy\";\nimport unionBy from \"lodash/unionBy\";\nimport { useState } from \"react\";\nimport { LatticeRecord } from \"../types/records\";\n\n/**\n * `useRecords` is a React hook that builds off of `useState` to add setter functions for\n * interacting with a list of objects:\n *  - `addRecords` - Combines passed in array of records and records in state by comparing ids\n *  - `removeRecords` - Removes passed in array of records from records in state by comparing ids\n * @param defaultValue - any array to set the default value\n */\nexport const useRecords = <T extends LatticeRecord>(\n  defaultValue: T[],\n  id = \"id\"\n): [T[], (toAdd: T[]) => void, (toRemove: T[]) => void, () => void] => {\n  const [records, setRecords] = useState<T[]>(defaultValue);\n\n  const addRecords = (recordsToAdd: T[]) =>\n    setRecords((recordsInState) => unionBy(recordsInState, recordsToAdd, id));\n\n  const removeRecords = (recordsToRemove: T[]) =>\n    setRecords((recordsInState) =>\n      differenceBy(recordsInState, recordsToRemove, id)\n    );\n\n  const resetRecords = () => setRecords([]);\n\n  return [records, addRecords, removeRecords, resetRecords];\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Main } from './components'\nimport { AppContextProvider } from \"./store/AppContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Main />\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\n\nimport { createRoot } from 'react-dom/client';\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Col, Row } from 'antd'\nimport { AppContext } from \"../../store/AppContext\";\nconst SPAN_WIDTH = 14; // Max 24 for 100% width\n\nclass PageContent extends React.Component<any, any> {\n  static contextType = AppContext\n  context = this.context as any;\n\n  render () {\n    if (!this.props.children && !this.props.content)\n      return; // Content must be passed in\n    // Mobile content should be displayed without any padding\n    if (this.context.isMobile)\n      return this.props.children ?this.props.children : this.props.content\n    // Desktop content has some padding\n    return(\n      <Row justify=\"center\">\n        <Col span={SPAN_WIDTH}>\n          {this.props.children || this.props.content}\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default PageContent;","import { EditOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input } from \"antd\";\nimport React, { useState } from \"react\";\n\n/**\n * Allows the user to edit text inline by rendering\n * the string as a button that converts the string \n * into a text field when clicked by the user.\n */\nexport const NameEditor = ({ name, setName }: {\n  name: string;\n  setName: (name: string) => void;\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [form] = Form.useForm();\n\n  const onCancel = () => {\n    form.resetFields();\n    setIsEditing(false);\n  };\n\n  const onFinish = (value) => {\n    setIsEditing(false);\n    setName(value.name);\n  };\n\n  return isEditing ? (\n    <Form\n      form={form}\n      name=\"formData\"\n      layout=\"inline\"\n      onFinish={onFinish}\n      style={{ justifyContent: \"center\" }}\n    >\n      <Form.Item\n        name=\"name\"\n        initialValue={name}\n        rules={[{ required: true, message: \"Name is required.\" }]}\n      >\n        <Input data-testid={`${name}-input`} />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"text\" onClick={onCancel} data-testid={`${name}-cancel`}>\n          Cancel\n        </Button>\n        <Button type=\"ghost\" htmlType=\"submit\" data-testid={`${name}-save`}>\n          Save\n        </Button>\n      </Form.Item>\n    </Form>\n  ) : (\n    <Button\n      type=\"text\"\n      size=\"large\"\n      icon={isHovered ? <EditOutlined /> : null}\n      style={{ fontSize: \"24px\" }}\n      data-testid={`${name}-edit`}\n      onClick={() => setIsEditing(true)}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {name}\n    </Button>\n  );\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Col, Input, Row, Modal } from 'antd'\nimport { DesktopOutlined, LinkOutlined } from '@ant-design/icons';\nimport { Settings } from './index'\nimport { constants } from '../util/helpers'\nimport { NameEditor } from './NameEditor';\nimport { LoginData } from '../types/authentication';\nimport { AppContext } from '../store/AppContext';\n\ntype ConnectProps = {\n  submitCb: (data: LoginData, showLoading: boolean) => void,\n  cancelConnect: () => void,\n  name: string,\n  keyringName: string,\n  setKeyringName: (name: string) => void,\n  errMsg: string\n}\n\ntype ConnectState = {\n  errMsg: string,\n  isLoading: boolean,\n  modal: boolean,\n  showSettings: boolean\n}\n\nclass Connect extends React.Component<ConnectProps, ConnectState> {\n  static contextType = AppContext;\n  context = this.context as any;\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      errMsg: null,\n      isLoading: false,\n      modal: false,\n      showSettings: false,\n    }\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderMsg = this.renderMsg.bind(this);\n    this.showModal = this.showModal.bind(this);\n  }\n\n  componentDidMount() {\n    //@ts-expect-error\n    if (this.input) {\n      //@ts-expect-error\n      this.input.focus();\n    }\n    this.setState({ isLoading: false  })\n  }\n\n  componentDidUpdate() {\n    if (this.props.name !== constants.DEFAULT_APP_NAME && document.title !== 'Lattice Connector') {\n      document.title = 'Lattice Connector'\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ isLoading: false })\n  }\n\n  handleSubmit() {\n    const deviceID = (document.getElementById(\"deviceIdInput\") as HTMLInputElement).value;\n    const password = (document.getElementById(\"passwordInput\") as HTMLInputElement).value;\n    if (password.length < 8) {\n      this.setState({ isLoading: true, errMsg: \"Your password must be at least 8 characters.\"})\n    } else {\n      this.setState({ isLoading: true, errMsg: null })\n      // Call the connect function. Skip the loading screen so we don't\n      // leave the landing page until we connect.\n      this.props.submitCb({deviceID, password}, false);\n    }\n  }\n\n  handleCancel() {\n    this.props.cancelConnect();\n    this.setState({ isLoading: false, errMsg: null });\n  }\n\n  renderConnectButton() {\n    if (this.state.isLoading && \n        this.state.errMsg === null &&\n        this.props.errMsg === null) {\n      return (\n        <div>\n          <Button type=\"primary\"\n                  style={{ margin: '20px 0 0 0' }}\n                  loading>\n            Connecting...\n          </Button>\n          <br/>\n          <Button type=\"link\" onClick={this.handleCancel}>\n            Cancel\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n        <Button type=\"primary\" onClick={this.handleSubmit} style={{ margin: '20px 0 0 0'}}>\n          Connect\n        </Button>\n      )\n    }\n  }\n\n  renderForm(getFieldDecorator) {\n    return (\n      <div>\n        <Row justify=\"center\">\n          <Input  placeholder=\"DeviceID\" \n                  id=\"deviceIdInput\" \n                  //@ts-expect-error\n                  ref={i => {this.input = i}}\n                  style={{ margin: '10px 0 0 0', width: \"70%\"}} />\n        </Row>\n        <Row justify=\"center\">\n          <Input.Password placeholder=\"Password (create for new logins)\" \n                          id=\"passwordInput\" \n                          onPressEnter={this.handleSubmit} \n                          style={{ margin: '20px 0 0 0', width: \"70%\"}} />\n        </Row>\n        <Row justify=\"center\">\n          {this.renderConnectButton()}\n        </Row>\n      </div>\n    )\n  }\n\n  showModal() {\n    this.setState({ modal: true });\n  }\n\n  hideModal() {\n    this.setState({ modal: false, showSettings: false });\n  }\n\n  renderSetupInfo() {\n    return (\n      <div>\n        <center>\n          <h3><b>New User Setup</b></h3>\n        </center>\n        <p>\n          You can use this page to establish a connection between <b>{this.props.name}</b>&nbsp; and your Lattice \n          hardware wallet device.&nbsp;\n          <i>For more general device setup information, please see the&nbsp;\n            <a className=\"lattice-a\" href=\"https://gridplus.io/setup\" target={\"_blank\"} rel={\"noopener noreferrer\"}>\n            Lattice setup page\n            </a>.</i>\n        </p>\n        <h3><b>Step 1:</b></h3>\n        <p>\n          Unlock your Lattice and find its <b>Device ID</b> on the main menu. This is a six-character code.\n        </p>\n        <h3><b>Step 2:</b></h3>\n        <p>\n          Once you have your Device ID, specify a <b>password</b>. This does <i>not</i> secure any value and \n          is <i>not</i> associated with your wallet seed - it is only used to send secure requests to your device. \n          If you lose your password, you can remove the permission on your device and re-connect with a new one.\n        </p>\n        <h3><b>Step 3:</b></h3>\n        <p>\n          Please ensure your Lattice is <b>online</b> and click \"Connect\". Your device is online if there is a single\n          wifi signal icon on the top-right of the screen.\n        </p>\n      </div>\n    )\n  }\n\n  renderModal() {\n    if (this.state.showSettings) {\n      return (\n        <Modal\n          title=\"Settings\"\n          footer={null}\n          visible={this.state.modal}\n          onOk={this.hideModal.bind(this)}\n          onCancel={this.hideModal.bind(this)}\n        >\n          <Settings inModal={true} />\n        </Modal>\n      )\n    }\n     return (\n      <div>\n        <Modal\n          title={this.props.name === constants.DEFAULT_APP_NAME ? this.props.name : 'Lattice Connector 🔗'}\n          footer={null}\n          visible={this.state.modal}\n          onOk={this.hideModal.bind(this)}\n          onCancel={this.hideModal.bind(this)}\n        >\n          {this.renderSetupInfo()}\n        </Modal>\n      </div>\n    );\n  }\n\n  renderMsg() {\n    let err;\n    if (this.state.errMsg)\n      err = this.state.errMsg;\n    else if (this.props.errMsg)\n      err = this.props.errMsg;\n    if (err)\n      return (\n        <Alert  message={<p><b>Error:</b><br/>{err}</p>} \n                type={\"error\"} \n                style={{margin: \"20px 0 0 0\"}}\n                closable/>\n      );\n    return;\n  }\n\n  render() {\n    const spanWidth = this.context.isMobile ? 24 : 10;\n    const spanOffset = this.context.isMobile ? 0 : 7;\n    const tooLong = this.props.keyringName !== null && this.props.keyringName.length < 5;\n    return (\n      <Row>\n        {this.renderModal()}\n        <Col span={spanWidth} offset={spanOffset}>\n          <center>\n            {this.renderMsg()}\n            <Card bordered={true}>\n              <a  className='lattice-a'\n                  href=\"https://gridplus.io/lattice\" \n                  target='_blank' \n                  rel='noopener noreferrer'\n              >\n                {this.props.keyringName ? (\n                  <h2 style={{margin: \"10px 0 0 0\"}}>Lattice Connector <LinkOutlined/></h2>\n                ) : (\n                  <h2 style={{margin: \"10px 0 0 0\"}}>Lattice Manager<br/><DesktopOutlined/></h2>\n                )}\n              </a>\n              {this.props.keyringName ? (\n                <div style={{margin: \"2em\"}}>\n                  <br />\n                  <i><h3>Connect to:</h3></i>\n                  <NameEditor\n                    name={this.props.keyringName}\n                    setName={this.props.setKeyringName}\n                  />\n                </div>) : null}\n              {/* @ts-expect-error */}\n              {tooLong ? (<p><b>Error: App name must be more than 4 characters.</b></p>) : this.renderForm()}\n            </Card>\n            <Button type=\"link\" onClick={this.showModal.bind(this)} style={{margin: \"20px 0 0 0\"}}>\n              New User Info\n            </Button>\n            <br/>\n            <Button type=\"link\" onClick={() => {\n              this.setState({ showSettings: true }, this.showModal)\n            }}>\n              Settings\n            </Button>\n            <br/>\n            <Button type=\"link\" href=\"https://gridplus.io/lattice\" target={\"_blank\"} rel={\"noopener noreferrer\"}>\n              About the Lattice\n            </Button>\n          </center>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default Connect\n","import React from 'react';\nimport { Card, Input } from 'antd'\nimport { PageContent } from './index'\nimport 'antd/dist/antd.dark.css'\nimport { AppContext } from '../store/AppContext';\nconst SUBMIT_LEN = 8; // 8 characters in a code\n\nclass Pair extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ code: '' })\n    //@ts-expect-error\n    if (this.input) {\n      //@ts-expect-error\n      this.input.focus();\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ code: '' })\n  }\n\n  handleUpdate(e) {\n    try {\n      this.setState({ code: e.target.value.toUpperCase() }, () => {\n        if (this.state.code.length >= SUBMIT_LEN) {\n          this.props.submit(this.state.code)\n        }\n      })\n    } catch (err) {\n      ;\n    }\n  }\n\n  getBoxWidth() {\n    const e = document.getElementById('secret-card')\n    if (!e)\n      return\n    return 0.8 * e.clientWidth\n  }\n\n  getBoxFontHeight() {\n    const w = this.getBoxWidth();\n    if (!w)\n      return;\n    return 0.6 * (w / SUBMIT_LEN);\n  }\n\n  render() {\n    if (this.props.hide) {\n      return null;\n    }\n    const size = this.context.isMobile ? 'small' : 'large';\n    const width = this.getBoxWidth();\n    const fontSize = this.getBoxFontHeight();\n    const content = (\n      <center>\n        <Card title=\"Enter Secret\" bordered={true} id='secret-card'>\n          <p></p>\n          <p>Please enter the pairing secret displayed on your Lattice screen:</p>\n          <Input\n            className='lattice-pairing-box'\n            size={size}\n            id=\"secret\"\n            //@ts-expect-error\n            ref={i => {this.input = i}}\n            onChange={this.handleUpdate.bind(this)}\n            style={{width, fontSize}}\n            value={this.state.code}\n          />\n        </Card>\n      </center>\n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Pair","// NOTE: This feature has been shelved for now. The problem is this:\n// 1. We deprecated the ETH wallet and are in the process of deprecating the BTC wallet too\n// 2. Only the paired requester can setup a permission and the web wallet (rebanded manager)\n//    is itself a paired requester.\n// Ideally we could have a true manager that can create a permission on behalf of a paired\n// requester, otherwise the requester needs to have an interface to setup the permission.\n// If we are to use this app as the \"manager\", we cannot manage permissions on it.\n// FOR NOW, I AM HIDING THIS FEATURE IN main.js\n\nimport React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Col, Dropdown, Input, Menu, Row, Select, Spin } from 'antd'\nimport { LoadingOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport { constants, } from '../util/helpers';\nimport { PageContent } from './index'\nimport './styles.css'\nconst BN = require('bignumber.js');\nconst HOURS = 3600;\nconst DAYS = 86400;\nconst assets = {\n  ETH: {\n    name: 'ETH',\n    decimals: 18,\n  },\n  BTC: {\n    name: 'BTC',\n    decimals: 8,\n  }\n}\n\nclass Permissions extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      success: false,\n      loading: false,\n      asset: assets.ETH,\n      timeMultiplier: HOURS, // conversion of window to seconds\n      value: 0,\n      window: 0,\n    }\n\n    this.submit = this.submit.bind(this);\n    this.updateAsset = this.updateAsset.bind(this);\n    this.updateTimeMultiplier = this.updateTimeMultiplier.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.updateWindow = this.updateWindow.bind(this);\n  }\n\n  updateAsset(x) {\n    this.setState({ asset: assets[x.key]})\n  }\n\n  updateTimeMultiplier(x) {\n    this.setState({ timeMultiplier: x })\n  }\n\n  updateWindow(evt) {\n    const x = evt.target.value\n    if (!isNaN(parseFloat(x))) {\n      let s = parseFloat(x);\n      if (x[x.length-1] === '.')\n      //@ts-expect-error\n        s += '.';\n      this.setState({ window: s })\n    }\n    else if (x === '')\n      this.setState({ window: '0' })\n  }\n\n  updateValue(evt) {\n    let x = evt.target.value\n    if (!isNaN(parseFloat(x))) {\n      if (x.length > 1 && x[0] === '0' && x[1] !== '.')\n        x = x.slice(1);\n      this.setState({ value: x })\n    }\n    else if (x === '')\n      this.setState({ value: '0' })\n  }\n\n  submit() {\n    this.setState({ loading: true, error: null, success: false })\n    const req = {\n      currency: this.state.asset.name,\n      decimals: this.state.asset.decimals,\n      timeWindow: Math.floor(parseFloat(this.state.window) * this.state.timeMultiplier),\n      limit: 0,\n      asset: null,\n    };\n    const value = new BN(this.state.value);\n    const decimals = new BN(this.state.asset.decimals);\n    const power = new BN('10').pow(decimals);\n    let limitStr = value.multipliedBy(power).toString(16)\n    if (limitStr.length % 2 > 0)\n      limitStr = `0${limitStr}`;\n    //@ts-expect-error\n    req.limit = `0x${limitStr}`;\n    this.props.session.client.addPermissionV0(req, (err) => {\n      if (err) {\n        this.setState({ error: err.toString(), success: false, loading: false })\n      } else {\n        this.setState({ error: null, success: true, loading: false })\n      }\n    })\n  }\n\n  renderBanner() {\n    if (this.state.error) {\n      return (\n        <Alert\n          message=\"Error\"\n          description={this.state.error}\n          type=\"error\"\n          closable\n          onClose={() => { this.setState({ error: null })}}\n        />\n      )\n    } else if (this.state.loading) {\n      return (\n        <div>\n          <Spin indicator={(<LoadingOutlined/>)}/>\n          <br/>\n        </div>\n      )\n    } else if (this.state.success) {\n      return (\n        <Alert \n          type=\"success\"\n          message=\"Success\"\n          description=\"Successfully added permission to Lattice.\"\n        />\n      )\n    }\n  }\n\n  renderCard() {\n    const timeMultiplierSelect = (\n      <Select defaultValue={HOURS} onChange={this.updateTimeMultiplier}>\n        <Select.Option value={HOURS}>hours</Select.Option>\n        <Select.Option value={DAYS}>days</Select.Option>\n      </Select>\n    )\n\n    const currencyMenu = (\n      <Menu onClick={this.updateAsset}>\n        {Object.keys(assets).map((key) => {\n          return (\n            <Menu.Item key={key}>{key}</Menu.Item>\n          )\n        })}\n      </Menu>\n    );\n\n    return (\n      <div>\n        <p>\n          You can set spending limits for ETH and BTC. If you make a request from this web wallet that is under your\n          spending limit, your Lattice will auto-sign the transaction. Note that this currently only works for simple \n          ETH and BTC transfers.&nbsp;\n           <a className='lattice-a'\n              href={constants.PERMISSIONS_HELP_LINK}\n              target='_blank'\n              rel='noopener noreferrer'\n          >\n            (More info)\n          </a>        \n        </p>\n        <br/>\n        <i>This is a feature prototype. In the future, GridPlus intends to expand this functionality\n        to other assets and more general contract interactions.</i>\n        <br/><br/>\n        <p><b>Currency:</b></p>\n        <Row>\n          <Col span={12} offset={6}>\n            <Dropdown overlay={currencyMenu}>\n              <Button>{this.state.asset.name}</Button>\n            </Dropdown>\n          </Col>\n        </Row>\n        <br/>\n        <p><b>Spending Limit:</b></p>\n        <Row>\n          <Col span={12} offset={6}>\n            <Input type=\"text\"\n                  id=\"permission-value\" \n                  value={this.state.value} \n                  onChange={this.updateValue.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <p><b>Reset Every:</b></p>\n         <Row>\n          <Col span={12} offset={6}>\n            <Input type=\"text\"\n                  id=\"permission-window\"\n                  addonAfter={timeMultiplierSelect}\n                  value={this.state.window} \n                  onChange={this.updateWindow.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <Button type=\"primary\" onClick={this.submit}>\n          Set Limit\n        </Button>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderBanner()}\n        <Card title={<div>\n          <h3>Spending Limits (Beta)&nbsp;\n            <a  className='lattice-a'\n                href={constants.PERMISSIONS_HELP_LINK}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n              <QuestionCircleOutlined/>\n            </a>\n          </h3>\n        </div>} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Permissions","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Col, Collapse, Input, Radio, Row, Space, Table } from 'antd'\nimport { WarningOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\nimport './styles.css'\nimport omit from \"lodash/omit\"\nimport { constants, getBtcPurpose } from '../util/helpers';\nimport localStorage from '../util/localStorage';\n\nclass Settings extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      settings: localStorage.getSettings(),\n      keyring: localStorage.getKeyring(),\n    }\n    this.getBtcPurposeName = this.getBtcPurposeName.bind(this)\n  }\n\n\n  submit() {\n    // Save the settings to localStorage\n    localStorage.setSettings(this.state.settings)\n    // Reload the page for the changes to take effect\n    window.location.reload();\n  }\n\n  updateUseCustomEndpoint(value) {\n    const settings = this.state.settings;\n    if (value !== true) {\n      // Reset the custom endpoint if this value is false\n      settings.customEndpoint = '';\n    }\n    this.setState({ settings });\n  }\n\n  updateCustomEndpoint(evt) {\n    const settings = this.state.settings;\n    settings.customEndpoint = evt.target.value;\n    this.setState({ settings });\n  }\n\n  removeKeyring ({ name }) {\n    localStorage.removeKeyringItem(name)\n    this.setState({ keyring: omit(this.state.keyring, name) })\n  }\n\n  resetState() {\n    localStorage.removeRootStore()\n    window.location.reload();\n  }\n\n  renderCustomEndpointSetting() {\n    const { customEndpoint='' } = this.state.settings;\n    return (\n      <Card>\n        <Row justify='center'>\n          <Col span={20}>\n            <h3>Connection Endpoint:</h3>\n            <p>\n              If you wish to route messages and connections through your own endpoint, you may specify it here.&nbsp;\n              Otherwise leave blank.&nbsp; See&nbsp;\n              <a  href=\"https://github.com/GridPlus/lattice-connect\"\n                  className='lattice-a'\n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\">\n                this\n              </a> for more information.\n            </p>\n            <div>\n              <Input  placeholder=\"host:port\" \n                      defaultValue={customEndpoint} \n                      onChange={this.updateCustomEndpoint.bind(this)}/>\n            </div>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n\n  handleChangeBitcoinVersionSetting(evt) {\n    const settings = this.state.settings;\n    settings.btcPurpose = parseInt(evt.target.value);\n    this.setState({ settings }, this.submit)\n  }\n\n  getBtcPurposeName() {\n    const purpose = this.state.settings.btcPurpose ?\n                    this.state.settings.btcPurpose :\n                    getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_NONE) {\n      return constants.BTC_PURPOSE_NONE_STR;\n    } else if (purpose === constants.BTC_PURPOSE_LEGACY) {\n      return constants.BTC_PURPOSE_LEGACY_STR\n    } else if (purpose === constants.BTC_PURPOSE_WRAPPED_SEGWIT) {\n      return constants.BTC_PURPOSE_WRAPPED_SEGWIT_STR\n    } else if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n      return constants.BTC_PURPOSE_SEGWIT_STR;\n    } else {\n      return 'Error finding BTC version'\n    }\n  }\n\n  renderBitcoinVersionSetting() {\n    // NOTE: Firmware does not yet support segwit addresses\n    // TODO: Uncomment this when firmware is updated\n    const purpose = getBtcPurpose() || constants.BTC_PURPOSE_NONE;\n    return (\n      <Card>\n        <h4>Bitcoin Wallet Type</h4>\n        <Radio.Group  onChange={this.handleChangeBitcoinVersionSetting.bind(this)}\n                      defaultValue={purpose}>\n          <Space direction=\"vertical\">\n            <Radio value={constants.BTC_PURPOSE_NONE}>\n              Hide BTC Wallet\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_SEGWIT}>\n              {constants.BTC_PURPOSE_SEGWIT_STR}\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_WRAPPED_SEGWIT}>\n              {constants.BTC_PURPOSE_WRAPPED_SEGWIT_STR}\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_LEGACY}>\n              {constants.BTC_PURPOSE_LEGACY_STR}\n            </Radio>\n          </Space>\n        </Radio.Group>\n      </Card>\n    )\n  }\n\n  renderDebugSettings() {\n    return (\n      <Card>\n        <h4>Debug Settings</h4>\n        <Row justify='center' style={{ margin: '10px 0 0 0'}}>\n          <Button type=\"link\" onClick={this.resetState} className='warning-a'>\n          <WarningOutlined/>&nbsp;Reset App State\n        </Button>\n        </Row>\n      </Card>\n    )\n  }\n\n  renderKeyringsSetting() {\n    const keyring = localStorage.getKeyring()\n    const cols = [\n      { \n        title: 'App Name', \n        dataIndex: 'name', \n        key: 'name'\n      }, \n      { \n        title: 'Action', \n        dataIndex: 'action', \n        key: 'action',\n        render: (text, record) => (\n          <Button type=\"link\" onClick={() => {this.removeKeyring(record)}}>Forget</Button>\n        ) \n      }\n    ]\n    const data: any[] = [];\n    Object.keys(keyring)\n      .sort((a, b) => { return a.toLowerCase() > b.toLowerCase() ? 1 : -1 })\n      .forEach((name) => { data.push({ name, key: name }) })\n    return (\n      <Card>\n        <Row justify='center'>\n          <Col span={20}>\n            <h3>Third Party Connections</h3>\n            <p>\n              Manage connections to your Lattice. Third party apps should be listed here if they are connected to your device.\n            </p>\n            <Collapse>\n              <Collapse.Panel header={`Connections List (${data.length})`} key='third-party'>\n                <Table dataSource={data} columns={cols}/>\n              </Collapse.Panel>\n            </Collapse>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n\n  renderCard() {\n    return (\n      <div>\n        {this.renderKeyringsSetting()}\n        {this.renderCustomEndpointSetting()}\n        {this.renderBitcoinVersionSetting()}\n        {this.renderDebugSettings()}\n        <br/>\n        <Button type=\"primary\" onClick={this.submit.bind(this)}>\n          Update and Reload\n        </Button>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        <Card title={'Settings'} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    if (this.props.inModal)\n      return (<center>{this.renderCard()}</center>);\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Settings","import { Button, notification } from \"antd\";\n\nexport const sendErrorNotification = ({\n  message,\n  description,\n  onClick,\n  onClose,\n}: {\n  message: string;\n  description?: string;\n  onClick?: () => void;\n  onClose?: () => void;\n}) => {\n  const key = `error-${Date.now()}`;\n  const btn = onClick && (\n    <Button\n      danger\n      size=\"small\"\n      onClick={() => {\n        onClick();\n        notification.close(key);\n      }}\n    >\n      Retry\n    </Button>\n  );\n  notification.open({\n    message,\n    description,\n    placement: \"top\",\n    btn,\n    key,\n    type: \"error\",\n    onClose,\n  });\n};\n","import _ from \"lodash\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../store/AppContext\";\nimport { LatticeRecord } from \"../types/records\";\nimport { constants } from \"../util/helpers\";\nimport { sendErrorNotification } from \"../util/sendErrorNotification\";\nconst { ADDRESSES_PER_PAGE, ADDRESS_RECORD_TYPE } = constants;\n\n/**\n * The `useAddresses` hook is used to manage the external calls for fetching, adding, and removing\n * key-value address data on the user's Lattice and caching that data in `store`.\n */\nexport const useAddresses = () => {\n  const {\n    session,\n    isLoadingAddresses,\n    setIsLoadingAddresses,\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  } = useContext(AppContext);\n\n  /**\n   * Fetches the installed addresses from the user's Lattice.\n   */\n  const fetchAddresses = useCallback(\n    async (fetched = 0) => {\n      setIsLoadingAddresses(true);\n\n      return session.client\n        .getKvRecords({\n          start: fetched,\n          n: ADDRESSES_PER_PAGE,\n        })\n        .then(async (res) => {\n          addAddressesToState(res.records);\n          const totalFetched = res.fetched + fetched;\n          const remainingToFetch = res.total - totalFetched;\n          if (remainingToFetch > 0) {\n            await fetchAddresses(fetched + res.fetched);\n          }\n        })\n        .catch((err) => {\n          sendErrorNotification({\n            ...err,\n            onClick: fetchAddresses,\n          });\n        })\n        .finally(() => {\n          setIsLoadingAddresses(false);\n        });\n    },\n    [addAddressesToState, session, setIsLoadingAddresses]\n  );\n\n  /**\n   * Removes installed addresses from the user's Lattice.\n   */\n  const removeAddresses = (selectedAddresses: LatticeRecord[]) => {\n    const ids = selectedAddresses.map((r) => parseInt(r.id));\n    if (isEmpty(ids)) return;\n    setIsLoadingAddresses(true);\n\n    return session.client\n      .removeKvRecords({ ids })\n      .then(() => {\n        removeAddressesFromState(selectedAddresses);\n      })\n      .catch((err) => {\n        sendErrorNotification({\n          ...err,\n          onClick: () => removeAddresses(selectedAddresses),\n        });\n      })\n      .finally(() => {\n        setIsLoadingAddresses(false);\n      });\n  };\n\n  /**\n   * Adds new addresses to the user's Lattice.\n   */\n  const addAddresses = async (addressesToAdd: LatticeRecord[]) => {\n    setIsLoadingAddresses(true);\n\n    /**\n     * Transform `addressesToAdd` data into chunks of size `ADDRESSES_PER_PAGE` with shape `{ key:\n     * val }` for sending to Lattice because the Lattice can only handle a particular amount of\n     * addresses at a time.\n     */\n    const recordsList = _.chain(addressesToAdd)\n      .chunk(ADDRESSES_PER_PAGE)\n      .map((addrChunk) =>\n        _.chain(addrChunk).keyBy(\"key\").mapValues(\"val\").value()\n      )\n      .value();\n\n    return new Promise<void>(async (resolve, reject) => {\n      for await (const records of recordsList) {\n        await session.client\n          .addKvRecords({\n            caseSensitive: false,\n            type: ADDRESS_RECORD_TYPE,\n            records,\n          })\n          .catch((err) => {\n            sendErrorNotification(err);\n            reject(err);\n          });\n      }\n      resolve();\n    })\n      .then(async () => {\n        // TODO: Remove fetch and call addAddressesToState() with the address data when FW is\n        //  updated to return address data. See GitHub issue:\n        //  https://github.com/GridPlus/k8x_firmware_production/issues/2323\n        await fetchAddresses();\n      })\n      .catch(sendErrorNotification)\n      .finally(() => {\n        setIsLoadingAddresses(false);\n      });\n  };\n\n  return {\n    fetchAddresses,\n    addresses,\n    addAddresses,\n    addAddressesToState,\n    removeAddresses,\n    removeAddressesFromState,\n    resetAddressesInState,\n    isLoadingAddresses,\n  };\n};\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\n\nexport const AddAddressesButton = ({ showModal }) => {\n  const { isLoadingAddresses } = useAddresses();\n\n  return (\n    <Button\n      type=\"ghost\"\n      onClick={showModal}\n      disabled={isLoadingAddresses}\n      icon={<PlusOutlined />}\n    >\n      Add\n    </Button>\n  );\n};\n","import { MinusSquareFilled, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input, Modal, Space } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { sendErrorNotification } from \"../util/sendErrorNotification\";\n\nconst MAX_RECORD_LEN = 63; // 63 characters max for both key and value\nexport const keyIsDuplicatedErrorMessage =\n  \"You already have a tag with this address on your device.\";\nexport const addingKeyIsDuplicatedErrorMessage =\n  \"You are already trying to add a tag with this address.\";\nexport const valIsDuplicatedErrorMessage =\n  \"You already have a tag with this name on your device.\";\nexport const addingValIsDuplicatedErrorMessage =\n  \"You are already trying to add a tag with this name.\";\n\nexport const AddAddressesModal = ({\n  isModalVisible,\n  setIsModalVisible,\n  initialAddresses,\n}) => {\n  const { addresses, addAddresses, isLoadingAddresses } = useAddresses();\n  const [form] = Form.useForm();\n\n  const hideModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    hideModal();\n  };\n\n  const onFinish = () => {\n    form\n      .validateFields()\n      .then(({ addressesToAdd }) =>\n        addAddresses(addressesToAdd).then(hideModal)\n      );\n  };\n\n  const onFinishFailed = () => {\n    sendErrorNotification({\n      message: \"Unable to submit\",\n      description: \"Please fix errors in form and try again.\",\n    });\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"Add Address Tags\"\n        visible={isModalVisible}\n        maskClosable={false}\n        onOk={form.submit}\n        onCancel={handleCancel}\n        destroyOnClose={true}\n        footer={[\n          <Button type=\"link\" onClick={handleCancel} key=\"cancel\">\n            Cancel\n          </Button>,\n          <Button\n            type=\"primary\"\n            loading={isLoadingAddresses}\n            onClick={form.submit}\n            key=\"add\"\n          >\n            Add\n          </Button>,\n        ]}\n      >\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <Form\n            form={form}\n            name=\"formData\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            autoComplete=\"off\"\n            preserve={false}\n            layout=\"vertical\"\n          >\n            <Form.List name=\"addressesToAdd\" initialValue={initialAddresses}>\n              {(fields, { add, remove }) => (\n                <>\n                  {fields.map(({ key, name, ...restField }) => (\n                    <div\n                      key={`${name}-inputs`}\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        marginBottom: \"1em\",\n                        width: \"100%\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          flexGrow: 1,\n                        }}\n                      >\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"key\"]}\n                          validateTrigger={[\"onChange\", \"onBlur\"]}\n                          rules={[\n                            { required: true, message: \"Address is required.\" },\n                            {\n                              max: MAX_RECORD_LEN,\n                              type: \"string\",\n                              message: `Must be shorter than ${MAX_RECORD_LEN} characters.`,\n                            },\n                            {\n                              validator: (rule, key) => {\n                                return addresses?.some((r) => r.key === key)\n                                  ? Promise.reject(\n                                      new Error(keyIsDuplicatedErrorMessage)\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                            {\n                              validator: (rule, key) => {\n                                const matchingKeys = form\n                                  .getFieldsValue()\n                                  .addressesToAdd?.filter((r) => r.key === key);\n                                return matchingKeys.length > 1\n                                  ? Promise.reject(\n                                      new Error(\n                                        addingKeyIsDuplicatedErrorMessage\n                                      )\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                          ]}\n                        >\n                          <Input\n                            addonBefore={\"Address\"}\n                            data-testid={`${name}-address-input`}\n                            disabled={isLoadingAddresses}\n                          />\n                        </Form.Item>\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"val\"]}\n                          validateTrigger={[\"onChange\", \"onBlur\"]}\n                          rules={[\n                            { required: true, message: \"Name is required\" },\n                            {\n                              max: MAX_RECORD_LEN,\n                              type: \"string\",\n                              message: `Must be shorter than ${MAX_RECORD_LEN} characters.`,\n                            },\n                            {\n                              validator: (rule, val) => {\n                                return addresses?.some((r) => r.val === val)\n                                  ? Promise.reject(\n                                      new Error(valIsDuplicatedErrorMessage)\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                            {\n                              validator: (rule, val) => {\n                                const matchingVals = form\n                                  .getFieldsValue()\n                                  .addressesToAdd?.filter((r) => r.val === val);\n                                return matchingVals.length > 1\n                                  ? Promise.reject(\n                                      new Error(\n                                        addingValIsDuplicatedErrorMessage\n                                      )\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                          ]}\n                        >\n                          <Input\n                            addonBefore={\"Name\"}\n                            data-testid={`${name}-name-input`}\n                            disabled={isLoadingAddresses}\n                          />\n                        </Form.Item>\n                      </div>\n                      {name > 0 ? (\n                        <Button\n                          type=\"text\"\n                          icon={<MinusSquareFilled />}\n                          disabled={isLoadingAddresses}\n                          style={{\n                            height: \"auto\",\n                            marginLeft: \"1em\",\n                            marginBottom: \"1.2em\",\n                          }}\n                          onClick={() => {\n                            remove(name);\n                            form.validateFields();\n                          }}\n                        />\n                      ) : null}\n                    </div>\n                  ))}\n                  <Form.Item>\n                    <Button\n                      type=\"dashed\"\n                      block\n                      icon={<PlusOutlined />}\n                      disabled={isLoadingAddresses}\n                      onClick={add}\n                    >\n                      Add Another Address Tag\n                    </Button>\n                  </Form.Item>\n                </>\n              )}\n            </Form.List>\n          </Form>\n        </Space>\n      </Modal>\n    </>\n  );\n};\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Table } from \"antd\";\nimport fuzzysort from \"fuzzysort\";\nimport intersectionBy from \"lodash/intersectionBy\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { constants } from \"../util/helpers\";\nimport { abbreviateHash } from \"../util/addresses\";\nconst { ADDRESSES_PER_PAGE } = constants;\n\n/**\n * `AddressTable` is a table of key-value pairs of names and hashes with some management features to\n * make it easier to manage a large amount of addresses.\n */\nexport const AddressTable = () => {\n  const { isLoadingAddresses, addresses, removeAddresses } = useAddresses();\n  const [input, setInput] = useState(\"\");\n  const [filteredAddresses, setFilteredAddresses] = useState([]);\n  const [selectedAddresses, setSelectedAddresses] = useState([]);\n\n  useEffect(() => {\n    setInput(\"\");\n    setFilteredAddresses(addresses);\n  }, [addresses, isLoadingAddresses]);\n\n  const filter = useCallback(\n    (value) =>\n      fuzzysort\n        .go(value, addresses, { keys: [\"key\", \"val\"] })\n        .map((x) => x.obj),\n    [addresses]\n  );\n\n  const handleOnSelect = (_, __, _selectedAddresses) => {\n    setSelectedAddresses(_selectedAddresses);\n  };\n\n  const handleOnSelectAll = (_, _selectedAddresses) => {\n    setSelectedAddresses(_selectedAddresses);\n  };\n\n  const onChange = ({ target: { value } }) => {\n    setInput(value);\n    const _addresses = value ? filter(value) : addresses;\n    setFilteredAddresses(_addresses);\n    setSelectedAddresses(intersectionBy(selectedAddresses, _addresses, \"key\"));\n  };\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <Input\n          value={input}\n          placeholder=\"Filter\"\n          disabled={isLoadingAddresses}\n          onChange={onChange}\n          style={{ marginBottom: \"1em\" }}\n          allowClear\n        />\n        <Button\n          danger\n          type=\"text\"\n          disabled={selectedAddresses.length === 0}\n          onClick={() =>\n            removeAddresses(selectedAddresses).then(() => {\n              setSelectedAddresses([]);\n            })\n          }\n          style={{ marginLeft: \"1em\" }}\n        >\n          Remove Selected\n        </Button>\n      </div>\n      <Table\n        dataSource={filteredAddresses}\n        tableLayout=\"fixed\"\n        loading={{\n          spinning: isLoadingAddresses,\n          tip: \"Loading...\",\n          indicator: <LoadingOutlined />,\n        }}\n        pagination={{\n          position: [\"bottomCenter\"],\n          pageSize: ADDRESSES_PER_PAGE,\n          defaultCurrent: 1,\n          showSizeChanger: false,\n        }}\n        rowSelection={{\n          type: \"checkbox\",\n          onSelect: handleOnSelect,\n          onSelectAll: handleOnSelectAll,\n          selectedRowKeys: selectedAddresses.map((x) => x.key),\n        }}\n      >\n        <Table.Column\n          title=\"Name\"\n          dataIndex=\"val\"\n          key=\"val\"\n          defaultSortOrder=\"ascend\"\n          sorter={(a: any, b: any) => a.val.localeCompare(b.val)}\n        />\n        <Table.Column\n          title=\"Address\"\n          dataIndex=\"key\"\n          key=\"key\"\n          render={(key) => abbreviateHash(key)}\n          sorter={(a: any, b: any) => a.key.localeCompare(b.key)}\n        />\n      </Table>\n    </div>\n  );\n};\n","/**\n * `abbreviateHash` takes a string and returns the first 10 and last 8 characters with an ellipsis between.\n * @param {string} hash - the hash string to shorten.\n */\nexport const abbreviateHash = (hash: string) => hash && hash.length > 24 ? `${hash.slice(0, 10)}...${hash.slice(\n  hash.length - 8,\n  hash.length\n)}` : hash ?? \"\"\n","import Papa from \"papaparse\";\nimport { Address } from \"../types/records\";\n\nexport const getAddressKey = (address): string => {\n  if (address.Name) return address.Name;\n  if (address.name) return address.name;\n  if (address.Key) return address.Key;\n  if (address.key) return address.key;\n  return \"\";\n};\n\nexport const getAddressVal = (address): string => {\n  if (address.Address) return address.Address;\n  if (address.address) return address.address;\n  if (address.Val) return address.Val;\n  if (address.val) return address.val;\n  return \"\";\n};\n\nexport const addressesToCsvString = (addresses: any[]): string => {\n  const addressList = addresses.map((address) => {\n    return {\n      name: address.key,\n      address: address.val,\n    };\n  });\n  return Papa.unparse(addressList);\n};\n\nexport const csvStringToAddresses = (text: string): Address[] => {\n  const result = Papa.parse(text, {\n    header: true,\n  });\n  return result?.data.map((address) => {\n    return {\n      key: getAddressKey(address),\n      val: getAddressVal(address),\n    };\n  });\n};\n","import { ExportOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { addressesToCsvString } from \"../util/csv\";\n\nexport const ExportAddressesButton = () => {\n  const { isLoadingAddresses, addresses } = useAddresses();\n\n  const handleOnClick = () => {\n    const csv = addressesToCsvString(addresses);\n    const csvData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    let csvURL = null;\n    csvURL = window.URL.createObjectURL(csvData);\n    const tempLink = document.createElement(\"a\");\n    tempLink.href = csvURL;\n    tempLink.setAttribute(\"download\", \"SavedAddresses.csv\");\n    tempLink.click();\n  };\n\n  return (\n    <Button\n      type=\"default\"\n      icon={<ExportOutlined />}\n      disabled={isLoadingAddresses}\n      onClick={handleOnClick}\n    >\n      Export\n    </Button>\n  );\n};\n","import { ImportOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\n\nexport const ImportAddressesButton = ({ showModal }) => {\n  const { isLoadingAddresses } = useAddresses();\n\n  return (\n    <Button\n      type=\"default\"\n      icon={<ImportOutlined />}\n      disabled={isLoadingAddresses}\n      onClick={showModal}\n    >\n      Import\n    </Button>\n  );\n};\n","import { Button, Modal, Space } from \"antd\";\nimport { useState } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { csvStringToAddresses } from \"../util/csv\";\n\nexport const ImportAddressesModal = ({\n  isModalVisible,\n  setIsModalVisible,\n  setIsAddAddressesModalVisible,\n  setInitialAddresses,\n}) => {\n  const { isLoadingAddresses } = useAddresses();\n  const [file, setFile] = useState();\n  const fileReader = new FileReader();\n\n  const hideModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    hideModal();\n  };\n\n  const handleOnChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n\n    if (file) {\n      fileReader.onload = function (event) {\n        const text = event.target.result as string;\n        const addresses = csvStringToAddresses(text);\n        setInitialAddresses(addresses);\n        hideModal();\n        setIsAddAddressesModalVisible(true);\n      };\n\n      fileReader.readAsText(file);\n    }\n  };\n\n  return (\n    <Modal\n      title=\"Add Address Tags\"\n      visible={isModalVisible}\n      maskClosable={false}\n      onOk={handleOnSubmit}\n      onCancel={handleCancel}\n      destroyOnClose={true}\n      footer={[\n        <Button type=\"link\" onClick={handleCancel} key=\"cancel\">\n          Cancel\n        </Button>,\n        <Button\n          type=\"primary\"\n          loading={isLoadingAddresses}\n          onClick={handleOnSubmit}\n          key=\"add\"\n        >\n          Import\n        </Button>,\n      ]}\n    >\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <input\n          type={\"file\"}\n          id={\"csvFileInput\"}\n          accept={\".csv\"}\n          onChange={handleOnChange}\n        />\n      </Space>\n    </Modal>\n  );\n};\n","import { Button } from \"antd\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { SyncOutlined } from \"@ant-design/icons\";\n\nexport const SyncAddressesButton = () => {\n  const { fetchAddresses, isLoadingAddresses, resetAddressesInState } =\n    useAddresses();\n\n  return (\n    <Button\n      type=\"link\"\n      icon={<SyncOutlined />}\n      disabled={isLoadingAddresses}\n      onClick={() => {\n        resetAddressesInState();\n        fetchAddresses();\n      }}\n    >\n      Sync\n    </Button>\n  );\n};\n","import { Card } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { useEffect, useState } from \"react\";\nimport { AddAddressesButton } from \"../components/AddAddressesButton\";\nimport { AddAddressesModal } from \"../components/AddAddressesModal\";\nimport { AddressTable } from \"../components/AddressTable\";\nimport { ExportAddressesButton } from \"../components/ExportAddressesButton\";\nimport { ImportAddressesButton } from \"../components/ImportAddressesButton\";\nimport { ImportAddressesModal } from \"../components/ImportAddressesModal\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { PageContent } from \"./formatting\";\nimport { SyncAddressesButton } from \"./SyncAddressesButton\";\n\nconst AddressTagsPage = () => {\n  const { fetchAddresses, isLoadingAddresses, addresses } = useAddresses();\n  const [isAddAddressesModalVisible, setIsAddAddressesModalVisible] =\n    useState(false);\n  const [isImportAddressesModalVisible, setIsImportAddressesModalVisible] =\n    useState(false);\n\n  const [initialAddresses, setInitialAddresses] = useState([\n    { key: null, val: null },\n  ]);\n\n  useEffect(() => {\n    if (isEmpty(addresses) && !isLoadingAddresses) {\n      fetchAddresses();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const extra = [\n    <SyncAddressesButton key=\"sync-addresses-button\" />,\n    <AddAddressesButton\n      key=\"add-addresses-button\"\n      showModal={() => setIsAddAddressesModalVisible(true)}\n    />,\n    <ImportAddressesButton\n      showModal={() => setIsImportAddressesModalVisible(true)}\n      key=\"import-addresses-button\"\n    />,\n    <ExportAddressesButton key=\"export-addresses-button\" />,\n  ];\n\n  return (\n    <PageContent>\n      <Card title={\"Address Tags\"} extra={extra} bordered>\n        <AddressTable />\n      </Card>\n      <AddAddressesModal\n        isModalVisible={isAddAddressesModalVisible}\n        setIsModalVisible={setIsAddAddressesModalVisible}\n        initialAddresses={initialAddresses}\n      />\n      <ImportAddressesModal\n        isModalVisible={isImportAddressesModalVisible}\n        setIsAddAddressesModalVisible={setIsAddAddressesModalVisible}\n        setIsModalVisible={setIsImportAddressesModalVisible}\n        setInitialAddresses={setInitialAddresses}\n      />\n    </PageContent>\n  );\n};\n\nexport default AddressTagsPage;\n","import { Card } from \"antd\";\nimport { constants, getBtcPurpose } from \"../util/helpers\";\n\nconst isBtcWalletActive = () => constants.BTC_PURPOSE_NONE !== getBtcPurpose();\nconst PAGE_KEYS = constants.PAGE_KEYS;\n\nexport const LandingCard = ({\n  icon,\n  title,\n  body,\n  link,\n  goToPage,\n}: {\n  icon: React.ReactNode;\n  title: string;\n  body: string;\n  link: string;\n  goToPage: (key: string) => void;\n}) => (\n  <div style={{ flexGrow: 1, flexBasis: 0 }}>\n    <a\n      onClick={(event) => {\n        if (link === \"settings\") {\n          event.preventDefault();\n          if (isBtcWalletActive()) {\n            goToPage(PAGE_KEYS.WALLET);\n          } else {\n            goToPage(PAGE_KEYS.SETTINGS);\n          }\n        }\n        if (link === \"address-tags\") {\n          event.preventDefault();\n          goToPage(PAGE_KEYS.ADDRESS_TAGS);\n        }\n      }}\n      href={link}\n      className=\"lattice-a\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Card\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n        }}\n        hoverable\n      >\n        <b style={{ color: \"#94B3FD\" }}>\n          {icon}&nbsp;{title}\n        </b>\n        <p>\n          <i>{body}</i>\n        </p>\n      </Card>\n    </a>\n  </div>\n);\n","import {\n  CreditCardOutlined,\n  TagsOutlined,\n  TwitterOutlined,\n  YoutubeOutlined,\n  InfoCircleOutlined,\n} from \"@ant-design/icons\";\nimport { faBtc } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Alert, Card } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport React from \"react\";\nimport { useFeature } from \"../hooks/useFeature\";\nimport { PageContent } from \"./index\";\nimport { LandingCard } from \"./LandingCard\";\n\nconst Landing = ({ goToPage }) => {\n  const { USES_AUTO_ABI } = useFeature();\n\n  return (\n    <PageContent>\n      <Card\n        style={{ textAlign: \"center\" }}\n        headStyle={{ fontSize: \"32px\" }}\n        title=\"Lattice Manager\"\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"30px\",\n            margin: \"25px\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <div style={{ width: \"200px\" }}>\n              <p style={{ fontSize: \"1.2em\" }}>\n                Manage secure data on your Lattice hardware wallet device for a\n                better web3 experience\n              </p>\n            </div>\n            <img\n              src=\"lattice-landing.png\"\n              style={{ maxWidth: \"250px\" }}\n              alt=\"lattice-one-device\"\n            />\n          </div>\n          <div>\n            <h2>Features</h2>\n            <div\n              style={{\n                display: \"flex\",\n                gap: \"10px\",\n                justifyContent: \"center\",\n                flexWrap: \"wrap\",\n              }}\n            >\n              <LandingCard\n                title=\"Address Tags\"\n                body=\"Tag your favorite contracts or addresses\"\n                icon={<TagsOutlined />}\n                link={\"address-tags\"}\n                goToPage={goToPage}\n              />\n              <LandingCard\n                title=\"Bitcoin Wallet\"\n                body={\"Check balances and send BTC transactions\"}\n                icon={<FontAwesomeIcon icon={faBtc} />}\n                link=\"settings\"\n                goToPage={goToPage}\n              />\n            </div>\n          </div>\n          <div>\n            <h2>Resources</h2>\n            <div\n              style={{\n                display: \"flex\",\n                gap: \"10px\",\n                justifyContent: \"center\",\n                flexWrap: \"wrap\",\n              }}\n            >\n              <LandingCard\n                title=\"@GridPlus\"\n                body=\"Follow GridPlus on Twitter\"\n                icon={<TwitterOutlined />}\n                link=\"https://twitter.com/GridPlus\"\n                goToPage={goToPage}\n              />\n              <LandingCard\n                title=\"GridPlus\"\n                body=\"Subscribe to GridPlus on YouTube\"\n                icon={<YoutubeOutlined />}\n                link=\"https://youtube.com/GridPlus\"\n                goToPage={goToPage}\n              />\n              <LandingCard\n                title=\"Documentation\"\n                body=\"Learn more about your Lattice\"\n                icon={<InfoCircleOutlined />}\n                link=\"https://docs.gridplus.io\"\n                goToPage={goToPage}\n              />\n              <LandingCard\n                title=\"SafeCards\"\n                body=\"Backup or create new wallets\"\n                icon={<CreditCardOutlined />}\n                link=\"https://gridplus.io/safecards\"\n                goToPage={goToPage}\n              />\n            </div>\n          </div>\n        </div>\n        {!USES_AUTO_ABI ? (\n          <Alert\n            style={{ maxWidth: \"500px\", margin: \"auto\" }}\n            message=\"Lattice firmware is out of date\"\n            description={\n              <div style={{ padding: \"0 25px 0 25px\" }}>\n                <p>\n                  Please update immediately to receive automatic contract\n                  decoding, which ensures you know what you're signing.\n                </p>\n                <div\n                  style={{ margin: \"auto\", width: \"66%\", textAlign: \"left\" }}\n                >\n                  <p>To update your firmware:</p>\n                  <ol>\n                    <li>Unlock your device</li>\n                    <li>\n                      Tap <strong>Settings</strong>\n                    </li>\n                    <li>\n                      Tap <strong>Software Update</strong>\n                    </li>\n                    <li>\n                      Tap <strong>Update</strong>\n                    </li>\n                  </ol>\n                </div>\n              </div>\n            }\n            type=\"warning\"\n            showIcon\n          />\n        ) : null}\n      </Card>\n    </PageContent>\n  );\n};\n\nexport default Landing;\n","import { useContext } from \"react\";\nimport { AppContext } from \"../store/AppContext\";\n\n/**\n * `useFeature` is a React hook for feature flags that makes it easy to know when a particular\n * feature is active for a version of the Lattice firmware (or other external data).\n * \n * To add a feature, add a SNAKE_CASE key to the `features` variable with an array that specifies\n * the required version of firmware as [fix, minor, major].\n */\nexport const useFeature = (): { [feature: string]: boolean } => {\n  const { session } = useContext(AppContext);\n  const { fix, minor, major } = session.client.getFwVersion();\n\n  const features = {\n    CAN_VIEW_CONTRACTS: [0, 14, 0],\n    USES_AUTO_ABI: [0, 15, 0],\n  };\n\n  return Object.fromEntries(\n    Object.entries(features).map(([key, [_fix, _minor, _major]]) => [\n      key,\n      fix >= _fix && minor >= _minor && major >= _major,\n    ])\n  );\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\n\nclass Loading extends React.Component<any, any> {\n  render() {\n    const content = (\n      <center>\n        <Card title=\"Loading\" bordered={true}>\n          {this.props.spin !== false ? (\n            <Spin indicator={<LoadingOutlined/>} />\n          ) : null}\n          <p>{this.props.msg ? this.props.msg : \"Waiting for data from your Lattice\"}</p>\n          {this.props.onCancel ? (\n            <Button type='link' onClick={this.props.onCancel}>\n              Cancel\n            </Button>\n          ) : null}\n        </Card>\n      </center>\n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Loading","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Card, Button } from 'antd'\n\nclass Error extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.keyPressListener = this.keyPressListener.bind(this);\n    this.submit = this.submit.bind(this)\n   }\n\n  componentDidMount() {\n    window.addEventListener('keypress', this.keyPressListener)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keypress', this.keyPressListener)\n  }\n\n  keyPressListener(e) {\n    if (e.key === 'Enter')\n      this.submit()\n  }\n\n  submit() {\n    this.props.retryCb()\n  }\n\n  render() {\n    return (\n      <center>\n        <Card title=\"Error\" bordered={true}>\n          <p>{this.props.msg}</p>\n          {this.props.retryCb ? (\n            <Button id=\"submitButton\"\n              //@ts-expect-error - danger type is missing in antd\n              onClick={this.submit} type=\"danger\">\n              {this.props.btnMsg || \"Retry\"}\n            </Button>\n          ): null}\n        </Card>\n      </center>\n    )\n  }\n}\n\nexport default Error","\nimport React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Avatar, Divider, Statistic, List, Row, Card, Tag} from 'antd';\nimport { \n  CaretLeftOutlined, CaretRightOutlined, ClockCircleOutlined, \n  ArrowDownOutlined, ArrowUpOutlined, ReloadOutlined\n} from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { constants } from '../../util/helpers'\nimport { AppContext } from '../../store/AppContext';\n\nclass Wallet extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n\n  componentDidMount() {\n    if (this.props.session) {\n      this.props.session.getBtcWalletData()\n    }\n  }\n\n  getInnerWidth() {\n    return document.getElementById('main-content-inner')?.offsetWidth;\n  }\n\n  // Make sure text doesn't overflow on smaller screens. We need to trim larger strings\n  ensureTrimmedText(text) {\n    if (!this.context.isMobile) return text;\n    const maxChars = this.getInnerWidth() / 22;\n    if (text.length > maxChars) return `${text.slice(0, maxChars)}...`\n    return text;\n  }\n\n  // Render a transaction in a list\n  renderListItem(item) {\n    // Label to view transaction on explorer\n    const label = (\n      //@ts-expect-error\n      <div align={this.context.isMobile ? \"left\" : \"right\"}>\n        {item.confirmed ? (\n          <p>\n            {item.incoming ? 'Received ' : 'Sent '}\n            {getDateDiffStr(item.timestamp)} ago\n          </p>) : null}\n        <Button size=\"small\" \n                href={`${constants.BTC_TX_BASE_URL}/${item.id}`} \n                target=\"_blank\"\n          >View</Button>\n      </div>\n    );\n    if (item.value === 0) {\n      // This is an internal transaction, meaning all spenders and recipients\n      // are addresses we control\n      return (\n        <List.Item key={item.hash}>\n          <List.Item.Meta avatar={<Avatar src={'/BTC.png'}/>}\n                          title='Internal Transaction'\n                          description='This transaction sender and recipient are your addresses.'\n          />\n          {label}\n        </List.Item>\n      )\n    }\n    // Information about the transaction\n    const title = `${item.value / Math.pow(10, 8)} BTC`\n    const subtitle = `\\t${this.ensureTrimmedText(item.recipient)}`;\n    const itemMeta = (\n      <List.Item.Meta avatar={<Avatar src={'/BTC.png'}/>}\n                      title={item.confirmed ? (\n                        <p>{`${title}`}</p>\n                      ) : (\n                        <p><i>{`${title}`}</i></p>\n                      )}\n                      description={item.confirmed ? (\n                        <p>\n                          {item.incoming ? (\n                            <ArrowDownOutlined/>\n                          ) : (\n                            <ArrowUpOutlined/>\n                          )}\n                          {`${subtitle}`}\n                        </p>\n                      ) : (\n                        <p>\n                          {item.incoming ? (\n                            <ArrowDownOutlined/>\n                          ) : (\n                            <ArrowUpOutlined/>\n                          )}\n                          <i>{`${subtitle}`}</i>\n                        </p>\n                      )}\n      />\n    )\n    if (this.context.isMobile) {\n      return (\n        <List.Item key={item.hash}>\n          <Row justify='center'>{itemMeta}</Row>\n          <Row justify='center'>{label}</Row>\n        </List.Item>\n      )    \n    } else {\n      return(\n        <List.Item key={item.hash}>\n          {itemMeta}\n          {label}\n        </List.Item>\n      )\n    }\n  }\n\n  renderLastUpdatedTag() {\n    if (!this.props.session)\n      return;\n    const lastUpdated = this.props.session.lastFetchedBtcData;\n    if (!lastUpdated) {\n      return (\n        <Tag color={'red'}>Never</Tag>\n      )\n    }\n    //@ts-expect-error\n    const elapsedSec = Math.floor((new Date() - lastUpdated) / 1000);\n    let elapsed, timeType, color;\n    if (elapsedSec < 60) {\n      // Just display that it was updated \"seconds\" ago if we're under a minute\n      elapsed = '';\n      timeType = 'seconds';\n      color = 'green';\n    } else if (elapsedSec < 3600) {\n      // A couple minutes is fine, but more than 10 and there's probably a connectivity\n      // problem -- display orange warning tag\n      elapsed = Math.floor(elapsedSec / 60);\n      timeType = elapsed === 1 ? 'min' : 'mins';\n      color = 'green'\n    } else if (elapsedSec < 172800) {\n      // Less than a 2 days we display hours \n      elapsed = Math.floor(elapsedSec / 3600);\n      timeType = elapsed === 1 ? 'hour' : 'hours';\n      color = 'orange';\n    } else { \n      // Otherwise display days\n      elapsed = Math.floor(elapsedSec / 86400);\n      timeType = 'days';\n      color = 'red';\n    }\n    return (\n      <Tag color={color}>{`${elapsed} ${timeType} ago`}</Tag>\n    )\n  }\n\n  renderList() {\n    const txs = {\n      confirmed: this.props.session.getBtcTxs(),\n      pending: this.props.session.getBtcTxs(false),\n    }\n    return (\n      <div>\n        {txs.pending.length > 0 ? (\n          <Card title={<p><ClockCircleOutlined/> Pending</p>} \n                bordered={true}\n                style={{ margin: '0 0 30px 0'}}>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={txs.pending}\n              renderItem={item => (\n                this.renderListItem(item)\n              )}\n            />\n          </Card>\n        ): null}\n        <Card title=\"Transactions\" bordered={true}>\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={txs.confirmed}\n            renderItem={item => (\n              this.renderListItem(item)\n            )}\n          />\n        </Card>\n      </div>\n    )\n  }\n\n  renderHeader() {\n    const btcBalance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    const btcPrice = this.props.session.btcPrice;\n    return (\n      <div>\n        <Row justify='center' style={{margin: \"20px 0 0 0\"}}>\n            <Statistic title=\"Balance\" value={`${btcBalance} BTC`} />\n        </Row>\n        <Row justify='center'>\n          <Statistic title=\"USD Value\" value={btcBalance * btcPrice} precision={2} />\n        </Row>\n      </div>\n    )\n  }\n\n  renderPages() {\n    const page = this.props.session.getPage();\n    const txs = this.props.session.getBtcTxs();\n    return (\n      <center style={{margin: \"20px 0 0 0\"}}>\n        {page > 1 ? (\n          <Button onClick={() => {this.props.pageTurnCb(page-1)}}>\n            <CaretLeftOutlined/>\n          </Button>\n        ) : null}\n        {txs.length >= constants.PAGE_SIZE ? (\n          <Button onClick={() => { this.props.pageTurnCb(page+1)}}>\n            <CaretRightOutlined/>\n          </Button>\n        ): null}\n      </center>\n    )\n  }\n\n  renderStartCard() {\n    return (\n      <Card title={`BTC Wallet`} bordered={true}>\n        <center>\n          <p>You have not loaded any addresses yet.</p>\n          <Button size=\"large\" \n                  type=\"primary\" \n                  ghost \n                  onClick={() => {this.props.refreshData()}}\n          >\n            Start\n          </Button>\n        </center>\n      </Card>\n    )\n  }\n\n  renderContent() {\n    const lastUpdated = this.props.session.lastFetchedBtcData;\n    if (!lastUpdated) {\n      return this.renderStartCard();\n    }\n    return (\n      <div>\n        <Card title={`BTC Wallet`} bordered={true}>\n          <Row justify='center'>\n            Last Update&nbsp;{this.renderLastUpdatedTag()}\n            <Button size=\"small\" \n                    type=\"primary\" \n                    ghost \n                    onClick={() => {this.props.refreshData()}}\n            >\n              Refresh <ReloadOutlined/>\n            </Button>\n          </Row>\n          <Row justify='center' style={{margin: \"20px 0 0 0\"}}>\n            {this.renderHeader()}\n          </Row>\n        </Card>\n        <Divider/>\n        <div>\n          {this.renderList()}\n          {this.renderPages()}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderContent()}\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Wallet\n\n// Get a human readable, string representation of the difference\n// between two dates\nfunction getDateDiffStr(ts) {\n  const then = new Date(ts);\n  const now = new Date();\n  const min = 1000 * 60;\n  const hour = min * 60;\n  const day = hour * 24;\n  const week = day * 7;\n  const month = week * 4;\n  const year = month * 12;\n\n  //@ts-expect-error\n  const diff = now - then;\n\n  if (diff / min < 1) {\n    return 'seconds';\n  } else if (diff / hour < 1) {\n    return `${Math.floor(diff/min)} minutes`;\n  } else if (diff / day < 1) {\n    return `${Math.floor(diff/hour)} hours`;\n  } else if (diff / week < 1) {\n    return `${Math.floor(diff/day)} days`;\n  } else if (diff / month < 1) {\n    return `${Math.floor(diff/week)} weeks`;\n  } else if (diff / year < 1) {\n    return `${Math.floor(diff/month)} months`;\n  } else {\n    return `${Math.floor(diff/year)} years`\n  }\n\n}","const Buffer = require('buffer/').Buffer\nconst { validateBtcAddr } = require('./helpers');\n\nexport const allChecks = {\n  'ETH': {\n    full: checkEth,\n    recipient: checkEthRecipient,\n    value: checkNumericValue,\n  },\n  'BTC': {\n    full: checkBtc,\n    recipient: validateBtcAddr,\n    value: checkNumericValue,\n  }\n}\n\n// Checks for Ethereum transfers (ETH or token)\nfunction checkEth(data) {\n  return fullCheck(data, checkEthRecipient);\n}\n\n// Checks for Bitcoin transfers\nfunction checkBtc(data) {\n  return fullCheck(data, validateBtcAddr);\n}\n\n// Perform a check on the recipient and value\n// @returns bool -- true if params are both valid\nfunction fullCheck(data, recipientCheck) {\n  return true === recipientCheck(data.recipient) && true === checkNumericValue(data.value);\n} \n\nfunction checkEthRecipient(recipient) {\n  if (recipient === '') return null;\n  try {\n    // Make sure there is a 0x prefix\n    const isPrefixed = recipient.slice(0, 2) === '0x';\n    // Check that the address contains exactly 20 hex bytes.\n    // If any of the data is non-hex, the length will be shorter\n    const correctLength = Buffer.from(recipient.slice(2), 'hex').length === 20;\n    return isPrefixed === true && correctLength === true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction checkNumericValue(value) {\n  if (value === '') return false;\n  try {\n    const num = Number(value);\n    return !isNaN(num) && num >= 0;\n  } catch (e) {\n    return false;\n  }\n}\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Row, Input, InputNumber, Empty, Statistic, notification } from 'antd'\nimport { CheckCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { allChecks } from '../../util/sendChecks';\nimport { constants, buildBtcTxReq, getBtcNumTxBytes } from '../../util/helpers'\nimport '../styles.css'\nimport { AppContext } from '../../store/AppContext';\nconst RECIPIENT_ID = \"recipient\";\nconst VALUE_ID = \"value\";\n\nclass Send extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recipient: '',\n      value: null,\n      recipientCheck: null,\n      valueCheck: null,\n      error: null,\n      isLoading: false,\n      txHash: null,\n      btcFeeRate: constants.BTC_DEFAULT_FEE_RATE,\n      ensResolvedAddress: null,\n    }\n\n    this.handleENSResolution = this.handleENSResolution.bind(this);\n    this.renderBanner = this.renderBanner.bind(this);\n    this.renderSubmitButton = this.renderSubmitButton.bind(this);\n    this.renderValueLabel = this.renderValueLabel.bind(this);\n    this.submit = this.submit.bind(this);\n    this.buildBtcRequest = this.buildBtcRequest.bind(this);\n    this.updateBtcFeeRate = this.updateBtcFeeRate.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://blockstream.info/api/fee-estimates')\n    .then((response) => response.json())\n    .then((resp) => {\n      if (resp['1']) { // Expected confirmation in 1 block\n        this.setState({ btcFeeRate: Math.ceil(Number(resp['1'])) })\n      }\n      if (this.props.session) {\n        this.props.session.getBtcWalletData()\n      }\n    })\n    .catch((err) => {\n      console.error(`Error from fetching fee rates: ${err.toString()}`)\n    })\n  }\n\n  //========================================================\n  // STATE MANAGERS\n  //========================================================\n\n  handleENSResolution(err, address) {\n    if (err || address === null)\n      return this.setState({ recipientCheck: false, ensResolvedAddress: null })\n    // If we got an address, stash that under \"ensResolvedAddress\" so as to not\n    // overwrite the text in the display component.\n    return this.setState({ recipientCheck: true, ensResolvedAddress: address })\n  }\n\n  updateRecipient(evt) {\n    const val = evt.target.value;\n    const check = allChecks.BTC.recipient(val);\n    this.setState({ \n      recipient: val,\n      ensResolvedAddress: null,\n      recipientCheck: check, \n    });\n  }\n\n  checkValue(val) {\n    // Verify that it is smaller than the balance\n    const balance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    if (val === '' || val === null || val === undefined)\n      return null;\n    return (Number(balance) >= Number(val));\n  }\n\n  updateValue(evt) {\n    let val = evt.target.value;\n    let numberVal = Number(val);\n    const isZeroPrefixed = val[0] === '0';\n    const isLessThanOne = isZeroPrefixed && val[1] === '.';\n    // Only update state if the value can be converted to a number!\n    if (val === '0') {\n      // Plain zero is fine\n      ;\n    } else if (!isNaN(numberVal)) {\n      // We want to save the string, as it may contain a period\n      // which is necessary for forming decimal numbers\n      // Because we will be saving the string and not the number,\n      // we should make sure we strip out leading zeros for numbers\n      // larger than zero (i.e. 0.4 is good, 01.4 is not)\n      if (isZeroPrefixed && !isLessThanOne) val = val.slice(1);\n    } else if (val === '.') {\n      // If the user is trying to make a decimal value <1, prefix\n      // with a 0\n      val = '0' + val;\n    } else {\n      return;\n    }\n    this.setState({ \n      value: val,\n      valueCheck: this.checkValue(val) \n    });\n  }\n\n  updateBtcFeeRate(value) {\n    this.setState({ btcFeeRate: value })\n  }\n\n  //========================================================\n  // TRANSACTION-RELATED BUILDERS AND HOOKS\n  //========================================================\n  buildBtcRequest() {\n    const req = buildBtcTxReq(this.state.recipient, \n                              this.state.value,\n                              this.props.session.btcUtxos, \n                              this.props.session.addresses['BTC'],  \n                              this.props.session.addresses['BTC_CHANGE'],\n                              this.state.btcFeeRate,\n                              this.state.value === this.calculateMaxValue());\n    if (req.error) {\n      this.setState({ error: req.error });\n      return null;\n    } else if (!req.data) {\n      this.setState({ error: 'Invalid response when building BTC transaction request. '});\n      return null;\n    }\n    return req;\n  }\n\n  submit() {\n    const req = this.buildBtcRequest();\n    if (req) {\n      notification.open({\n        message: \"Waiting for signature...\",\n        key: 'signNotification',\n        description: `We have sent the transaction to your Lattice for signing.\n                      After approval, the transaction will be broadcast.`,\n        duration: 0,\n      });\n      this.setState({ isLoading: true });\n      this.props.session\n        .sign(req)\n        .then((txHash) => {\n          // Start watching this new tx hash for confirmation\n          this.setState({\n            recipient: '',\n            recipientCheck: null,\n            value: null,\n            valueCheck: null,\n            txHash,\n            error: null,\n            isLoading: false\n          })\n        })\n        .catch((err) => {\n          // Display an error banner\n          this.setState({\n            error: err,\n            isLoading: false,\n            txHash: null,\n          });\n          console.error(err)\n        })\n        .finally(() => {\n          notification.close(\"signNotification\");\n        });\n    }\n  }\n\n  //========================================================\n  // HELPERS\n  //========================================================\n\n  getUrl() {\n    return `${constants.BTC_TX_BASE_URL}/${this.state.txHash}`;\n  }\n\n  //========================================================\n  // RENDERERS\n  //========================================================\n\n  renderValueLabelTitle() {\n    return (\n      <p style={{textAlign: 'left'}}>\n        <b>Value</b>\n        <Button type=\"link\"\n                onClick={() => { \n                  this.updateValue({ \n                    target: { \n                      value: this.calculateMaxValue(),\n                    } \n                  }) \n                }}>\n          Max\n        </Button>\n        {this.renderIcon(VALUE_ID)}\n      </p>\n    )\n  }\n\n  renderValueLabel() {\n    const input = (\n      <Input type=\"text\"\n              id={VALUE_ID} \n              value={this.state.value} \n              onChange={this.updateValue.bind(this)}\n      />\n    );\n    return (\n      <Row justify='center'>\n        {this.renderValueLabelTitle()}\n        {input}\n      </Row>\n    );\n  }\n\n  renderRecipientLabel() {\n    return (          \n      <Row justify='center'>  \n        <p style={{textAlign:'left'}}>\n          <b>Recipient</b>\n          &nbsp;&nbsp;&nbsp;{this.renderIcon(RECIPIENT_ID)}\n        </p>\n        <Input type=\"text\" \n                id={RECIPIENT_ID} \n                value={this.state.recipient} \n                onChange={this.updateRecipient.bind(this)}\n        />\n      </Row>\n    )\n  }\n\n  renderIcon(id) {\n    const name = `${id}Check`;\n    const isValid = this.state[name];\n    if (isValid === true) {\n      return (<CheckCircleOutlined style={{color: 'green'}}/>)\n    } else if (isValid === false) {\n      return (<CloseCircleOutlined style={{color: 'red'}}/>)\n    } else {\n      return;\n    }\n  }\n\n  renderBanner() {\n    if (this.state.error) {\n      const description = this.state.error?.message\n        ? this.state.error.message\n        : this.state.error;\n      return (\n        <Alert\n          message=\"Failed to Send Transaction\"\n          description={description}\n          type=\"error\"\n          closable\n          onClose={() => { this.setState({ error: null })}}\n        />\n      )\n    } else if (this.state.txHash) {\n      const desc = this.context.isMobile ? (\n        <p>Transaction signed and broadcast successfully.&nbsp;\n        <a className='lattice-a' target='_blank' rel='noopener noreferrer' href={this.getUrl()}>View</a></p>\n      ) : (\n        <p>\n          Your transaction was signed and broadcast successfully. \n          Please return to your History tab and refresh to see status.\n        </p>\n      )\n      return (\n        <Alert\n          type=\"success\"\n          message=\"Success\"\n          description={desc}\n        />\n      )\n    } else {\n      return;\n    }\n  }\n\n  renderExtra() {\n    return (\n      <div>\n        <Row justify='center'>\n          <b><p>Fee (sat/byte):</p></b>\n        </Row>\n        <Row justify='center'>        \n          <InputNumber\n            min={1}\n            max={100}\n            onChange={this.updateBtcFeeRate}\n            value={this.state.btcFeeRate}\n          />\n        </Row>\n      </div>\n    )\n  }\n\n  calculateMaxValue() {\n    const balance = this.props.session.getBtcBalance();\n    const utxos = this.props.session.getBtcUtxos();\n    // To spend all BTC, get the size of all UTXOs and calculate the fee required\n    const txBytes = getBtcNumTxBytes(utxos.length);\n    const feeSat = Math.floor(this.state.btcFeeRate * txBytes);\n    // @ts-expect-error\n    return Math.max(((balance - feeSat) / constants.SATS_TO_BTC).toFixed(8), 0);\n  }\n\n  renderSubmitButton() {\n    // If all checks have passed, display the button\n    const isValidReq = (\n      (true === this.state.valueCheck) &&\n      (allChecks.BTC.full(this.state) || this.state.ensResolvedAddress !== null)\n    );\n\n    if (this.state.isLoading) {\n      return (\n        <Button type=\"primary\"\n                style={{ margin: '30px 0 0 0'}}\n                loading>\n          Waiting...\n        </Button>\n      )\n    } else if (isValidReq) {\n      return (\n        <Button type=\"primary\" \n                onClick={this.submit} \n                style={{ margin: '30px 0 0 0'}}>\n          Send\n        </Button>\n      )\n    } else {\n      return (\n        <Button type=\"primary\"\n                style={{ margin: '30px 0 0 0'}}\n                disabled>\n          Send\n        </Button>\n      )\n    }\n  }\n\n  renderBalance() {\n    let balance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    return (\n      <Row justify='center' style={{margin: \"0 0 20px 0\"}}>\n        <Statistic title=\"Balance\" value={`${balance} BTC`} />\n      </Row>\n    )\n  }\n\n  renderCard() {\n    const hasAddressesSlot = this.props.session.addresses.BTC;\n    const hasAddresses =  hasAddressesSlot ? \n                          this.props.session.addresses.BTC.length > 0 : \n                          false;\n    if (hasAddresses) {\n      return (\n        <div>\n          {this.renderBalance()}\n          <div>\n            {this.renderRecipientLabel()}\n          </div>\n          <div style={{margin: \"20px 0 0 0\"}}>\n            {this.renderValueLabel()}\n          </div>\n          <div style={{margin: \"20px 0 0 0\"}}>\n            {this.renderExtra()}\n          </div>\n          {this.renderSubmitButton()}\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No addresses found from your Lattice. If you have your wallet setup, please try logging out and reconnecting.</p>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderBanner()}\n        <Card title={'Send BTC'} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />    )\n  }\n}\n\nexport default Send\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Row, Input, Empty } from 'antd'\nimport { CopyOutlined } from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { validateBtcAddr } from '../../util/helpers'\nimport { AppContext } from '../../store/AppContext';\nimport  { QRCodeSVG } from 'qrcode.react';\nconst { Search, TextArea } = Input;\nconst SEARCH_ID = \"address-data\";\n\nclass Receive extends React.Component<any, any> {\n  static contextType = AppContext;\n  context = this.context as any;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: null,\n      windowWidth: document.getElementById('main-content-inner')?.offsetWidth,\n    }\n\n    this.updateWidth = this.updateWidth.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateDisplayAddress();\n    if (this.props.session) {\n      this.props.session.getBtcWalletData()\n    }\n    window.addEventListener('resize', this.updateWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  updateWidth() {\n    this.setState({ windowWidth:  document.getElementById('main-content-inner')?.offsetWidth });\n  }\n\n  updateDisplayAddress() {\n    const displayAddr = this.props.session.getBtcDisplayAddress();\n    if (displayAddr) this.setState({ address:  displayAddr });\n  }\n\n  copyAddress() {\n    const copy = document.getElementById(SEARCH_ID);\n    //@ts-expect-error\n    copy.select();\n    document.execCommand(\"copy\")\n  }\n\n\n  renderAddrBox() {\n    if (this.context.isMobile) {\n      return (\n        <div>\n          <TextArea id={SEARCH_ID}\n                    value={this.state.address}\n                    autoSize={{minRows: 1, maxRows: 3}}\n                    style={{margin: \"30px 0 0 0\", \"textAlign\": \"center\"}}/>\n          <Button type=\"primary\"\n                  style={{margin: \"20px 0 0 0\"}}\n                  onClick={this.copyAddress}>\n            Copy <CopyOutlined/>\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n         <Search type=\"text\" \n                  id={SEARCH_ID} \n                  value={this.state.address} \n                  enterButton={<CopyOutlined/>}\n                  onSearch={this.copyAddress}\n                  style={{margin: \"30px 0 0 0\", \"textAlign\": \"center\"}}\n          />\n      );\n    }\n  }\n\n  renderCard() {\n    if (this.state.address) {\n      // Sanity check on BTC address checksum\n      if (!validateBtcAddr(this.state.address))\n        return;\n      const cardW = document.getElementById(\"receive-card\")?.offsetWidth;\n      const w = Math.min(300, 0.8 * cardW);\n      return (\n        <div>\n          <Row justify='center'>\n            <QRCodeSVG value={this.state.address} \n                    size={w}\n                    style={{margin: \"30px 0 0 0\"}}\n            />\n          </Row>\n          <Row justify='center'>\n            {this.renderAddrBox()}\n          </Row>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No addresses found</p>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const content = (\n      <center>\n        <Card title={'Receive BTC'} bordered={true} id=\"receive-card\">\n          <center>\n            {this.renderCard()}\n          </center>\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Receive"],"sourceRoot":""}